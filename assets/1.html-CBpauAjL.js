import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-p3NHxYvF.js";const l="/CrazyBlob/assets/images/source/img.png",t={};function p(r,s){return n(),a("div",null,s[0]||(s[0]=[e('<h1 id="loader" tabindex="-1"><a class="header-anchor" href="#loader"><span>Loader</span></a></h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述"><span>概述</span></a></h2><p>Loader用于对模块源代码进行转换，在import或加载模块时预处理文件<br> 默认情况下，在遇到import或者require加载模块的时候，webpack只支持对js和json文件打包。像css、sass、png等这些类型的文件的时候，webpack则无能为力，这个时候就需要配置对应的loader进行文件内容的解析。</p><figure><img src="'+l+`" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h2 id="使用方式" tabindex="-1"><a class="header-anchor" href="#使用方式"><span>使用方式</span></a></h2><div class="language-javascript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="javascript" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-javascript"><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">export</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">csss</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;style-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                        loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;css-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                        options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                            modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;sass-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><p>因为loader支持链式调用，联众的每个loader会处理之前已处理过的资源，最终变为js代码。顺序为相反的顺序执行，即上述执行方式为sass-loader、css-loader、style-loader</p><ul><li>loader可以是同步的，也可以是异步的</li><li>loader运行在Nodejs中，并且能够执行任何操作。</li><li>除了常见的通过package.json的面来讲一个npm模块导出为loader，还可以在module.rules中使用loader字段直接引用一个模块。</li><li>插件（plugin）可以为loader带来更多特性</li><li>loader能够产生额外的任意文件。</li></ul><h2 id="常见的loader" tabindex="-1"><a class="header-anchor" href="#常见的loader"><span>常见的loader</span></a></h2><ol><li>Style-loader 将css添加到Dom的内联样式标签style中</li><li>Css-loader 允许将css文件通过require的方式引入，并返回css代码</li><li>Less-loader 处理less</li><li>Sass-loader 处理sass</li><li>Postcss-loader 处理css</li><li>Autoprefixer-loader 处理css 已弃用</li><li>File-loader 分发文件到output目录并返回相对路径</li><li>Url-loader 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url</li><li>Html-minify-loader 压缩HTML</li><li>babel-loader 用babel来转化ES6文件到其他版本</li></ol>`,11)]))}const o=i(t,[["render",p]]),k=JSON.parse('{"path":"/learn/Webpack/1.html","title":"Loader","lang":"zh-CN","frontmatter":{"icon":"akar-icons:file","date":"2025-05-06T00:00:00.000Z","order":1,"category":["Webpack"],"description":"Loader 概述 Loader用于对模块源代码进行转换，在import或加载模块时预处理文件 默认情况下，在遇到import或者require加载模块的时候，webpack只支持对js和json文件打包。像css、sass、png等这些类型的文件的时候，webpack则无能为力，这个时候就需要配置对应的loader进行文件内容的解析。 img.png...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Loader\\",\\"image\\":[\\"https://mister-hope.github.io/CrazyBlob/assets/images/source/img.png\\"],\\"datePublished\\":\\"2025-05-06T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-19T09:00:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr shen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/CrazyBlob/learn/Webpack/1.html"}],["meta",{"property":"og:site_name","content":"CrazyKaiSa"}],["meta",{"property":"og:title","content":"Loader"}],["meta",{"property":"og:description","content":"Loader 概述 Loader用于对模块源代码进行转换，在import或加载模块时预处理文件 默认情况下，在遇到import或者require加载模块的时候，webpack只支持对js和json文件打包。像css、sass、png等这些类型的文件的时候，webpack则无能为力，这个时候就需要配置对应的loader进行文件内容的解析。 img.png..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/CrazyBlob/assets/images/source/img.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-19T09:00:39.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-19T09:00:39.000Z"}]]},"git":{"createdTime":1755594039000,"updatedTime":1755594039000,"contributors":[{"name":"Shenxinjie","username":"Shenxinjie","email":"1574650522@qq.com","commits":1,"url":"https://github.com/Shenxinjie"}]},"readingTime":{"minutes":1.46,"words":438},"filePathRelative":"learn/Webpack/1.md","excerpt":"\\n<h2>概述</h2>\\n<p>Loader用于对模块源代码进行转换，在import或加载模块时预处理文件<br>\\n默认情况下，在遇到import或者require加载模块的时候，webpack只支持对js和json文件打包。像css、sass、png等这些类型的文件的时候，webpack则无能为力，这个时候就需要配置对应的loader进行文件内容的解析。</p>\\n<figure><img src=\\"/assets/images/source/img.png\\" alt=\\"img.png\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img.png</figcaption></figure>","autoDesc":true}');export{o as comp,k as data};
