import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,o as n}from"./app-p3NHxYvF.js";const l={};function t(h,s){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vue3-相当于vue2-的提升" tabindex="-1"><a class="header-anchor" href="#vue3-相当于vue2-的提升"><span>Vue3 相当于Vue2 的提升</span></a></h1><h2 id="响应式原理-proxy" tabindex="-1"><a class="header-anchor" href="#响应式原理-proxy"><span>响应式原理(Proxy)</span></a></h2><p>Vue3 使用了 Proxy 来实现响应式系统，而 Vue2 使用的是 Object.defineProperty。Proxy[ES6] 提供了更强大的功能，可以直接监听对象的新增和删除属性，而不需要像 Vue2 那样使用 Vue.set 和 Vue.delete。<br> 这使得 Vue3 的响应式系统更加高效和灵活。</p><h2 id="碎片化-fragments" tabindex="-1"><a class="header-anchor" href="#碎片化-fragments"><span>碎片化(Fragments)</span></a></h2><p>Vue3 支持组件的多个根节点，这被称为“碎片化”（Fragments）。在 Vue2 中，每个组件只能有一个根节点，而 Vue3 允许组件返回多个根节点，这使得组件的结构更加灵活。</p><h2 id="异步组件-suspense" tabindex="-1"><a class="header-anchor" href="#异步组件-suspense"><span>异步组件(Suspense)</span></a></h2><p>Vue3 引入了 Suspense 组件，用于处理异步组件的加载状态。</p><div class="language-typescript line-numbers-mode has-collapsed-lines collapsed" data-highlighter="shiki" data-ext="typescript" style="--vp-collapsed-lines:15;--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-typescript"><span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">defineAsyncComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;vue&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> AsyncComp</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineAsyncComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Promise</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">((</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">reject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ...load component from server</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* loaded component */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> AsyncPopup</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> defineAsyncComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./ArticleList.vue&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 加载异步组件时使用的组件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    loadingComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> LoadingComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 加载失败时使用的组件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    errorComponent</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ErrorComponent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 在显示加载组件之前延迟。默认值：200ms。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    delay</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 超过给定时间，则会显示错误组件。默认值：Infinity。</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    timeout</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Suspense</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;template #default&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;async-component/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/template&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;template #fallback&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    Loading ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/template&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Suspense</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传送门-teleport" tabindex="-1"><a class="header-anchor" href="#传送门-teleport"><span>传送门(teleport)</span></a></h2><p>它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;body&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="禁用-teleport" tabindex="-1"><a class="header-anchor" href="#禁用-teleport"><span>禁用 Teleport</span></a></h3><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">disabled</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">isMobile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="延迟解析的-teleport" tabindex="-1"><a class="header-anchor" href="#延迟解析的-teleport"><span>延迟解析的 Teleport</span></a></h3><p>在 Vue 3.5 及更高版本中，我们可以使用 defer prop 推迟 Teleport 的目标解析，直到应用的其他部分挂载。这允许 Teleport 将由 Vue 渲染且位于组件树之后部分的容器元素作为目标</p><div class="language-vue line-numbers-mode" data-highlighter="shiki" data-ext="vue" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-vue"><span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> defer</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> to</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;#late-div&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;...&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Teleport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 稍后出现于模板中的某处 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;late-div&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更小的核心代码" tabindex="-1"><a class="header-anchor" href="#更小的核心代码"><span>更小的核心代码</span></a></h2><ul><li>核心代码 + compositionApi：13.5kb ---- vue2为31.94kb</li><li>所有Runtime: 22.5kb ---- vue2 为32kb</li></ul><h2 id="更快的速度" tabindex="-1"><a class="header-anchor" href="#更快的速度"><span>更快的速度</span></a></h2><ul><li>SSR速度提高2-3 倍</li><li>初始渲染/更新速度最高提高一倍</li><li>内存占用减少一半</li></ul><h2 id="更好的typescript支持" tabindex="-1"><a class="header-anchor" href="#更好的typescript支持"><span>更好的TypeScript支持</span></a></h2>`,22)]))}const r=i(l,[["render",t]]),d=JSON.parse('{"path":"/learn/Vue3/1.html","title":"Vue3 相当于Vue2 的提升","lang":"zh-CN","frontmatter":{"icon":"akar-icons:file","date":"2024-03-01T00:00:00.000Z","order":1,"category":["Vue3"],"description":"Vue3 相当于Vue2 的提升 响应式原理(Proxy) Vue3 使用了 Proxy 来实现响应式系统，而 Vue2 使用的是 Object.defineProperty。Proxy[ES6] 提供了更强大的功能，可以直接监听对象的新增和删除属性，而不需要像 Vue2 那样使用 Vue.set 和 Vue.delete。 这使得 Vue3 的响应式...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue3 相当于Vue2 的提升\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-11T10:18:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr shen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/CrazyBlob/learn/Vue3/1.html"}],["meta",{"property":"og:site_name","content":"CrazyKaiSa"}],["meta",{"property":"og:title","content":"Vue3 相当于Vue2 的提升"}],["meta",{"property":"og:description","content":"Vue3 相当于Vue2 的提升 响应式原理(Proxy) Vue3 使用了 Proxy 来实现响应式系统，而 Vue2 使用的是 Object.defineProperty。Proxy[ES6] 提供了更强大的功能，可以直接监听对象的新增和删除属性，而不需要像 Vue2 那样使用 Vue.set 和 Vue.delete。 这使得 Vue3 的响应式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-11T10:18:44.000Z"}],["meta",{"property":"article:published_time","content":"2024-03-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-11T10:18:44.000Z"}]]},"git":{"createdTime":1754790811000,"updatedTime":1754907524000,"contributors":[{"name":"crazy","username":"crazy","email":"1574650522@qq.com","commits":1,"url":"https://github.com/crazy"},{"name":"Shenxinjie","username":"Shenxinjie","email":"1574650522@qq.com","commits":1,"url":"https://github.com/Shenxinjie"}]},"readingTime":{"minutes":1.7,"words":509},"filePathRelative":"learn/Vue3/1.md","excerpt":"\\n<h2>响应式原理(Proxy)</h2>\\n<p>Vue3 使用了 Proxy 来实现响应式系统，而 Vue2 使用的是 Object.defineProperty。Proxy[ES6] 提供了更强大的功能，可以直接监听对象的新增和删除属性，而不需要像 Vue2 那样使用 Vue.set 和 Vue.delete。<br>\\n这使得 Vue3 的响应式系统更加高效和灵活。</p>\\n<h2>碎片化(Fragments)</h2>\\n<p>Vue3 支持组件的多个根节点，这被称为“碎片化”（Fragments）。在 Vue2 中，每个组件只能有一个根节点，而 Vue3 允许组件返回多个根节点，这使得组件的结构更加灵活。</p>","autoDesc":true}');export{r as comp,d as data};
