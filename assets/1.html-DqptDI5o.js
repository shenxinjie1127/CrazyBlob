import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,e as l,o as a}from"./app-DkRYbnGQ.js";const s="/CrazyBlob/assets/images/source/git.png",o={};function n(c,i){return a(),e("div",null,i[0]||(i[0]=[l('<h1 id="git-基础" tabindex="-1"><a class="header-anchor" href="#git-基础"><span>Git 基础</span></a></h1><h2 id="文件状态" tabindex="-1"><a class="header-anchor" href="#文件状态"><span>文件状态</span></a></h2><ol><li><p>工作区</p><p>相当于本地写代码的区域，如git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本。</p></li><li><p>暂存区</p><p>暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中</p></li><li><p>本地仓库</p><p>提交更新，找到暂存区域文件，将快照永久性存储到Git本地仓库</p></li><li><p>远程仓库</p><p>远程仓库是一个Git服务器，保存了所有的版本信息，其他人可以通过克隆、拉取等方式获取到本地仓库的代码。</p></li></ol><figure><img src="'+s+`" alt="img.png" tabindex="0" loading="lazy"><figcaption>img.png</figcaption></figure><h2 id="git-基本命令" tabindex="-1"><a class="header-anchor" href="#git-基本命令"><span>Git 基本命令</span></a></h2><h3 id="用户信息配置" tabindex="-1"><a class="header-anchor" href="#用户信息配置"><span>用户信息配置</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.name</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;[name]&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> config</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --global</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> user.email</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;[email address]&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="项目初始化" tabindex="-1"><a class="header-anchor" href="#项目初始化"><span>项目初始化</span></a></h3><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-bash"><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [project-name]</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">git</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> colne</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [url]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常用操作" tabindex="-1"><a class="header-anchor" href="#常用操作"><span>常用操作</span></a></h3><ul><li>Git init 初始化仓库，默认为master分支</li><li>Git add . 提交全部文件修改到缓存区</li><li>Git add [具体某个文件路径+全名] 提交某些文件到缓存区</li><li>Git diff 查看当前代码add 后，会add 哪些内容</li><li>Git diff --staged 查看现在commit提交后，会提交哪些内容</li><li>Git status 查看当前分支状态</li><li>Git pull [远程仓库名] [远程分支名] 拉取远程仓库的分支与本地当前分支合并</li><li>Git pull [远程仓库名] [远程分支名]:[本地分支名] 拉取远程仓库的分支与本地某个分支合并</li><li>Git commit -m &quot;注释&quot; 提交代码到本地仓库，并写提交注释</li><li>Git commit -v 提交时显示所有diff 信息</li><li>Git commit --amend [file1] [file2] 重做了上一次commit ，并包括指定文件的新变化关于提交信息的格式，可以遵循以下的规则：</li></ul><p><strong>关于提交信息的格式，遵循以下的规则：</strong></p><ul><li>feat：新特性</li><li>fix： 修改bug</li><li>refactor： 代码重构</li><li>docs：文档修改</li><li>style：代码格式修改，注意不是css修改</li><li>test：测试用例修改</li><li>chore：其他修改，比如构建流程，依赖管理</li></ul><h3 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作"><span>分支操作</span></a></h3><ul><li><code>Git branch</code> 查看本地所有分支</li><li><code>Git branch -r</code> 查看远程所有分支</li><li><code>Git branch -a</code> 查看本地和远程所有分支</li><li><code>Git merge &lt;分支名&gt;</code> 合并分支</li><li><code>Git merge --abort </code>合并分支出现冲突，取消合并，一切回到合并前的状态。</li><li><code>Git branch &lt;新的分支&gt; </code>基于当前分支，新建一个分支</li><li><code>Git checkout --orphan &lt;新的分支&gt;</code> 新建一个空分支（会保留之前分支的所有文件）</li><li><code>Git branch -D &lt;分支名&gt;</code> 删除本地某个分支</li><li><code>Git push origin -delete</code> &lt;分支名&gt; 删除远程分支</li><li><code>Git branch &lt;新的分支&gt; &lt;提交的ID&gt;</code> 从提交历史回复删除的某个分支</li><li><code>Git branch -m &lt;原分支&gt; &lt;新分支&gt;</code> 分支更名</li><li><code>Git checkout &lt;分支名&gt;</code> 切换到本地某个分支</li><li><code>Git checkout &lt;远程库&gt;/&lt;分支名&gt;</code> 切换到线上某个分支</li><li><code>git checkout -b &lt;新分支名&gt;</code> 把基于当前分支新建分支，并切换为这个分支</li></ul><h3 id="远程仓库操作" tabindex="-1"><a class="header-anchor" href="#远程仓库操作"><span>远程仓库操作</span></a></h3><ul><li><code>Git fetch &lt;remote&gt;</code> 下载远程仓库的所有变动</li><li><code>Git remote -v </code>显示所有的远程仓库</li><li><code>Git pull &lt;remote&gt; &lt;branch&gt;</code> 拉取远程仓库的分支与本地当前分支合并</li><li><code>Git fetch</code> 获取线上最新版信息记录，不合并</li><li><code>Git push &lt;remote&gt; &lt;branch&gt;</code> 上传本地指定分支到远程仓库</li><li><code>Git push &lt;remote&gt; --force</code> 强行推送当前分支到远程仓库，即使有冲突</li><li><code>Git push &lt;remote&gt; --all</code> 推送所有分支到远程仓库</li></ul><h3 id="撤销操作" tabindex="-1"><a class="header-anchor" href="#撤销操作"><span>撤销操作</span></a></h3><ul><li><code>Git checkout &lt;file&gt;</code> 恢复暂存区的指定文件到工作区</li><li><code>Git checkout &lt;commit&gt; &lt;file&gt;</code> 恢复某个commit的指定文件到暂存区和工作区</li><li><code>Git checkout . </code>恢复暂存区的所有文件到工作区</li><li><code>Git reset [commit]</code> 重置当前分支的指针为指定commit 同时重置暂存区，但工作区不变。</li><li><code>Git reset --hard</code> 重置暂存区与工作区，与上一次commit 保持一致</li><li><code>Git reset &lt;file&gt;</code> 重置暂存区指定文件，与上一次commit 保持一致，但工作区保持不变</li><li><code>Git revert [commit]</code> 后者的所有变化都将被前者抵消，并且应用到当前分支</li></ul><h3 id="存储操作" tabindex="-1"><a class="header-anchor" href="#存储操作"><span>存储操作</span></a></h3><ul><li><code>Git stash</code> 暂时将未提交的变化移除</li><li><code>Git stash pop</code> 取出储藏中最后存入的工作状态进行恢复，会删除储藏。</li><li><code>Git stash list</code> 查看所有储藏中的工作</li><li><code>Git stash apply &lt;储藏的名称&gt;</code> 取出储藏中对应的工作状态进行恢复，不会删除储藏</li><li><code>Git stash clear</code> 清空所有储藏的工作</li><li><code>Git stash drop &lt;储藏的名称&gt;</code> 删除对应的某个储藏</li></ul>`,21)]))}const h=t(o,[["render",n]]),p=JSON.parse('{"path":"/learn/Git/1.html","title":"Git 基础","lang":"zh-CN","frontmatter":{"icon":"akar-icons:file","date":"2025-07-01T00:00:00.000Z","order":1,"category":["Git"],"description":"Git 基础 文件状态 工作区 相当于本地写代码的区域，如git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本。 暂存区 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中 本地仓库 提交更新，找到暂存区域文件，将快照永久性存储到Git本地仓库 远程仓库 远程仓库是一个Git服务器，保存了所有的版本信息，其他...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git 基础\\",\\"image\\":[\\"https://mister-hope.github.io/CrazyBlob/assets/images/source/git.png\\"],\\"datePublished\\":\\"2025-07-01T00:00:00.000Z\\",\\"dateModified\\":\\"2025-08-19T09:00:39.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr shen\\",\\"url\\":\\"https://mister-hope.com\\"}]}"],["meta",{"property":"og:url","content":"https://mister-hope.github.io/CrazyBlob/learn/Git/1.html"}],["meta",{"property":"og:site_name","content":"CrazyKaiSa"}],["meta",{"property":"og:title","content":"Git 基础"}],["meta",{"property":"og:description","content":"Git 基础 文件状态 工作区 相当于本地写代码的区域，如git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本。 暂存区 暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中 本地仓库 提交更新，找到暂存区域文件，将快照永久性存储到Git本地仓库 远程仓库 远程仓库是一个Git服务器，保存了所有的版本信息，其他..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://mister-hope.github.io/CrazyBlob/assets/images/source/git.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-19T09:00:39.000Z"}],["meta",{"property":"article:published_time","content":"2025-07-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-19T09:00:39.000Z"}]]},"git":{"createdTime":1755594039000,"updatedTime":1755594039000,"contributors":[{"name":"Shenxinjie","username":"Shenxinjie","email":"1574650522@qq.com","commits":1,"url":"https://github.com/Shenxinjie"}]},"readingTime":{"minutes":3.89,"words":1168},"filePathRelative":"learn/Git/1.md","excerpt":"\\n<h2>文件状态</h2>\\n<ol>\\n<li>\\n<p>工作区</p>\\n<p>相当于本地写代码的区域，如git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本。</p>\\n</li>\\n<li>\\n<p>暂存区</p>\\n<p>暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中</p>\\n</li>\\n<li>\\n<p>本地仓库</p>\\n<p>提交更新，找到暂存区域文件，将快照永久性存储到Git本地仓库</p>\\n</li>\\n<li>\\n<p>远程仓库</p>\\n<p>远程仓库是一个Git服务器，保存了所有的版本信息，其他人可以通过克隆、拉取等方式获取到本地仓库的代码。</p>\\n</li>\\n</ol>","autoDesc":true}');export{h as comp,p as data};
