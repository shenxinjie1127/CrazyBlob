/**
* @vue/shared v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**//*! #__NO_SIDE_EFFECTS__ */function xt(e){const t=Object.create(null);for(const n of e.split(","))t[n]=1;return n=>n in t}const Ot={},St=()=>{},ze=Object.assign,It=Object.prototype.hasOwnProperty,se=(e,t)=>It.call(e,t),z=Array.isArray,Y=e=>Ve(e)==="[object Map]",oe=e=>typeof e=="function",Ce=e=>typeof e=="string",L=e=>typeof e=="symbol",B=e=>e!==null&&typeof e=="object",Nt=Object.prototype.toString,Ve=e=>Nt.call(e),ke=e=>Ve(e).slice(8,-1),ie=e=>Ce(e)&&e!=="NaN"&&e[0]!=="-"&&""+parseInt(e,10)===e,Mt=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},Ln=Mt(e=>e.charAt(0).toUpperCase()+e.slice(1)),W=(e,t)=>!Object.is(e,t);let $e;const ce=()=>$e||($e=typeof globalThis<"u"?globalThis:typeof self<"u"?self:typeof window<"u"?window:typeof global<"u"?global:{});/**
* @vue/reactivity v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/function Rt(e,...t){console.warn(`[Vue warn] ${e}`,...t)}let Tt,je=0,ae;function ue(){je++}function le(){if(--je>0)return;let e;for(;ae;){let t=ae;for(ae=void 0;t;){const n=t.next;if(t.next=void 0,t.flags&=-9,t.flags&1)try{t.trigger()}catch(s){e||(e=s)}t=n}}if(e)throw e}let G=!0;const De=[];function fe(){De.push(G),G=!1}function de(){const e=De.pop();G=e===void 0?!0:e}class Fe{constructor(t){this.computed=t,this.version=0,this.activeLink=void 0,this.subs=void 0,this.map=void 0,this.key=void 0,this.sc=0,this.__v_skip=!0}track(t){}trigger(t){this.version++,this.notify(t)}notify(t){ue();try{for(let n=this.subs;n;n=n.prevSub)n.sub.notify()&&n.sub.dep.notify()}finally{le()}}}const he=new WeakMap,C=Symbol(""),pe=Symbol(""),H=Symbol("");function E(e,t,n){if(G&&Tt){let s=he.get(e);s||he.set(e,s=new Map);let r=s.get(n);r||(s.set(n,r=new Fe),r.map=s,r.key=n),r.track()}}function I(e,t,n,s,r,o){const i=he.get(e);if(!i)return;const c=a=>{a&&a.trigger()};if(ue(),t==="clear")i.forEach(c);else{const a=z(e),u=a&&ie(n);if(a&&n==="length"){const l=Number(s);i.forEach((f,d)=>{(d==="length"||d===H||!L(d)&&d>=l)&&c(f)})}else switch((n!==void 0||i.has(void 0))&&c(i.get(n)),u&&c(i.get(H)),t){case"add":a?u&&c(i.get("length")):(c(i.get(C)),Y(e)&&c(i.get(pe)));break;case"delete":a||(c(i.get(C)),Y(e)&&c(i.get(pe)));break;case"set":Y(e)&&c(i.get(C));break}}le()}function $(e){const t=p(e);return t===e?t:(E(t,"iterate",H),N(e)?t:t.map(v))}function ge(e){return E(e=p(e),"iterate",H),e}const zt={__proto__:null,[Symbol.iterator](){return _e(this,Symbol.iterator,v)},concat(...e){return $(this).concat(...e.map(t=>z(t)?$(t):t))},entries(){return _e(this,"entries",e=>(e[1]=v(e[1]),e))},every(e,t){return O(this,"every",e,t,void 0,arguments)},filter(e,t){return O(this,"filter",e,t,n=>n.map(v),arguments)},find(e,t){return O(this,"find",e,t,v,arguments)},findIndex(e,t){return O(this,"findIndex",e,t,void 0,arguments)},findLast(e,t){return O(this,"findLast",e,t,v,arguments)},findLastIndex(e,t){return O(this,"findLastIndex",e,t,void 0,arguments)},forEach(e,t){return O(this,"forEach",e,t,void 0,arguments)},includes(...e){return me(this,"includes",e)},indexOf(...e){return me(this,"indexOf",e)},join(e){return $(this).join(e)},lastIndexOf(...e){return me(this,"lastIndexOf",e)},map(e,t){return O(this,"map",e,t,void 0,arguments)},pop(){return K(this,"pop")},push(...e){return K(this,"push",e)},reduce(e,...t){return Pe(this,"reduce",e,t)},reduceRight(e,...t){return Pe(this,"reduceRight",e,t)},shift(){return K(this,"shift")},some(e,t){return O(this,"some",e,t,void 0,arguments)},splice(...e){return K(this,"splice",e)},toReversed(){return $(this).toReversed()},toSorted(e){return $(this).toSorted(e)},toSpliced(...e){return $(this).toSpliced(...e)},unshift(...e){return K(this,"unshift",e)},values(){return _e(this,"values",v)}};function _e(e,t,n){const s=ge(e),r=s[t]();return s!==e&&!N(e)&&(r._next=r.next,r.next=()=>{const o=r._next();return o.value&&(o.value=n(o.value)),o}),r}const Ct=Array.prototype;function O(e,t,n,s,r,o){const i=ge(e),c=i!==e&&!N(e),a=i[t];if(a!==Ct[t]){const f=a.apply(e,o);return c?v(f):f}let u=n;i!==e&&(c?u=function(f,d){return n.call(this,v(f),d,e)}:n.length>2&&(u=function(f,d){return n.call(this,f,d,e)}));const l=a.call(i,u,s);return c&&r?r(l):l}function Pe(e,t,n,s){const r=ge(e);let o=n;return r!==e&&(N(e)?n.length>3&&(o=function(i,c,a){return n.call(this,i,c,a,e)}):o=function(i,c,a){return n.call(this,i,v(c),a,e)}),r[t](o,...s)}function me(e,t,n){const s=p(e);E(s,"iterate",H);const r=s[t](...n);return(r===-1||r===!1)&&Jt(n[0])?(n[0]=p(n[0]),s[t](...n)):r}function K(e,t,n=[]){fe(),ue();const s=p(e)[t].apply(e,n);return le(),de(),s}const Vt=xt("__proto__,__v_isRef,__isVue"),Ae=new Set(Object.getOwnPropertyNames(Symbol).filter(e=>e!=="arguments"&&e!=="caller").map(e=>Symbol[e]).filter(L));function kt(e){L(e)||(e=String(e));const t=p(this);return E(t,"has",e),t.hasOwnProperty(e)}class Le{constructor(t=!1,n=!1){this._isReadonly=t,this._isShallow=n}get(t,n,s){if(n==="__v_skip")return t.__v_skip;const r=this._isReadonly,o=this._isShallow;if(n==="__v_isReactive")return!r;if(n==="__v_isReadonly")return r;if(n==="__v_isShallow")return o;if(n==="__v_raw")return s===(r?o?Kt:Ke:o?Ht:He).get(t)||Object.getPrototypeOf(t)===Object.getPrototypeOf(s)?t:void 0;const i=z(t);if(!r){let a;if(i&&(a=zt[n]))return a;if(n==="hasOwnProperty")return kt}const c=Reflect.get(t,n,V(t)?t:s);return(L(n)?Ae.has(n):Vt(n))||(r||E(t,"get",n),o)?c:V(c)?i&&ie(n)?c:c.value:B(c)?r?Ue(c):qe(c):c}}class $t extends Le{constructor(t=!1){super(!1,t)}set(t,n,s,r){let o=t[n];if(!this._isShallow){const a=j(o);if(!N(s)&&!j(s)&&(o=p(o),s=p(s)),!z(t)&&V(o)&&!V(s))return a?!1:(o.value=s,!0)}const i=z(t)&&ie(n)?Number(n)<t.length:se(t,n),c=Reflect.set(t,n,s,V(t)?t:r);return t===p(r)&&(i?W(s,o)&&I(t,"set",n,s,o):I(t,"add",n,s)),c}deleteProperty(t,n){const s=se(t,n),r=t[n],o=Reflect.deleteProperty(t,n);return o&&s&&I(t,"delete",n,void 0,r),o}has(t,n){const s=Reflect.has(t,n);return(!L(n)||!Ae.has(n))&&E(t,"has",n),s}ownKeys(t){return E(t,"iterate",z(t)?"length":C),Reflect.ownKeys(t)}}class jt extends Le{constructor(t=!1){super(!0,t)}set(t,n){return!0}deleteProperty(t,n){return!0}}const Dt=new $t,Ft=new jt,ye=e=>e,Q=e=>Reflect.getPrototypeOf(e);function Pt(e,t,n){return function(...s){const r=this.__v_raw,o=p(r),i=Y(o),c=e==="entries"||e===Symbol.iterator&&i,a=e==="keys"&&i,u=r[e](...s),l=n?ye:t?we:v;return!t&&E(o,"iterate",a?pe:C),{next(){const{value:f,done:d}=u.next();return d?{value:f,done:d}:{value:c?[l(f[0]),l(f[1])]:l(f),done:d}},[Symbol.iterator](){return this}}}}function X(e){return function(...t){return e==="delete"?!1:e==="clear"?void 0:this}}function At(e,t){const n={get(r){const o=this.__v_raw,i=p(o),c=p(r);e||(W(r,c)&&E(i,"get",r),E(i,"get",c));const{has:a}=Q(i),u=t?ye:e?we:v;if(a.call(i,r))return u(o.get(r));if(a.call(i,c))return u(o.get(c));o!==i&&o.get(r)},get size(){const r=this.__v_raw;return!e&&E(p(r),"iterate",C),Reflect.get(r,"size",r)},has(r){const o=this.__v_raw,i=p(o),c=p(r);return e||(W(r,c)&&E(i,"has",r),E(i,"has",c)),r===c?o.has(r):o.has(r)||o.has(c)},forEach(r,o){const i=this,c=i.__v_raw,a=p(c),u=t?ye:e?we:v;return!e&&E(a,"iterate",C),c.forEach((l,f)=>r.call(o,u(l),u(f),i))}};return ze(n,e?{add:X("add"),set:X("set"),delete:X("delete"),clear:X("clear")}:{add(r){!t&&!N(r)&&!j(r)&&(r=p(r));const o=p(this);return Q(o).has.call(o,r)||(o.add(r),I(o,"add",r,r)),this},set(r,o){!t&&!N(o)&&!j(o)&&(o=p(o));const i=p(this),{has:c,get:a}=Q(i);let u=c.call(i,r);u||(r=p(r),u=c.call(i,r));const l=a.call(i,r);return i.set(r,o),u?W(o,l)&&I(i,"set",r,o,l):I(i,"add",r,o),this},delete(r){const o=p(this),{has:i,get:c}=Q(o);let a=i.call(o,r);a||(r=p(r),a=i.call(o,r));const u=c?c.call(o,r):void 0,l=o.delete(r);return a&&I(o,"delete",r,void 0,u),l},clear(){const r=p(this),o=r.size!==0,i=void 0,c=r.clear();return o&&I(r,"clear",void 0,void 0,i),c}}),["keys","values","entries",Symbol.iterator].forEach(r=>{n[r]=Pt(r,e,t)}),n}function We(e,t){const n=At(e,t);return(s,r,o)=>r==="__v_isReactive"?!e:r==="__v_isReadonly"?e:r==="__v_raw"?s:Reflect.get(se(n,r)&&r in s?n:s,r,o)}const Lt={get:We(!1,!1)},Wt={get:We(!0,!1)};function Wn(e,t,n){const s=p(n);if(s!==n&&t.call(e,s)){const r=ke(e);Rt(`Reactive ${r} contains both the raw and reactive versions of the same object${r==="Map"?" as keys":""}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`)}}const He=new WeakMap,Ht=new WeakMap,Ke=new WeakMap,Kt=new WeakMap;function qt(e){switch(e){case"Object":case"Array":return 1;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2;default:return 0}}function Ut(e){return e.__v_skip||!Object.isExtensible(e)?0:qt(ke(e))}function qe(e){return j(e)?e:Je(e,!1,Dt,Lt,He)}function Ue(e){return Je(e,!0,Ft,Wt,Ke)}function Je(e,t,n,s,r){if(!B(e)||e.__v_raw&&!(t&&e.__v_isReactive))return e;const o=Ut(e);if(o===0)return e;const i=r.get(e);if(i)return i;const c=new Proxy(e,o===2?s:n);return r.set(e,c),c}function j(e){return!!(e&&e.__v_isReadonly)}function N(e){return!!(e&&e.__v_isShallow)}function Jt(e){return e?!!e.__v_raw:!1}function p(e){const t=e&&e.__v_raw;return t?p(t):e}const v=e=>B(e)?qe(e):e,we=e=>B(e)?Ue(e):e;function V(e){return e?e.__v_isRef===!0:!1}function Yt(e){return Bt(e,!1)}function Bt(e,t){return V(e)?e:new Gt(e,t)}class Gt{constructor(t,n){this.dep=new Fe,this.__v_isRef=!0,this.__v_isShallow=!1,this._rawValue=n?t:p(t),this._value=n?t:v(t),this.__v_isShallow=n}get value(){return this.dep.track(),this._value}set value(t){const n=this._rawValue,s=this.__v_isShallow||N(t)||j(t);t=s?t:p(t),W(t,n)&&(this._rawValue=t,this._value=s?t:v(t),this.dep.trigger())}}/**
* @vue/runtime-core v3.5.17
* (c) 2018-present Yuxi (Evan) You and Vue contributors
* @license MIT
**/const k=[];function Hn(e){k.push(e)}function Kn(){k.pop()}let be=!1;function qn(e,...t){if(be)return;be=!0,fe();const n=k.length?k[k.length-1].component:null,s=n&&n.appContext.config.warnHandler,r=Qt();if(s)ve(s,n,11,[e+t.map(o=>{var i,c;return(c=(i=o.toString)==null?void 0:i.call(o))!=null?c:JSON.stringify(o)}).join(""),n&&n.proxy,r.map(({vnode:o})=>`at <${et(n,o.type)}>`).join(`
`),r]);else{const o=[`[Vue warn]: ${e}`,...t];r.length&&o.push(`
`,...Xt(r)),console.warn(...o)}de(),be=!1}function Qt(){let e=k[k.length-1];if(!e)return[];const t=[];for(;e;){const n=t[0];n&&n.vnode===e?n.recurseCount++:t.push({vnode:e,recurseCount:0});const s=e.component&&e.component.parent;e=s&&s.vnode}return t}function Xt(e){const t=[];return e.forEach((n,s)=>{t.push(...s===0?[]:[`
`],...Zt(n))}),t}function Zt({vnode:e,recurseCount:t}){const n=t>0?`... (${t} recursive calls)`:"",s=e.component?e.component.parent==null:!1,r=` at <${et(e.component,e.type,s)}`,o=">"+n;return e.props?[r,...en(e.props),o]:[r+o]}function en(e){const t=[],n=Object.keys(e);return n.slice(0,3).forEach(s=>{t.push(...Ye(s,e[s]))}),n.length>3&&t.push(" ..."),t}function Ye(e,t,n){return Ce(t)?(t=JSON.stringify(t),n?t:[`${e}=${t}`]):typeof t=="number"||typeof t=="boolean"||t==null?n?t:[`${e}=${t}`]:V(t)?(t=Ye(e,p(t.value),!0),n?t:[`${e}=Ref<`,t,">"]):oe(t)?[`${e}=fn${t.name?`<${t.name}>`:""}`]:(t=p(t),n?t:[`${e}=`,t])}const Un={sp:"serverPrefetch hook",bc:"beforeCreate hook",c:"created hook",bm:"beforeMount hook",m:"mounted hook",bu:"beforeUpdate hook",u:"updated",bum:"beforeUnmount hook",um:"unmounted hook",a:"activated hook",da:"deactivated hook",ec:"errorCaptured hook",rtc:"renderTracked hook",rtg:"renderTriggered hook",0:"setup function",1:"render function",2:"watcher getter",3:"watcher callback",4:"watcher cleanup function",5:"native event handler",6:"component event handler",7:"vnode hook",8:"directive hook",9:"transition hook",10:"app errorHandler",11:"app warnHandler",12:"ref function",13:"async component loader",14:"scheduler flush",15:"component update",16:"app unmount cleanup function"};function ve(e,t,n,s){try{return s?e(...s):e()}catch(r){Be(r,t,n)}}function Be(e,t,n,s=!0){const r=t?t.vnode:null,{errorHandler:o,throwUnhandledErrorInProduction:i}=t&&t.appContext.config||Ot;if(t){let c=t.parent;const a=t.proxy,u=`https://vuejs.org/error-reference/#runtime-${n}`;for(;c;){const l=c.ec;if(l){for(let f=0;f<l.length;f++)if(l[f](e,a,u)===!1)return}c=c.parent}if(o){fe(),ve(o,null,10,[e,a,u]),de();return}}tn(e,n,r,s,i)}function tn(e,t,n,s=!0,r=!1){if(r)throw e;console.error(e)}const x=[];let S=-1;const D=[];let M=null,F=0;const nn=Promise.resolve();let Ee=null;const rn=100;function sn(e){let t=S+1,n=x.length;for(;t<n;){const s=t+n>>>1,r=x[s],o=q(r);o<e||o===e&&r.flags&2?t=s+1:n=s}return t}function on(e){if(!(e.flags&1)){const t=q(e),n=x[x.length-1];!n||!(e.flags&2)&&t>=q(n)?x.push(e):x.splice(sn(t),0,e),e.flags|=1,Ge()}}function Ge(){Ee||(Ee=nn.then(Qe))}function cn(e){z(e)?D.push(...e):M&&e.id===-1?M.splice(F+1,0,e):e.flags&1||(D.push(e),e.flags|=1),Ge()}function an(e){if(D.length){const t=[...new Set(D)].sort((n,s)=>q(n)-q(s));if(D.length=0,M){M.push(...t);return}for(M=t,F=0;F<M.length;F++){const n=M[F];n.flags&4&&(n.flags&=-2),n.flags&8||n(),n.flags&=-2}M=null,F=0}}const q=e=>e.id==null?e.flags&2?-1:1/0:e.id;function Qe(e){const t=St;try{for(S=0;S<x.length;S++){const n=x[S];n&&!(n.flags&8)&&(n.flags&4&&(n.flags&=-2),ve(n,n.i,n.i?15:14),n.flags&4||(n.flags&=-2))}}finally{for(;S<x.length;S++){const n=x[S];n&&(n.flags&=-2)}S=-1,x.length=0,an(e),Ee=null,(x.length||D.length)&&Qe(e)}}function Jn(e,t){const n=e.get(t)||0;if(n>rn){const s=t.i,r=s&&Ze(s.type);return Be(`Maximum recursive updates exceeded${r?` in component <${r}>`:""}. This means you have a reactive effect that is mutating its own dependencies and thus recursively triggering itself. Possible sources include component template, render function, updated hook or watcher source function.`,null,10),!0}return e.set(t,n+1),!1}const xe=new Map,Z=new Map;function Yn(e,t){return Z.has(e)?!1:(Z.set(e,{initialDef:ee(t),instances:new Set}),!0)}function ee(e){return fn(e)?e.__vccOpts:e}function Bn(e,t){const n=Z.get(e);n&&(n.initialDef.render=t,[...n.instances].forEach(s=>{t&&(s.render=t,ee(s.type).render=t),s.renderCache=[],s.update()}))}function Gn(e,t){const n=Z.get(e);if(!n)return;t=ee(t),Xe(n.initialDef,t);const s=[...n.instances];for(let r=0;r<s.length;r++){const o=s[r],i=ee(o.type);let c=xe.get(i);c||(i!==n.initialDef&&Xe(i,t),xe.set(i,c=new Set)),c.add(o),o.appContext.propsCache.delete(o.type),o.appContext.emitsCache.delete(o.type),o.appContext.optionsCache.delete(o.type),o.ceReload?(c.add(o),o.ceReload(t.styles),c.delete(o)):o.parent?on(()=>{o.parent.update(),c.delete(o)}):o.appContext.reload?o.appContext.reload():typeof window<"u"?window.location.reload():console.warn("[HMR] Root or manually mounted instance modified. Full reload required."),o.root.ce&&o!==o.root&&o.root.ce._removeChildStyle(i)}cn(()=>{xe.clear()})}function Xe(e,t){ze(e,t);for(const n in e)n!=="__file"&&!(n in t)&&delete e[n]}function Qn(e){return(t,n)=>{try{return e(t,n)}catch(s){console.error(s),console.warn("[HMR] Something went wrong during Vue component hot-reload. Full reload required.")}}}ce().requestIdleCallback,ce().cancelIdleCallback;const Xn={};{const e=ce(),t=(n,s)=>{let r;return(r=e[n])||(r=e[n]=[]),r.push(s),o=>{r.length>1?r.forEach(i=>i(o)):r[0](o)}};t("__VUE_INSTANCE_SETTERS__",n=>n),t("__VUE_SSR_SETTERS__",n=>n)}const un=/(?:^|[-_])(\w)/g,ln=e=>e.replace(un,t=>t.toUpperCase()).replace(/[-_]/g,"");function Ze(e,t=!0){return oe(e)?e.displayName||e.name:e.name||t&&e.__name}function et(e,t,n=!1){let s=Ze(t);if(!s&&t.__file){const r=t.__file.match(/([^/\\]+)\.\w+$/);r&&(s=r[1])}if(!s&&e&&e.parent){const r=o=>{for(const i in o)if(o[i]===t)return i};s=r(e.components||e.parent.type.components)||r(e.appContext.components)}return s?ln(s):n?"App":"Anonymous"}function fn(e){return oe(e)&&"__vccOpts"in e}const tt=()=>document.documentElement.getAttribute("data-theme")==="dark";[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:dn}=Object,{fromEntries:hn}=Object,nt=Yt(!1);typeof document<"u"&&(nt.value=tt(),new MutationObserver(()=>{nt.value=tt()}).observe(document.documentElement,{attributeFilter:["data-theme"],attributes:!0}));const pn="ENTRIES",rt="KEYS",st="VALUES",w="";class Oe{set;_type;_path;constructor(t,n){const s=t._tree,r=Array.from(s.keys());this.set=t,this._type=n,this._path=r.length>0?[{node:s,keys:r}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:n}=P(this._path);if(P(n)===w)return{done:!1,value:this.result()};const s=t.get(P(n));return this._path.push({node:s,keys:Array.from(s.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=P(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>P(t)).filter(t=>t!==w).join("")}value(){return P(this._path).node.get(w)}result(){switch(this._type){case st:return this.value();case rt:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const P=e=>e[e.length-1],gn=(e,t,n)=>{const s=new Map;if(typeof t!="string")return s;const r=t.length+1,o=r+n,i=new Uint8Array(o*r).fill(n+1);for(let c=0;c<r;++c)i[c]=c;for(let c=1;c<o;++c)i[c*r]=c;return ot(e,t,n,s,i,1,r,""),s},ot=(e,t,n,s,r,o,i,c)=>{const a=o*i;e:for(const u of e.keys())if(u===w){const l=r[a-1];l<=n&&s.set(c,[e.get(u),l])}else{let l=o;for(let f=0;f<u.length;++f,++l){const d=u[f],m=i*l,b=m-i;let g=r[m];const h=Math.max(0,l-n-1),_=Math.min(i-1,l+n);for(let y=h;y<_;++y){const R=d!==t[y],re=r[b+y]+ +R,J=r[b+y+1]+1,T=r[m+y]+1,A=r[m+y+1]=Math.min(re,J,T);A<g&&(g=A)}if(g>n)continue e}ot(e.get(u),t,n,s,r,l,i,c+u)}};let it=class U{_tree;_prefix;_size=void 0;constructor(t=new Map,n=""){this._tree=t,this._prefix=n}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[n,s]=te(this._tree,t.slice(this._prefix.length));if(n===void 0){const[r,o]=Ne(s);for(const i of r.keys())if(i!==w&&i.startsWith(o)){const c=new Map;return c.set(i.slice(o.length),r.get(i)),new U(c,t)}}return new U(n,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,_n(this._tree,t)}entries(){return new Oe(this,pn)}forEach(t){for(const[n,s]of this)t(n,s,this)}fuzzyGet(t,n){return gn(this._tree,t,n)}get(t){const n=Se(this._tree,t);return n!==void 0?n.get(w):void 0}has(t){return Se(this._tree,t)?.has(w)??!1}keys(){return new Oe(this,rt)}set(t,n){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,Ie(this._tree,t).set(w,n),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=Ie(this._tree,t);return s.set(w,n(s.get(w))),this}fetch(t,n){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const s=Ie(this._tree,t);let r=s.get(w);return r===void 0&&s.set(w,r=n()),r}values(){return new Oe(this,st)}[Symbol.iterator](){return this.entries()}static from(t){const n=new U;for(const[s,r]of t)n.set(s,r);return n}static fromObject(t){return U.from(Object.entries(t))}};const te=(e,t,n=[])=>{if(t.length===0||e==null)return[e,n];for(const s of e.keys())if(s!==w&&t.startsWith(s))return n.push([e,s]),te(e.get(s),t.slice(s.length),n);return n.push([e,t]),te(void 0,"",n)},Se=(e,t)=>{if(t.length===0||!e)return e;for(const n of e.keys())if(n!==w&&t.startsWith(n))return Se(e.get(n),t.slice(n.length))},Ie=(e,t)=>{const n=t.length;e:for(let s=0;e&&s<n;){for(const o of e.keys())if(o!==w&&t[s]===o[0]){const i=Math.min(n-s,o.length);let c=1;for(;c<i&&t[s+c]===o[c];)++c;const a=e.get(o);if(c===o.length)e=a;else{const u=new Map;u.set(o.slice(c),a),e.set(t.slice(s,s+c),u),e.delete(o),e=u}s+=c;continue e}const r=new Map;return e.set(t.slice(s),r),r}return e},_n=(e,t)=>{const[n,s]=te(e,t);if(n!==void 0){if(n.delete(w),n.size===0)ct(s);else if(n.size===1){const[r,o]=n.entries().next().value;at(s,r,o)}}},ct=e=>{if(e.length===0)return;const[t,n]=Ne(e);if(t.delete(n),t.size===0)ct(e.slice(0,-1));else if(t.size===1){const[s,r]=t.entries().next().value;s!==w&&at(e.slice(0,-1),s,r)}},at=(e,t,n)=>{if(e.length===0)return;const[s,r]=Ne(e);s.set(r+t,n),s.delete(r)},Ne=e=>e[e.length-1],mn=(e,t)=>{const n=e._idToShortId.get(t);if(n!=null)return e._storedFields.get(n)},yn=/[\n\r\p{Z}\p{P}]+/u,Me="or",ut="and",wn="and_not",bn=(e,t)=>{e.includes(t)||e.push(t)},lt=(e,t)=>{for(const n of t)e.includes(n)||e.push(n)},ft=({score:e},{score:t})=>t-e,vn=()=>new Map,ne=e=>{const t=new Map;for(const n of Object.keys(e))t.set(parseInt(n,10),e[n]);return t},dt=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,ht={[Me]:(e,t)=>{for(const n of t.keys()){const s=e.get(n);if(s==null)e.set(n,t.get(n));else{const{score:r,terms:o,match:i}=t.get(n);s.score=s.score+r,s.match=Object.assign(s.match,i),lt(s.terms,o)}}return e},[ut]:(e,t)=>{const n=new Map;for(const s of t.keys()){const r=e.get(s);if(r==null)continue;const{score:o,terms:i,match:c}=t.get(s);lt(r.terms,i),n.set(s,{score:r.score+o,terms:r.terms,match:Object.assign(r.match,c)})}return n},[wn]:(e,t)=>{for(const n of t.keys())e.delete(n);return e}},En=(e,t,n,s,r,o)=>{const{k:i,b:c,d:a}=o;return Math.log(1+(n-t+.5)/(t+.5))*(a+e*(i+1)/(e+i*(1-c+c*s/r)))},xn=e=>(t,n,s)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,n,s):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,n,s):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,n,s):1}),pt=(e,t,n,s)=>{for(const r of Object.keys(e._fieldIds))if(e._fieldIds[r]===n){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${s}" was not present in field "${r}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},On=(e,t,n,s)=>{if(!e._index.has(s)){pt(e,n,t,s);return}const r=e._index.fetch(s,vn),o=r.get(t),i=o?.get(n);!o||typeof i>"u"?pt(e,n,t,s):i<=1?o.size<=1?r.delete(t):o.delete(n):o.set(n,i-1),e._index.get(s).size===0&&e._index.delete(s)},Sn={k:1.2,b:.7,d:.5},In={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(yn),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},gt={combineWith:Me,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:Sn},Nn={combineWith:ut,prefix:(e,t,n)=>t===n.length-1},Mn={batchSize:1e3,batchWait:10},_t={minDirtFactor:.1,minDirtCount:20},Rn={...Mn,..._t},mt=Symbol("*"),Tn=(e,t)=>{const n=new Map,s={...e._options.searchOptions,...t};for(const[r,o]of e._documentIds){const i=s.boostDocument?s.boostDocument(o,"",e._storedFields.get(r)):1;n.set(r,{score:i,terms:[],match:{}})}return n},yt=(e,t=Me)=>{if(e.length===0)return new Map;const n=t.toLowerCase();if(!(n in ht))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(ht[n])},Re=(e,t,n,s,r,o,i,c,a,u=new Map)=>{if(o==null)return u;for(const l of Object.keys(i)){const f=i[l],d=e._fieldIds[l],m=o.get(d);if(m==null)continue;let b=m.size;const g=e._avgFieldLength[d];for(const h of m.keys()){if(!e._documentIds.has(h)){On(e,d,h,n),b-=1;continue}const _=c?c(e._documentIds.get(h),n,e._storedFields.get(h)):1;if(!_)continue;const y=m.get(h),R=e._fieldLength.get(h)[d],re=En(y,b,e._documentCount,R,g,a),J=s*r*f*_*re,T=u.get(h);if(T){T.score+=J,bn(T.terms,t);const A=dt(T.match,n);A?A.push(l):T.match[n]=[l]}else u.set(h,{score:J,terms:[t],match:{[n]:[l]}})}}return u},zn=(e,t,n)=>{const s={...e._options.searchOptions,...n},r=(s.fields??e._options.fields).reduce((g,h)=>({...g,[h]:dt(s.boost,h)||1}),{}),{boostDocument:o,weights:i,maxFuzzy:c,bm25:a}=s,{fuzzy:u,prefix:l}={...gt.weights,...i},f=e._index.get(t.term),d=Re(e,t.term,t.term,1,t.termBoost,f,r,o,a);let m,b;if(t.prefix&&(m=e._index.atPrefix(t.term)),t.fuzzy){const g=t.fuzzy===!0?.2:t.fuzzy,h=g<1?Math.min(c,Math.round(t.term.length*g)):g;h&&(b=e._index.fuzzyGet(t.term,h))}if(m)for(const[g,h]of m){const _=g.length-t.term.length;if(!_)continue;b?.delete(g);const y=l*g.length/(g.length+.3*_);Re(e,t.term,g,y,t.termBoost,h,r,o,a,d)}if(b)for(const g of b.keys()){const[h,_]=b.get(g);if(!_)continue;const y=u*g.length/(g.length+_);Re(e,t.term,g,y,t.termBoost,h,r,o,a,d)}return d},wt=(e,t,n={})=>{if(t===mt)return Tn(e,n);if(typeof t!="string"){const l={...n,...t,queries:void 0},f=t.queries.map(d=>wt(e,d,l));return yt(f,l.combineWith)}const{tokenize:s,processTerm:r,searchOptions:o}=e._options,i={tokenize:s,processTerm:r,...o,...n},{tokenize:c,processTerm:a}=i,u=c(t).flatMap(l=>a(l)).filter(l=>!!l).map(xn(i)).map(l=>zn(e,l,i));return yt(u,i.combineWith)},bt=(e,t,n={})=>{const{searchOptions:s}=e._options,r={...s,...n},o=wt(e,t,n),i=[];for(const[c,{score:a,terms:u,match:l}]of o){const f=u.length||1,d={id:e._documentIds.get(c),score:a*f,terms:Object.keys(l),queryTerms:u,match:l};Object.assign(d,e._storedFields.get(c)),(r.filter==null||r.filter(d))&&i.push(d)}return t===mt&&r.boostDocument==null||i.sort(ft),i},Cn=(e,t,n={})=>{n={...e._options.autoSuggestOptions,...n};const s=new Map;for(const{score:o,terms:i}of bt(e,t,n)){const c=i.join(" "),a=s.get(c);a!=null?(a.score+=o,a.count+=1):s.set(c,{score:o,terms:i,count:1})}const r=[];for(const[o,{score:i,terms:c,count:a}]of s)r.push({suggestion:o,terms:c,score:i/a});return r.sort(ft),r};class Vn{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const n=t.autoVacuum==null||t.autoVacuum===!0?Rn:t.autoVacuum;this._options={...In,...t,autoVacuum:n,searchOptions:{...gt,...t.searchOptions},autoSuggestOptions:{...Nn,...t.autoSuggestOptions}},this._index=new it,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=_t,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[n,s]of this._index){const r={};for(const[o,i]of s)r[o]=Object.fromEntries(i);t.push([n,r])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let n=0;n<t.length;n++)this._fieldIds[t[n]]=n}}const kn=e=>new Vn(e),$n=({documentCount:e,nextId:t,fieldIds:n,averageFieldLength:s,dirtCount:r,version:o},i)=>{if(o!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=kn(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=n,c._avgFieldLength=s,c._dirtCount=r??0,c._index=new it,c},jn=(e,t)=>{const{index:n,documentIds:s,fieldLength:r,storedFields:o}=e,i=$n(e,t);i._documentIds=ne(s),i._fieldLength=ne(r),i._storedFields=ne(o);for(const[c,a]of i._documentIds)i._idToShortId.set(a,c);for(const[c,a]of n){const u=new Map;for(const l of Object.keys(a))u.set(parseInt(l,10),ne(a[l]));i._index.set(c,u)}return i},Te=(e,t)=>{const n=e.toLowerCase(),s=t.toLowerCase(),r=[];let o=0,i=0;const c=(u,l=!1)=>{let f;i===0?f=u.length>20?`… ${u.slice(-20)}`:u:l?f=u.length+i>100?`${u.slice(0,100-i)}… `:u:f=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,f&&r.push(f),i+=f.length,l||(r.push(["mark",t]),i+=t.length,i>=100&&r.push(" …"))};let a=n.indexOf(s,o);if(a===-1)return null;for(;a>=0;){const u=a+s.length;if(c(e.slice(o,a)),o=u,i>100)break;a=n.indexOf(s,o)}return i<100&&c(e.slice(o),!0),r},{entries:Dn}=Object,Fn=(e,t)=>t.contents.reduce((n,[,s])=>n+s,0)-e.contents.reduce((n,[,s])=>n+s,0),Pn=(e,t)=>Math.max(...t.contents.map(([,n])=>n))-Math.max(...e.contents.map(([,n])=>n)),vt=(e,t,n={},s="max")=>{const r={};return bt(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...n}).forEach(o=>{const{id:i,terms:c,score:a}=o,u=i.includes("@"),l=i.includes("#"),[f,d]=i.split(/[#@]/),m=Number(f),b=c.sort((h,_)=>h.length-_.length).filter((h,_)=>c.slice(_+1).every(y=>!y.includes(h))),{contents:g}=r[m]??={title:"",contents:[]};if(u)g.push([{type:"customField",id:m,index:d,display:b.map(h=>o.c.map(_=>Te(_,h))).flat().filter(h=>h!==null)},a]);else{const h=b.map(_=>Te(o.h,_)).filter(_=>_!==null);if(h.length&&g.push([{type:l?"heading":"title",id:m,...l&&{anchor:d},display:h},a]),"t"in o&&o.t)for(const _ of o.t){const y=b.map(R=>Te(_,R)).filter(R=>R!==null);y.length&&g.push([{type:"text",id:m,...l&&{anchor:d},display:y},a])}}}),Dn(r).sort(([,o],[,i])=>(s?Fn:Pn)(o,i)).map(([o,{title:i,contents:c}])=>{if(!i){const a=mn(t,o);a&&(i=a.h)}return{title:i,contents:c.map(([a])=>a)}})},Et=(e,t,n={})=>{const s=Cn(t,e,{fuzzy:.2,maxFuzzy:3,...n}).map(({suggestion:r})=>r);return e.includes(" ")?s:s.filter(r=>!r.includes(" "))},An=hn(dn(JSON.parse("{\"/\":{\"documentCount\":349,\"nextId\":349,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"3@1\",\"6\":\"4\",\"7\":\"4@0\",\"8\":\"4@1\",\"9\":\"5\",\"10\":\"5#markdown-介绍\",\"11\":\"5#markdown-配置\",\"12\":\"5#markdown-扩展\",\"13\":\"5#vuepress-扩展\",\"14\":\"5#主题扩展\",\"15\":\"5#选项卡\",\"16\":\"5#脚注\",\"17\":\"5#导入文件\",\"18\":\"5#tex-语法\",\"19\":\"5#任务列表\",\"20\":\"5#图片增强\",\"21\":\"5#上下角标\",\"22\":\"5#组件\",\"23\":\"5@0\",\"24\":\"5@1\",\"25\":\"6\",\"26\":\"6#页面标题\",\"27\":\"6#页面信息\",\"28\":\"6#页面内容\",\"29\":\"6#组件\",\"30\":\"6@0\",\"31\":\"6@1\",\"32\":\"7\",\"33\":\"7@0\",\"34\":\"8\",\"35\":\"8#indexeddb\",\"36\":\"8#使用\",\"37\":\"8#手写防抖和节流\",\"38\":\"8@0\",\"39\":\"9\",\"40\":\"9#创建型\",\"41\":\"9#单例模式\",\"42\":\"9#工厂方法模式\",\"43\":\"9#抽象工厂模式\",\"44\":\"9#优点\",\"45\":\"9#使用场景\",\"46\":\"9#建造者模式\",\"47\":\"9#优点-1\",\"48\":\"9#使用场景-1\",\"49\":\"9#原型模式\",\"50\":\"9#优点-2\",\"51\":\"9#使用场景-2\",\"52\":\"9#结构型\",\"53\":\"9#适配器模式\",\"54\":\"9#优点-3\",\"55\":\"9#使用场景-3\",\"56\":\"9#装饰器模式\",\"57\":\"9#优点-4\",\"58\":\"9#使用场景-4\",\"59\":\"9#代理模式\",\"60\":\"9#优点-5\",\"61\":\"9#使用场景-5\",\"62\":\"9#桥接模式\",\"63\":\"9#优点-6\",\"64\":\"9#使用场景-6\",\"65\":\"9#组合模式\",\"66\":\"9#优点-7\",\"67\":\"9#使用场景-7\",\"68\":\"9#外观模式\",\"69\":\"9#优点-8\",\"70\":\"9#使用场景-8\",\"71\":\"9#享元模式\",\"72\":\"9#优点-9\",\"73\":\"9#使用场景-9\",\"74\":\"9#行为型\",\"75\":\"9#策略模式\",\"76\":\"9#优点-10\",\"77\":\"9#使用场景-10\",\"78\":\"9#模板方法模式\",\"79\":\"9#优点-11\",\"80\":\"9#使用场景-11\",\"81\":\"9#观察者模式\",\"82\":\"9#优点-12\",\"83\":\"9#使用场景-12\",\"84\":\"9#发布订阅模式\",\"85\":\"9#优点-13\",\"86\":\"9#使用场景-13\",\"87\":\"9#迭代器模式\",\"88\":\"9#优点-14\",\"89\":\"9#使用场景-14\",\"90\":\"9#职责链模式\",\"91\":\"9#优点-15\",\"92\":\"9#使用场景-15\",\"93\":\"9#命令模式\",\"94\":\"9#优点-16\",\"95\":\"9#使用场景-16\",\"96\":\"9#备忘录模式\",\"97\":\"9#优点-17\",\"98\":\"9#使用场景-17\",\"99\":\"9#状态模式\",\"100\":\"9#优点-18\",\"101\":\"9#使用场景-18\",\"102\":\"9#访问者模式\",\"103\":\"9#优点-19\",\"104\":\"9#使用场景-19\",\"105\":\"9#中介者模式\",\"106\":\"9#优点-20\",\"107\":\"9#使用场景-20\",\"108\":\"9#解释器模式\",\"109\":\"9#优点-21\",\"110\":\"9#使用场景-21\",\"111\":\"9@0\",\"112\":\"10\",\"113\":\"10#数据类型\",\"114\":\"10#基础类型\",\"115\":\"10#引用类型\",\"116\":\"10#浅拷贝\",\"117\":\"10#实现方式\",\"118\":\"10#示例\",\"119\":\"10#深拷贝\",\"120\":\"10#实现方式-1\",\"121\":\"10#示例-1\",\"122\":\"10@0\",\"123\":\"11\",\"124\":\"11#防抖\",\"125\":\"11#实际应用\",\"126\":\"11#节流\",\"127\":\"11#区别\",\"128\":\"11@0\",\"129\":\"12\",\"130\":\"12#构造函数\",\"131\":\"12#方法\",\"132\":\"12#示例\",\"133\":\"12#intersectionobserver\",\"134\":\"12#构造函数-1\",\"135\":\"12#属性\",\"136\":\"12#方法-1\",\"137\":\"12#示例-1\",\"138\":\"12#resizeobserver\",\"139\":\"12#构造函数-2\",\"140\":\"12#方法-2\",\"141\":\"12#示例-2\",\"142\":\"12@0\",\"143\":\"13\",\"144\":\"13#web-worker\",\"145\":\"13#api\",\"146\":\"13#创建worker\",\"147\":\"13#发送消息到worker\",\"148\":\"13#worker-接收消息\",\"149\":\"13#worker-发送消息到主线程\",\"150\":\"13#捕获错误\",\"151\":\"13#终止worker\",\"152\":\"13#worker-内部全局对象\",\"153\":\"13#示例\",\"154\":\"13#使用场景\",\"155\":\"13#shared-worker\",\"156\":\"13#特点\",\"157\":\"13#api-1\",\"158\":\"13#创建worker-1\",\"159\":\"13#使用场景-1\",\"160\":\"13#service-worker\",\"161\":\"13#注册service-worker\",\"162\":\"13#示例-1\",\"163\":\"13#使用步骤\",\"164\":\"13#注册\",\"165\":\"13@0\",\"166\":\"14\",\"167\":\"14#kkview\",\"168\":\"14@0\",\"169\":\"15\",\"170\":\"15#文件状态\",\"171\":\"15#git-基本命令\",\"172\":\"15#用户信息配置\",\"173\":\"15#项目初始化\",\"174\":\"15#常用操作\",\"175\":\"15#分支操作\",\"176\":\"15#远程仓库操作\",\"177\":\"15#撤销操作\",\"178\":\"15#存储操作\",\"179\":\"15@0\",\"180\":\"16\",\"181\":\"16#变量声明\",\"182\":\"16#模块声明\",\"183\":\"16#接口声明\",\"184\":\"16#扩展现有类型\",\"185\":\"16#命名空间声明\",\"186\":\"16#常用\",\"187\":\"16@0\",\"188\":\"17\",\"189\":\"17#概述\",\"190\":\"17#类型的概念\",\"191\":\"17#动态类型与静态类型\",\"192\":\"17#静态类型的优点\",\"193\":\"17#静态类型的缺点\",\"194\":\"17@0\",\"195\":\"18\",\"196\":\"18#类型声明\",\"197\":\"18#类型推断\",\"198\":\"18#typescript-playground\",\"199\":\"18#ts-node-模块\",\"200\":\"18@0\",\"201\":\"19\",\"202\":\"19#any类型\",\"203\":\"19#基本意义\",\"204\":\"19#unknown-类型\",\"205\":\"19#never-类型\",\"206\":\"19#symbol\",\"207\":\"19#unique-symbol\",\"208\":\"19#类型推断\",\"209\":\"19@0\",\"210\":\"20\",\"211\":\"20#基本类型\",\"212\":\"20#包装对象类型\",\"213\":\"20#包装对象类型与字面量类型\",\"214\":\"20#object-类型与-object-类型\",\"215\":\"20#object-类型\",\"216\":\"20#object-类型-1\",\"217\":\"20#undefined-和-null-的特殊性\",\"218\":\"20#值类型\",\"219\":\"20#联合类型\",\"220\":\"20#交叉类型\",\"221\":\"20#type-命令\",\"222\":\"20#typeof-运算符\",\"223\":\"20#块级类型声明\",\"224\":\"20@0\",\"225\":\"21\",\"226\":\"21#数组\",\"227\":\"21#数组的类型推断\",\"228\":\"21#只读数组-const-断言\",\"229\":\"21#多维数组\",\"230\":\"21#元组\",\"231\":\"21#只读元组\",\"232\":\"21#成员数量的推断\",\"233\":\"21#扩展运算符与成员数量\",\"234\":\"21@0\",\"235\":\"22\",\"236\":\"22#awaited-type\",\"237\":\"22#constructorparameters-type\",\"238\":\"22#exclude-uniontype-excludedmembers\",\"239\":\"22#extract-type-union\",\"240\":\"22#instancetype-type\",\"241\":\"22#nonnullable-type\",\"242\":\"22#omit-type-keys\",\"243\":\"22#omitthisparameter-type\",\"244\":\"22#parameters-type\",\"245\":\"22#partial-type\",\"246\":\"22#pick-type-keys\",\"247\":\"22#readonly-type\",\"248\":\"22#record-keys-type\",\"249\":\"22#required-type\",\"250\":\"22#readonlyarray-type\",\"251\":\"22#returntype-type\",\"252\":\"22#thisparametertype-type\",\"253\":\"22#thistype-type\",\"254\":\"22#字符串类型工具\",\"255\":\"22#uppercase-stringtype\",\"256\":\"22#lowercase-stringtype\",\"257\":\"22#capitalize-stringtype\",\"258\":\"22#uncapitalize-stringtype\",\"259\":\"22@0\",\"260\":\"23\",\"261\":\"23#简介\",\"262\":\"23#基本结构\",\"263\":\"23#compileroptions\",\"264\":\"23#allowjs\",\"265\":\"23#alwaysstrict\",\"266\":\"23#allowsyntheticdefaultimports\",\"267\":\"23#allowunreachablecode\",\"268\":\"23#allowunusedlabels\",\"269\":\"23#baseurl\",\"270\":\"23#checkjs\",\"271\":\"23#composite\",\"272\":\"23#declaration\",\"273\":\"23#declarationdir\",\"274\":\"23#declarationmap\",\"275\":\"23#diagnostics\",\"276\":\"23#disablesizelimit\",\"277\":\"23#emitbom\",\"278\":\"23#emitdecoratormetadata-实验性\",\"279\":\"23#experimentaldecorators-实验性\",\"280\":\"23#emitdeclarationonly\",\"281\":\"23#extendeddiagnostics\",\"282\":\"23#esmoduleinterop\",\"283\":\"23#exactoptionalpropertytypes\",\"284\":\"23#forceconsistentcasinginfilenames\",\"285\":\"23#incremental\",\"286\":\"23#inlinesourcemap\",\"287\":\"23#inlinesources\",\"288\":\"23#isolatedmodules\",\"289\":\"23#jsx\",\"290\":\"23#lib\",\"291\":\"23#listemittedfiles\",\"292\":\"23#listfiles\",\"293\":\"23#maproot\",\"294\":\"23#module\",\"295\":\"23#moduleresolution\",\"296\":\"23#modulesuffixes\",\"297\":\"23#newline\",\"298\":\"23#noemit\",\"299\":\"23#noemithelpers\",\"300\":\"23#exclude\",\"301\":\"23#include\",\"302\":\"23#extends\",\"303\":\"23#references\",\"304\":\"23#files\",\"305\":\"23@0\",\"306\":\"24\",\"307\":\"24#响应式原理-proxy\",\"308\":\"24#碎片化-fragments\",\"309\":\"24#异步组件-suspense\",\"310\":\"24#传送门-teleport\",\"311\":\"24#禁用-teleport\",\"312\":\"24#延迟解析的-teleport\",\"313\":\"24#更小的核心代码\",\"314\":\"24#更快的速度\",\"315\":\"24#更好的typescript支持\",\"316\":\"24@0\",\"317\":\"25\",\"318\":\"25#优点\",\"319\":\"25#首屏加载\",\"320\":\"25#心智模型\",\"321\":\"25#seo\",\"322\":\"25#缺点\",\"323\":\"25#开发限制\",\"324\":\"25#node-环境\",\"325\":\"25#服务端负载\",\"326\":\"25@0\",\"327\":\"26\",\"328\":\"26#permission\",\"329\":\"26#自动聚焦\",\"330\":\"26#图片懒加载\",\"331\":\"26#防抖指令\",\"332\":\"26@0\",\"333\":\"27\",\"334\":\"27#概述\",\"335\":\"27#使用方式\",\"336\":\"27#特点\",\"337\":\"27#常见的loader\",\"338\":\"27@0\",\"339\":\"28\",\"340\":\"28@0\",\"341\":\"29\",\"342\":\"30\",\"343\":\"31\",\"344\":\"32\",\"345\":\"33\",\"346\":\"34\",\"347\":\"35\",\"348\":\"36\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1,2],\"1\":[1],\"2\":[null,null,1],\"3\":[1,18],\"4\":[null,null,1],\"5\":[null,null,1],\"6\":[1,20],\"7\":[null,null,1],\"8\":[null,null,1],\"9\":[2,10],\"10\":[2,8],\"11\":[2,12],\"12\":[2,11],\"13\":[2,10],\"14\":[1,8],\"15\":[1,1],\"16\":[1,3],\"17\":[1,1],\"18\":[2,25],\"19\":[1,5],\"20\":[1,2],\"21\":[1,3],\"22\":[1],\"23\":[null,null,1],\"24\":[null,null,1],\"25\":[1,3],\"26\":[1,19],\"27\":[1,20],\"28\":[1,12],\"29\":[1,13],\"30\":[null,null,1],\"31\":[null,null,2],\"32\":[1],\"33\":[null,null,1],\"34\":[1],\"35\":[1,37],\"36\":[1,48],\"37\":[1,27],\"38\":[null,null,1],\"39\":[1],\"40\":[1],\"41\":[1,13],\"42\":[1,30],\"43\":[1,5],\"44\":[1,6],\"45\":[1,29],\"46\":[1,18],\"47\":[1,5],\"48\":[1,47],\"49\":[1,16],\"50\":[1,6],\"51\":[1,35],\"52\":[1],\"53\":[1,17],\"54\":[1,5],\"55\":[1,34],\"56\":[1,21],\"57\":[1,7],\"58\":[1,51],\"59\":[1,18],\"60\":[1,9],\"61\":[1,43],\"62\":[1,20],\"63\":[1,6],\"64\":[1,55],\"65\":[1,16],\"66\":[1,5],\"67\":[1,50],\"68\":[1,14],\"69\":[1,7],\"70\":[1,59],\"71\":[1,16],\"72\":[1,6],\"73\":[1,57],\"74\":[1],\"75\":[1,16],\"76\":[1,7],\"77\":[1,45],\"78\":[1,12],\"79\":[1,7],\"80\":[1,43],\"81\":[1,25],\"82\":[1,6],\"83\":[1,62],\"84\":[1,22],\"85\":[1,7],\"86\":[1,56],\"87\":[1,19],\"88\":[1,6],\"89\":[1,57],\"90\":[1,17],\"91\":[1,5],\"92\":[1,51],\"93\":[1,24],\"94\":[1,8],\"95\":[1,50],\"96\":[1,16],\"97\":[1,5],\"98\":[1,58],\"99\":[1,16],\"100\":[1,7],\"101\":[1,40],\"102\":[1,25],\"103\":[1,6],\"104\":[1,53],\"105\":[1,21],\"106\":[1,7],\"107\":[1,54],\"108\":[1,19],\"109\":[1,6],\"110\":[1,52],\"111\":[null,null,2],\"112\":[1],\"113\":[1],\"114\":[1,51],\"115\":[1,10],\"116\":[1,9],\"117\":[1,11],\"118\":[1,36],\"119\":[1,4],\"120\":[1,13],\"121\":[1,40],\"122\":[null,null,1],\"123\":[1],\"124\":[1,37],\"125\":[1,6],\"126\":[1,30],\"127\":[1,6],\"128\":[null,null,1],\"129\":[1,4],\"130\":[1,7],\"131\":[1,21],\"132\":[1,58],\"133\":[1,3],\"134\":[1,8],\"135\":[1,31],\"136\":[1,13],\"137\":[1,28],\"138\":[1,11],\"139\":[1,7],\"140\":[1,10],\"141\":[1,69],\"142\":[null,null,1],\"143\":[1],\"144\":[2,12],\"145\":[1],\"146\":[1,12],\"147\":[1,18],\"148\":[2,16],\"149\":[2,12],\"150\":[1,12],\"151\":[1,6],\"152\":[2,10],\"153\":[1,25],\"154\":[1,3],\"155\":[2,15],\"156\":[1,20],\"157\":[1],\"158\":[1,9],\"159\":[1,2],\"160\":[2,20],\"161\":[2,13],\"162\":[1,31],\"163\":[1],\"164\":[1,15],\"165\":[null,null,1],\"166\":[1],\"167\":[1],\"168\":[null,null,1],\"169\":[2],\"170\":[1,21],\"171\":[2],\"172\":[1,8],\"173\":[1,7],\"174\":[1,57],\"175\":[1,41],\"176\":[1,19],\"177\":[1,21],\"178\":[1,16],\"179\":[null,null,1],\"180\":[3,1],\"181\":[1,7],\"182\":[1,6],\"183\":[1,6],\"184\":[1,5],\"185\":[1,11],\"186\":[1,121],\"187\":[null,null,1],\"188\":[1],\"189\":[1,24],\"190\":[1,65],\"191\":[1,66],\"192\":[1,105],\"193\":[1,44],\"194\":[null,null,1],\"195\":[1],\"196\":[1,33],\"197\":[1,26],\"198\":[2,6],\"199\":[3,70],\"200\":[null,null,1],\"201\":[1],\"202\":[1],\"203\":[1,151],\"204\":[2,118],\"205\":[2,87],\"206\":[1,19],\"207\":[2,107],\"208\":[1,22],\"209\":[null,null,1],\"210\":[1],\"211\":[1,22],\"212\":[1,48],\"213\":[1,52],\"214\":[4,6],\"215\":[2,30],\"216\":[2,36],\"217\":[4,50],\"218\":[1,42],\"219\":[1,41],\"220\":[1,31],\"221\":[2,33],\"222\":[2,62],\"223\":[1,19],\"224\":[null,null,1],\"225\":[1],\"226\":[1,30],\"227\":[1,24],\"228\":[3,46],\"229\":[1,16],\"230\":[1,66],\"231\":[1,13],\"232\":[1,14],\"233\":[1,39],\"234\":[null,null,1],\"235\":[1],\"236\":[1,26],\"237\":[1,48],\"238\":[1,52],\"239\":[1,44],\"240\":[1,63],\"241\":[1,37],\"242\":[1,36],\"243\":[1,32],\"244\":[1,69],\"245\":[1,17],\"246\":[1,36],\"247\":[1,45],\"248\":[1,38],\"249\":[1,32],\"250\":[1,30],\"251\":[1,53],\"252\":[1,26],\"253\":[1,55],\"254\":[1,12],\"255\":[1,9],\"256\":[1,9],\"257\":[1,9],\"258\":[1,10],\"259\":[null,null,1],\"260\":[2],\"261\":[1,17],\"262\":[1,18],\"263\":[1],\"264\":[1,13],\"265\":[1,9],\"266\":[1,10],\"267\":[1,10],\"268\":[1,10],\"269\":[1,21],\"270\":[1,10],\"271\":[1,6],\"272\":[1,4],\"273\":[1,9],\"274\":[1,12],\"275\":[1,1],\"276\":[1,1],\"277\":[1,3],\"278\":[3,2],\"279\":[3,2],\"280\":[1,5],\"281\":[1,1],\"282\":[1,37],\"283\":[1,19],\"284\":[1,2],\"285\":[1,4],\"286\":[1,9],\"287\":[1,6],\"288\":[1,9],\"289\":[1,17],\"290\":[1,13],\"291\":[1,6],\"292\":[1,6],\"293\":[1,15],\"294\":[1,7],\"295\":[1,33],\"296\":[1,15],\"297\":[1,5],\"298\":[1,5],\"299\":[1,8],\"300\":[1,16],\"301\":[1,23],\"302\":[1,12],\"303\":[1,11],\"304\":[1,15],\"305\":[null,null,1],\"306\":[3],\"307\":[3,21],\"308\":[3,13],\"309\":[3,51],\"310\":[3,10],\"311\":[2,7],\"312\":[2,27],\"313\":[1,11],\"314\":[1,6],\"315\":[1],\"316\":[null,null,1],\"317\":[1,10],\"318\":[1,3],\"319\":[1,8],\"320\":[1,4],\"321\":[1,1],\"322\":[1,3],\"323\":[1,2],\"324\":[2,6],\"325\":[1,3],\"326\":[null,null,1],\"327\":[3],\"328\":[1,34],\"329\":[1,7],\"330\":[1,23],\"331\":[1,26],\"332\":[null,null,1],\"333\":[1],\"334\":[1,12],\"335\":[1,15],\"336\":[1,21],\"337\":[1,25],\"338\":[null,null,1],\"339\":[1],\"340\":[null,null,1],\"341\":[1,3],\"342\":[2],\"343\":[1],\"344\":[1],\"345\":[2],\"346\":[1],\"347\":[1],\"348\":[1]},\"averageFieldLength\":[1.1741056407297827,21.801081551607595,0.7799154842748554],\"storedFields\":{\"0\":{\"h\":\"介绍页\",\"t\":[\"将你的个人介绍和档案放置在此处。\"]},\"1\":{\"h\":\"主要功能与配置演示\"},\"2\":{\"c\":[\"使用指南\"]},\"3\":{\"h\":\"布局与功能禁用\",\"t\":[\"你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。\",\"本页面就是一个示例，禁用了如下功能:\",\"导航栏\",\"侧边栏\",\"路径导航\",\"页面信息\",\"贡献者\",\"编辑此页链接\",\"更新时间\",\"上一篇/下一篇 链接\",\"评论\",\"页脚\",\"返回顶部按钮\"]},\"4\":{\"c\":[\"使用指南\"]},\"5\":{\"c\":[\"禁用\"]},\"6\":{\"h\":\"布局\",\"t\":[\"布局包括:\",\"导航栏\",\"侧边栏\",\"页脚\",\"同时每个页面包含:\",\"路径导航\",\"标题和页面信息\",\"TOC (文章标题列表)\",\"贡献者、更新时间等页面元信息\",\"评论\",\"主题也带有以下元素:\",\"夜间模式按钮\",\"返回顶部按钮\",\"打印按钮\",\"你可以在主题选项和页面的 frontmatter 中自定义它们。\"]},\"7\":{\"c\":[\"指南\"]},\"8\":{\"c\":[\"布局\"]},\"9\":{\"h\":\"Markdown 展示\",\"t\":[\"VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。\",\"你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。\"]},\"10\":{\"h\":\"Markdown 介绍\",\"t\":[\"如果你是一个新手，还不会编写 Markdown，请先阅读 Markdown 介绍 和 Markdown 演示。\"]},\"11\":{\"h\":\"Markdown 配置\",\"t\":[\"VuePress 通过 Frontmatter 为每个 Markdown 页面引入配置。\",\"Frontmatter\",\"Frontmatter 是 VuePress 中很重要的一个概念，请阅读 Frontmatter 介绍 了解详情。\"]},\"12\":{\"h\":\"Markdown 扩展\",\"t\":[\"VuePress 会使用 markdown-it 来解析 Markdown 内容，因此可以借助于 markdown-it 插件来实现 语法扩展 。\"]},\"13\":{\"h\":\"VuePress 扩展\",\"t\":[\"为了丰富文档写作，VuePress 对 Markdown 语法进行了扩展。\",\"关于这些扩展，请阅读 VuePress 中的 Markdown 扩展。\"]},\"14\":{\"h\":\"主题扩展\",\"t\":[\"通过 VuePress 插件，主题扩展了更多 Markdown 语法，提供更加丰富的写作功能。\"]},\"15\":{\"h\":\"选项卡\",\"t\":[\"查看详情\"]},\"16\":{\"h\":\"脚注\",\"t\":[\"此文字有脚注[1].\",\"查看详情\"]},\"17\":{\"h\":\"导入文件\",\"t\":[\"查看详情\"]},\"18\":{\"h\":\"TeX 语法\",\"t\":[\"$$ \\\\frac {\\\\partial^r} {\\\\partial \\\\omega^r} \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) = \\\\left(\\\\frac {y^{\\\\omega}} {\\\\omega}\\\\right) \\\\left{(\\\\log y)^r + \\\\sum_{i=1}^r \\\\frac {(-1)^i r \\\\cdots (r-i+1) (\\\\log y)^{r-i}} {\\\\omega^i} \\\\right} $$\",\"查看详情\"]},\"19\":{\"h\":\"任务列表\",\"t\":[\" 计划 1\",\" 计划 2\",\"查看详情\"]},\"20\":{\"h\":\"图片增强\",\"t\":[\"支持为图片设置颜色模式和大小。\",\"查看详情\"]},\"21\":{\"h\":\"上下角标\",\"t\":[\"19th H2O\",\"查看详情\"]},\"22\":{\"h\":\"组件\"},\"23\":{\"c\":[\"使用指南\"]},\"24\":{\"c\":[\"Markdown\"]},\"25\":{\"h\":\"页面配置\",\"t\":[\"more 注释之前的内容被视为文章摘要。\"]},\"26\":{\"h\":\"页面标题\",\"t\":[\"The first H1 title in Markdown will be regarded as page title.\",\"Markdown 中的第一个 H1 标题会被视为页面标题。\",\"你可以在 Markdown 的 Frontmatter 中设置页面标题。\",\"--- title: 页面标题 ---\"]},\"27\":{\"h\":\"页面信息\",\"t\":[\"你可以在 Markdown 的 Frontmatter 中设置页面信息。\",\"作者设置为 Ms.Hope。\",\"写作日期为 2020 年 1 月 1 日\",\"分类为 “使用指南”\",\"标签为 “页面配置” 和 “使用指南”\"]},\"28\":{\"h\":\"页面内容\",\"t\":[\"你可以自由在这里书写你的 Markdown。\",\"图片引入\",\"你可以将图片和 Markdown 文件放置在一起使用相对路径进行引用。\",\"对于 .vuepress/public 文件夹的图片，请使用绝对链接 / 进行引用。\"]},\"29\":{\"h\":\"组件\",\"t\":[\"每个 Markdown 页面都会被转换为一个 Vue 组件，这意味着你可以在 Markdown 中使用 Vue 语法：\",\"{{ 1 + 1 }}\",\"{{ i }}\",\"你也可以创建并引入你自己的组件。\"]},\"30\":{\"c\":[\"使用指南\"]},\"31\":{\"c\":[\"页面配置\",\"使用指南\"]},\"32\":{\"h\":\"个人学习文档\"},\"33\":{\"c\":[\"学习文档\"]},\"34\":{\"h\":\"前端存储\"},\"35\":{\"h\":\"indexedDB\",\"t\":[\"对于本地话存储 我们一般都会想到cookie webStorage（sessionStorage、localStorage）对于这些存储方式，存在以下比较明显的缺点\",\"存储量小 web storage 的存储量最大也只有5M。\",\"存取不方便 存入的内容会经过序列化 取值的时候需要经过反序列化。\",\"indexedDB 是一种底层的API，用于在客户端存储大量的结构化数据（包括文件和二进制对象）\",\"indexedDB 是一个基于JavaScript的面向对象数据库，允许你存储和检索用键索引的对象可以存储结构化克隆算法支持的任何对象[Array ArrayBuffer Boolean DataView Date Error Map Object RegExp Set String TypedArray] Error 仅支持部分\",\"存取方便 不需要序列化\",\"异步存取\",\"庞大的存储量\"]},\"36\":{\"h\":\"使用\",\"t\":[\"localforage.getItem('somekey').then(function (value) { // 当离线仓库中的值被载入时，此处代码运行 console.log(value); }).catch(function (err) { // 当出错时，此处代码运行 console.log(err); }); // 不同于 localStorage，你可以存储非字符串类型 localforage.setItem('my array', [1, 2, 'three']).then(function (value) { // 如下输出 `1` console.log(value[0]); }).catch(function (err) { // 当出错时，此处代码运行 console.log(err); }); localforage.removeItem('somekey').then(function () { // 当值被移除后，此处代码运行 console.log('Key is cleared!'); }).catch(function (err) { // 当出错时，此处代码运行 console.log(err); }); localforage.clear().then(function () { // 当数据库被全部删除后，此处代码运行 console.log('Database is now empty.'); }).catch(function (err) { // 当出错时，此处代码运行 console.log(err); }); var store = localforage.createInstance({ name: \\\"nameHere\\\" }); var otherStore = localforage.createInstance({ name: \\\"otherName\\\" }); // 设置某个数据仓库 key 的值不会影响到另一个数据仓库 store.setItem(\\\"key\\\", \\\"value\\\"); otherStore.setItem(\\\"key\\\", \\\"value2\\\");\"]},\"37\":{\"h\":\"手写防抖和节流\",\"t\":[\"// 节流 function throttle(func, delay) { let lastExecTime = 0; let timeoutId; return function (...args) { const currentTime = Date.now(); if (currentTime - lastExecTime < delay) { clearTimeout(timeoutId); timeoutId = setTimeout(() => { lastExecTime = currentTime; func.apply(this, args); }, delay); } else { lastExecTime = currentTime; func.apply(this, args); } }; } // 防抖 function debounce(func, delay) { let timeoutId; return function (...args) { clearTimeout(timeoutId); timeoutId = setTimeout(() => { func.apply(this, args); }, delay); }; }\"]},\"38\":{\"c\":[\"JavaScript\"]},\"39\":{\"h\":\"设计模式及场景\"},\"40\":{\"h\":\"创建型\"},\"41\":{\"h\":\"单例模式\",\"t\":[\"全局只能存在一个实例，并在全局可以访问。 一般用于全局状态的共享和缓存。\",\"class A { static instance?: A getInstance() { if (A.instance) { return A.instance } else { return new A() } } }\"]},\"42\":{\"h\":\"工厂方法模式\",\"t\":[\"不使用new去创建实例， 常用于根据不同的条件(类型)创建不同的对象。\",\"class Button { render() { console.log('Rendering a button'); } } class Input { render() { console.log('Rendering an input'); } } class WidgetFactory { static createWidget(type) { switch (type) { case 'button': return new Button(); case 'input': return new Input(); default: throw new Error('Unknown widget type'); } } } const button = WidgetFactory.createWidget('button'); button.render(); // Rendering a button\"]},\"43\":{\"h\":\"抽象工厂模式\",\"t\":[\"抽象工厂模式是一种创建型设计模式，它提供一个接口，用于创建一系列相关或相互依赖的对象，而无需指定它们具体的类。\"]},\"44\":{\"h\":\"优点\",\"t\":[\"解耦：客户端代码与具体产品类解耦，便于扩展。\",\"一致性: 确保同一系列的产品一起使用。\"]},\"45\":{\"h\":\"使用场景\",\"t\":[\"当系统需要独立于产品的创建、组合和表示时。\",\"一个系统有多个产品族，而系统只消费其中某一族的产品。\",\"// 抽象产品 interface Button { render(): string; } interface TextBox { render(): string; } // 具体产品 class WinButton implements Button { render(): string { return \\\"Windows Button\\\"; } } class MacButton implements Button { render(): string { return \\\"Mac Button\\\"; } } class WinTextBox implements TextBox { render(): string { return \\\"Windows TextBox\\\"; } } class MacTextBox implements TextBox { render(): string { return \\\"Mac TextBox\\\"; } } // 抽象工厂 interface GUIFactory { createButton(): Button; createTextBox(): TextBox; } // 具体工厂 class WinFactory implements GUIFactory { createButton(): Button { return new WinButton(); } createTextBox(): TextBox { return new WinTextBox(); } } class MacFactory implements GUIFactory { createButton(): Button { return new MacButton(); } createTextBox(): TextBox { return new MacTextBox(); } }\"]},\"46\":{\"h\":\"建造者模式\",\"t\":[\"建造者模式是一种创建型设计模式，它允许使用多个简单的对象一步步构建一个复杂的对象。它将对象的构建与表示分离，使同样的构建过程可以创建不同的表示。\",\"产品（Product）: 需要构建的复杂对象。\",\"建造者（Builder）: 定义创建产品的抽象接口。\",\"具体建造者（ConcreteBuilder）: 实现建造者接口，以构建和装配产品的各个部分。\",\"指挥者（Director）: 负责使用建造者接口来构建产品。\"]},\"47\":{\"h\":\"优点\",\"t\":[\"分离复杂对象的构建和表示: 使得构建过程更灵活。\",\"代码可读性强: 清晰分离了构建逻辑和产品表示。\"]},\"48\":{\"h\":\"使用场景\",\"t\":[\"当构建一个复杂对象的算法应该独立于该对象的组成部分时\",\"当构建过程需要多步操作时\",\"// 产品 class Car { public wheels: number = 4; public engine: string = ''; public seats: number = 0; public specifications(): string { return `Car with ${this.wheels} wheels, ${this.engine} engine and ${this.seats} seats.`; } } // 建造者接口 interface CarBuilder { setEngine(engine: string): this; setSeats(seats: number): this; build(): Car; } // 具体建造者 class SportsCarBuilder implements CarBuilder { private car: Car; constructor() { this.car = new Car(); } setEngine(engine: string): this { this.car.engine = engine; return this; } setSeats(seats: number): this { this.car.seats = seats; return this; } build(): Car { return this.car; } } // 指挥者 class CarDirector { private builder: CarBuilder; constructor(builder: CarBuilder) { this.builder = builder; } constructCar(): Car { return this.builder.setEngine('V8').setSeats(2).build(); } } // 使用 const builder = new SportsCarBuilder(); const director = new CarDirector(builder); const car = director.constructCar(); console.log(car.specifications());\"]},\"49\":{\"h\":\"原型模式\",\"t\":[\"原型模式是一种创建型设计模式，通过复制现有的对象来创建新的对象，而不是通过实例化类。这种方式使得对象的创建更加灵活，尤其是在创建成本较高的对象时。\",\"原型接口（Prototype）: 声明一个克隆自身的方法。\",\"具体原型（ConcretePrototype）: 实现克隆方法，返回自身的副本。\",\"客户端（Client）: 使用原型对象来创建新对象。\"]},\"50\":{\"h\":\"优点\",\"t\":[\"减少创建成本: 通过复制现有的对象来创建新对象，避免了昂贵的初始化过程。\",\"灵活性: 可以在运行时改变对象的结构和状态。\"]},\"51\":{\"h\":\"使用场景\",\"t\":[\"当对象的创建成本较高时。\",\"当需要通过复制现有对象来实现新对象时。\",\"// 原型接口 interface Prototype { clone(): Prototype; } // 具体原型 class ConcretePrototype implements Prototype { private name: string; constructor(name: string) { this.name = name; } public clone(): Prototype { return new ConcretePrototype(this.name); } public getName(): string { return this.name; } } // 客户端代码 function clientCode() { const prototype = new ConcretePrototype(\\\"Original\\\"); const clone = prototype.clone(); console.log(`Prototype Name: ${prototype.getName()}`); console.log(`Cloned Name: ${clone.getName()}`); } // 使用 clientCode();\"]},\"52\":{\"h\":\"结构型\"},\"53\":{\"h\":\"适配器模式\",\"t\":[\"适配器模式是一种结构型设计模式，通过将一个类的接口转换成客户端所期望的另一种接口，使得原本由于接口不兼容而无法一起工作的类可以协同工作。\",\"目标接口（Target）: 客户端所期待的接口。\",\"适配者（Adapter）: 负责将适配者的接口转换成目标接口。\",\"适配者类（Adaptee）: 需要适配的类，具有与目标接口不兼容的接口。\",\"客户端（Client）: 通过目标接口与适配器交互。\"]},\"54\":{\"h\":\"优点\",\"t\":[\"提高代码的灵活性和可复用性: 使得不兼容的接口可以一起工作。\",\"单一职责原则: 将适配的责任分离到适配器中。\"]},\"55\":{\"h\":\"使用场景\",\"t\":[\"当希望使用的类的接口与现有代码不兼容时。\",\"当需要使用多个不同接口的类时。\",\" // 目标接口 interface Target { request(): string; } // 适配者类 class Adaptee { public specificRequest(): string { return \\\"Specific request from Adaptee.\\\"; } } // 适配器 class Adapter implements Target { private adaptee: Adaptee; constructor(adaptee: Adaptee) { this.adaptee = adaptee; } public request(): string { return this.adaptee.specificRequest(); } } // 客户端代码 function clientCode(target: Target) { console.log(target.request()); } // 使用 const adaptee = new Adaptee(); const adapter = new Adapter(adaptee); clientCode(adapter);\"]},\"56\":{\"h\":\"装饰器模式\",\"t\":[\"装饰器模式是一种结构型设计模式，它允许在不改变对象自身的情况下，动态地向其添加额外的功能。这个模式通过创建一个装饰类来包裹原有的类，并在保持原有类接口的前提下，提供额外的功能。\",\"组件接口（Component）: 定义了对象的接口。\",\"具体组件（ConcreteComponent）: 实现了组件接口的具体类。\",\"装饰器接口（Decorator）: 继承了组件接口，持有一个组件的引用。\",\"具体装饰器（ConcreteDecorator）: 实现了装饰器接口，添加新的功能。\"]},\"57\":{\"h\":\"优点\",\"t\":[\"灵活性: 可以动态添加和撤销功能，而不需要修改类的结构。\",\"单一职责原则: 通过将功能分离到装饰器中，原有类的职责更单一。\"]},\"58\":{\"h\":\"使用场景\",\"t\":[\"当需要在运行时为对象添加功能时。\",\"当希望能够组合多个功能时。\",\" // 组件接口 interface Coffee { cost(): number; description(): string; } // 具体组件 class SimpleCoffee implements Coffee { public cost(): number { return 5; } public description(): string { return \\\"Simple coffee\\\"; } } // 装饰器基类 abstract class CoffeeDecorator implements Coffee { protected coffee: Coffee; constructor(coffee: Coffee) { this.coffee = coffee; } public abstract cost(): number; public abstract description(): string; } // 具体装饰器 class MilkDecorator extends CoffeeDecorator { public cost(): number { return this.coffee.cost() + 1; // 添加牛奶的成本 } public description(): string { return this.coffee.description() + \\\", milk\\\"; // 添加牛奶描述 } } class SugarDecorator extends CoffeeDecorator { public cost(): number { return this.coffee.cost() + 0.5; // 添加糖的成本 } public description(): string { return this.coffee.description() + \\\", sugar\\\"; // 添加糖描述 } } // 使用 function clientCode() { let coffee: Coffee = new SimpleCoffee(); console.log(`${coffee.description()} costs $${coffee.cost()}`); coffee = new MilkDecorator(coffee); console.log(`${coffee.description()} costs $${coffee.cost()}`); coffee = new SugarDecorator(coffee); console.log(`${coffee.description()} costs $${coffee.cost()}`); } // 执行客户端代码 clientCode();\"]},\"59\":{\"h\":\"代理模式\",\"t\":[\"代理模式是一种结构型设计模式，它为其他对象提供一种代理以控制对这个对象的访问。代理对象可以在客户端与真实对象之间起到中介作用，通常用于延迟加载、权限控制、日志记录等场景。\",\"主题接口（Subject）: 定义了代理和真实对象的共同接口。\",\"真实主题（RealSubject）: 实现了主题接口，代表实际的对象。\",\"代理（Proxy）: 实现了主题接口，持有一个真实主题的引用，并控制对其的访问。\"]},\"60\":{\"h\":\"优点\",\"t\":[\"控制访问: 代理可以在访问真实对象前后添加额外的处理逻辑\",\"延迟加载: 可以延迟真实对象的创建，直到需要时才进行实例化\",\"增强功能: 可以在不修改真实对象的情况下增加额外的功能，如日志记录。\"]},\"61\":{\"h\":\"使用场景\",\"t\":[\"当需要对对象的访问进行控制时。\",\"当需要对对象的操作进行额外的处理时。\",\" // 主题接口 interface Image { display(): void; } // 真实主题 class RealImage implements Image { private filename: string; constructor(filename: string) { this.filename = filename; this.loadImageFromDisk(); } private loadImageFromDisk(): void { console.log(`Loading ${this.filename}`); } public display(): void { console.log(`Displaying ${this.filename}`); } } // 代理 class ProxyImage implements Image { private realImage: RealImage | null = null; private filename: string; constructor(filename: string) { this.filename = filename; } public display(): void { if (!this.realImage) { this.realImage = new RealImage(this.filename); } this.realImage.display(); } } // 使用 function clientCode() { const image: Image = new ProxyImage(\\\"test_image.jpg\\\"); // 图像将在第一次调用时加载 image.display(); // 再次调用时直接显示 image.display(); } // 执行客户端代码 clientCode();\"]},\"62\":{\"h\":\"桥接模式\",\"t\":[\"桥接模式是一种结构型设计模式，它旨在将抽象与实现分离，使得两者可以独立变化。通过将抽象部分与实现部分分开，可以在不影响彼此的情况下进行扩展。\",\"抽象类（Abstraction）: 定义抽象部分的接口，并持有一个实现部分的引用。\",\"扩展抽象类（RefinedAbstraction）: 继承自抽象类，扩展了抽象的功能。\",\"实现接口（Implementor）: 定义实现部分的接口。\",\"具体实现类（ConcreteImplementor）: 实现实现接口的具体类。\"]},\"63\":{\"h\":\"优点\",\"t\":[\"解耦: 抽象部分和实现部分可以独立变化，减少了耦合。\",\"灵活性: 可以通过组合不同的实现和抽象来扩展功能。\"]},\"64\":{\"h\":\"使用场景\",\"t\":[\"当需要在抽象和实现之间有多个变化时。\",\"当希望避免在同一个类中出现多个变化时。\",\"// 实现接口 interface Renderer { renderCircle(radius: number): void; } // 具体实现类 class VectorRenderer implements Renderer { public renderCircle(radius: number): void { console.log(`Drawing a circle with radius ${radius} using Vector Renderer.`); } } class RasterRenderer implements Renderer { public renderCircle(radius: number): void { console.log(`Drawing a circle with radius ${radius} using Raster Renderer.`); } } // 抽象类 abstract class Shape { protected renderer: Renderer; constructor(renderer: Renderer) { this.renderer = renderer; } abstract draw(): void; } // 扩展抽象类 class Circle extends Shape { private radius: number; constructor(renderer: Renderer, radius: number) { super(renderer); this.radius = radius; } public draw(): void { this.renderer.renderCircle(this.radius); } } // 使用 function clientCode() { const vectorRenderer = new VectorRenderer(); const rasterRenderer = new RasterRenderer(); const circle1 = new Circle(vectorRenderer, 5); const circle2 = new Circle(rasterRenderer, 10); circle1.draw(); // 使用向量渲染器 circle2.draw(); // 使用光栅渲染器 } // 执行客户端代码 clientCode();\"]},\"65\":{\"h\":\"组合模式\",\"t\":[\"组合模式是一种结构型设计模式，它允许将对象组合成树形结构以表示部分与整体的层次关系。组合模式使得客户端对单个对象和组合对象的使用具有一致性。\",\"组件接口（Component）: 声明了叶子和组合对象的共同接口。\",\"叶子（Leaf）: 实现组件接口的具体类，表示树的叶子节点。\",\"组合（Composite）: 也实现组件接口，持有子组件的引用，可以包含叶子和其他组合。\"]},\"66\":{\"h\":\"优点\",\"t\":[\"简化客户端代码: 客户端可以统一处理单个对象和组合对象。\",\"灵活性: 可以动态添加和删除组合中的对象。\"]},\"67\":{\"h\":\"使用场景\",\"t\":[\"当需要表示树形结构时，如文件系统、组织结构等。\",\"当希望客户端可以统一处理单个对象和组合对象时。\",\"// 组件接口 interface Graphic { draw(): void; } // 叶子类 class Circle implements Graphic { public draw(): void { console.log(\\\"Drawing a Circle.\\\"); } } class Square implements Graphic { public draw(): void { console.log(\\\"Drawing a Square.\\\"); } } // 组合类 class CompositeGraphic implements Graphic { private children: Graphic[] = []; public add(graphic: Graphic): void { this.children.push(graphic); } public remove(graphic: Graphic): void { const index = this.children.indexOf(graphic); if (index !== -1) { this.children.splice(index, 1); } } public draw(): void { console.log(\\\"Drawing Composite Graphic:\\\"); for (const child of this.children) { child.draw(); } } } // 使用 function clientCode() { const circle = new Circle(); const square = new Square(); const composite = new CompositeGraphic(); composite.add(circle); composite.add(square); // 绘制组合图形 composite.draw(); } // 执行客户端代码 clientCode();\"]},\"68\":{\"h\":\"外观模式\",\"t\":[\"外观模式是一种结构型设计模式，它为复杂子系统提供一个简单的接口。通过外观模式，可以将系统中的多个接口封装成一个统一的接口，从而简化客户端的使用。\",\"外观类（Facade）: 提供一个简单的接口，封装了复杂的子系统。\",\"子系统类（Subsystem）: 具体的实现类，提供功能的具体实现。\"]},\"69\":{\"h\":\"优点\",\"t\":[\"简化接口: 隐藏了系统的复杂性，提供了一个简单的接口。\",\"降低耦合: 客户端与子系统的依赖关系降低，提高了系统的灵活性。\"]},\"70\":{\"h\":\"使用场景\",\"t\":[\"当系统有多个复杂的子系统时。\",\"当希望为一个复杂的系统提供一个简单的接口时。\",\"// 子系统类 class CPU { public freeze(): void { console.log(\\\"CPU is freezing.\\\"); } public jump(): void { console.log(\\\"CPU is jumping to the boot code.\\\"); } public execute(): void { console.log(\\\"CPU is executing.\\\"); } } class Memory { public load(position: number, data: string): void { console.log(`Memory: Loading data '${data}' at position ${position}.`); } } class HardDrive { public read(position: number, size: number): string { return `Data from position ${position} with size ${size}`; } } // 外观类 class Computer { private cpu: CPU; private memory: Memory; private hardDrive: HardDrive; constructor() { this.cpu = new CPU(); this.memory = new Memory(); this.hardDrive = new HardDrive(); } public start(): void { this.cpu.freeze(); this.memory.load(0, this.hardDrive.read(0, 1024)); this.cpu.jump(); this.cpu.execute(); } } // 使用 function clientCode() { const computer = new Computer(); computer.start(); // 启动计算机 } // 执行客户端代码 clientCode();\"]},\"71\":{\"h\":\"享元模式\",\"t\":[\"享元模式是一种结构型设计模式，它通过共享对象来有效地支持大量细粒度的对象。享元模式主要用于减少内存使用和提高性能，适用于需要创建大量相似对象的场景。\",\"享元接口（Flyweight）: 定义了享元对象的接口。\",\"具体享元（ConcreteFlyweight）: 实现了享元接口，具体的共享对象。\",\"享元工厂（FlyweightFactory）: 管理享元对象的创建和共享，确保享元对象的复用。\"]},\"72\":{\"h\":\"优点\",\"t\":[\"节约内存: 通过共享相同的对象，减少内存占用。\",\"提高性能: 降低了对象创建的开销。\"]},\"73\":{\"h\":\"使用场景\",\"t\":[\"当应用程序需要大量的相似对象时。\",\"当对象的状态可以被分为内部状态和外部状态时。\",\"// 享元接口 interface TreeType { display(color: string): void; } // 具体享元 class ConcreteTreeType implements TreeType { private type: string; constructor(type: string) { this.type = type; } public display(color: string): void { console.log(`Tree Type: ${this.type}, Color: ${color}`); } } // 享元工厂 class TreeTypeFactory { private treeTypes: { [key: string]: TreeType } = {}; public getTreeType(type: string): TreeType { if (!this.treeTypes[type]) { this.treeTypes[type] = new ConcreteTreeType(type); } return this.treeTypes[type]; } } // 使用 function clientCode() { const factory = new TreeTypeFactory(); const tree1 = factory.getTreeType(\\\"Oak\\\"); const tree2 = factory.getTreeType(\\\"Pine\\\"); const tree3 = factory.getTreeType(\\\"Oak\\\"); // 复用已有的对象 tree1.display(\\\"Green\\\"); tree2.display(\\\"Brown\\\"); tree3.display(\\\"Dark Green\\\"); console.log(\\\"Are tree1 and tree3 the same object?\\\", tree1 === tree3); // true } // 执行客户端代码 clientCode();\"]},\"74\":{\"h\":\"行为型\"},\"75\":{\"h\":\"策略模式\",\"t\":[\"策略模式是一种行为型设计模式，它定义了一系列算法，将每个算法封装起来，并使它们可以互相替换。策略模式使得算法的变化独立于使用算法的客户。\",\"策略接口（Strategy）: 定义了所有支持的算法的公共接口。\",\"具体策略（ConcreteStrategy）: 实现了策略接口的具体算法。\",\"上下文（Context）: 持有对策略对象的引用，负责调用策略的方法。\"]},\"76\":{\"h\":\"优点\",\"t\":[\"灵活性: 可以在运行时选择算法，增加新的策略时不需要修改客户端代码。\",\"封装性: 将不同的算法封装在不同的策略类中，符合单一职责原则。\"]},\"77\":{\"h\":\"使用场景\",\"t\":[\"当有多个算法可以完成同一任务时。\",\"当希望在运行时动态选择算法时。\",\"// 策略接口 interface PaymentStrategy { pay(amount: number): void; } // 具体策略 class CreditCardPayment implements PaymentStrategy { public pay(amount: number): void { console.log(`Paid ${amount} using Credit Card.`); } } class PayPalPayment implements PaymentStrategy { public pay(amount: number): void { console.log(`Paid ${amount} using PayPal.`); } } // 上下文 class ShoppingCart { private paymentStrategy: PaymentStrategy; public setPaymentStrategy(strategy: PaymentStrategy): void { this.paymentStrategy = strategy; } public checkout(amount: number): void { this.paymentStrategy.pay(amount); } } // 使用 function clientCode() { const cart = new ShoppingCart(); cart.setPaymentStrategy(new CreditCardPayment()); cart.checkout(100); // 使用信用卡支付 cart.setPaymentStrategy(new PayPalPayment()); cart.checkout(200); // 使用 PayPal 支付 } // 执行客户端代码 clientCode();\"]},\"78\":{\"h\":\"模板方法模式\",\"t\":[\"模板方法模式是一种行为型设计模式，它定义了一个算法的骨架，并将一些步骤的实现延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些特定步骤。\",\"抽象类（AbstractClass）: 定义了模板方法和一些抽象步骤。\",\"具体类（ConcreteClass）: 实现了抽象类中的具体步骤。\"]},\"79\":{\"h\":\"优点\",\"t\":[\"代码复用: 通过抽象类提供通用的算法结构，减少代码重复。\",\"控制流程: 可以控制算法的执行流程，确保某些步骤的执行顺序。\"]},\"80\":{\"h\":\"使用场景\",\"t\":[\"当有多个类的算法结构相同时，但实现细节有所不同。\",\"当需要控制算法的执行顺序时。\",\" // 抽象类 abstract class DataProcessor { // 模板方法 public process(): void { this.readData(); this.processData(); this.saveData(); } protected abstract readData(): void; protected abstract processData(): void; protected saveData(): void { console.log(\\\"Data saved.\\\"); } } // 具体类 class CSVDataProcessor extends DataProcessor { protected readData(): void { console.log(\\\"Reading data from CSV file.\\\"); } protected processData(): void { console.log(\\\"Processing CSV data.\\\"); } } class JSONDataProcessor extends DataProcessor { protected readData(): void { console.log(\\\"Reading data from JSON file.\\\"); } protected processData(): void { console.log(\\\"Processing JSON data.\\\"); } } // 使用 function clientCode() { const csvProcessor = new CSVDataProcessor(); csvProcessor.process(); // 处理 CSV 数据 const jsonProcessor = new JSONDataProcessor(); jsonProcessor.process(); // 处理 JSON 数据 } // 执行客户端代码 clientCode();\"]},\"81\":{\"h\":\"观察者模式\",\"t\":[\"观察者模式是一种行为型设计模式，它定义了一种一对多的依赖关系，使得当一个对象（主题）状态发生变化时，所有依赖于它的对象（观察者）都得到通知并自动更新。\",\"主题接口（Subject）: 定义添加、删除观察者的方法和通知观察者的方法。\",\"具体主题（ConcreteSubject）: 实现主题接口，维护观察者的列表并在状态变化时通知观察者。\",\"观察者接口（Observer）: 定义更新方法，以便在主题状态变化时被调用。\",\"具体观察者（ConcreteObserver）: 实现观察者接口，处理主题状态变化的逻辑。\"]},\"82\":{\"h\":\"优点\",\"t\":[\"解耦: 观察者与主题之间的耦合度低，便于扩展和维护。\",\"动态订阅: 观察者可以在运行时动态添加或移除。\"]},\"83\":{\"h\":\"使用场景\",\"t\":[\"当一个对象的状态改变需要通知其他对象时。\",\"当希望实现广播通信时。\",\"// 观察者接口 interface Observer { update(data: string): void; } // 主题接口 interface Subject { attach(observer: Observer): void; detach(observer: Observer): void; notify(): void; } // 具体主题 class NewsAgency implements Subject { private observers: Observer[] = []; private news: string = ''; public attach(observer: Observer): void { this.observers.push(observer); } public detach(observer: Observer): void { const index = this.observers.indexOf(observer); if (index !== -1) { this.observers.splice(index, 1); } } public notify(): void { for (const observer of this.observers) { observer.update(this.news); } } public setNews(news: string): void { this.news = news; this.notify(); // 通知所有观察者 } } // 具体观察者 class NewsChannel implements Observer { private name: string; constructor(name: string) { this.name = name; } public update(data: string): void { console.log(`${this.name} received news: ${data}`); } } // 使用 function clientCode() { const newsAgency = new NewsAgency(); const channel1 = new NewsChannel(\\\"Channel 1\\\"); const channel2 = new NewsChannel(\\\"Channel 2\\\"); newsAgency.attach(channel1); newsAgency.attach(channel2); newsAgency.setNews(\\\"Breaking news: Observer pattern implemented!\\\"); // 更新新闻 } // 执行客户端代码 clientCode();\"]},\"84\":{\"h\":\"发布订阅模式\",\"t\":[\"发布-订阅模式是一种消息通信模式，它允许多个发布者发送消息，而多个订阅者可以接收这些消息。发布者和订阅者之间通过一个中介（通常称为事件总线或消息代理）进行解耦，避免了直接的依赖关系。\",\"发布者（Publisher）: 负责发送消息的对象。\",\"订阅者（Subscriber）: 负责接收消息的对象。\",\"事件总线（EventBus 或 Message Broker）: 负责管理发布者和订阅者之间的关系，并转发消息。\"]},\"85\":{\"h\":\"优点\",\"t\":[\"解耦: 发布者和订阅者之间没有直接依赖关系，便于扩展和维护。\",\"灵活性: 可以动态添加或移除订阅者，支持多对多的通信。\"]},\"86\":{\"h\":\"使用场景\",\"t\":[\"当需要实现事件驱动的架构时。\",\"当希望在系统中实现松耦合的消息传递时。\",\"// 事件总线 class EventBus { private subscribers: { [key: string]: Function[] } = {}; public subscribe(event: string, callback: Function): void { if (!this.subscribers[event]) { this.subscribers[event] = []; } this.subscribers[event].push(callback); } public unsubscribe(event: string, callback: Function): void { if (!this.subscribers[event]) return; this.subscribers[event] = this.subscribers[event].filter( subscriber => subscriber !== callback ); } public publish(event: string, data: any): void { if (!this.subscribers[event]) return; for (const subscriber of this.subscribers[event]) { subscriber(data); } } } // 使用 function clientCode() { const eventBus = new EventBus(); const logData = (data: any) => { console.log(`Received data: ${data}`); }; eventBus.subscribe('dataReceived', logData); eventBus.publish('dataReceived', {message: 'Hello, World!'}); // 发送消息 eventBus.unsubscribe('dataReceived', logData); // 取消订阅 eventBus.publish('dataReceived', {message: 'This will not be logged.'}); // 不会触发 } // 执行客户端代码 clientCode();\"]},\"87\":{\"h\":\"迭代器模式\",\"t\":[\"迭代器模式是一种行为型设计模式，它提供一种方法来顺序访问一个集合对象中的元素，而不暴露该对象的内部表示。迭代器模式使得集合的遍历与集合的实现相分离。\",\"迭代器接口（Iterator）: 定义了访问和遍历集合的接口。\",\"具体迭代器（ConcreteIterator）: 实现了迭代器接口，维护遍历的状态。\",\"聚合接口（Aggregate）: 定义了创建迭代器的方法。\",\"具体聚合（ConcreteAggregate）: 实现了聚合接口，返回具体的迭代器实例。\"]},\"88\":{\"h\":\"优点\",\"t\":[\"分离关注点: 迭代器与集合的实现分开，方便维护和扩展。\",\"支持多种遍历方式: 可以实现不同的迭代器以支持不同的遍历方式。\"]},\"89\":{\"h\":\"使用场景\",\"t\":[\"当需要访问集合的元素但不想暴露集合的内部结构时。\",\"当希望提供多种遍历方式时。\",\"// 迭代器接口 interface Iterator<T> { next(): T | null; hasNext(): boolean; } // 聚合接口 interface Aggregate<T> { createIterator(): Iterator<T>; } // 具体迭代器 class ConcreteIterator<T> implements Iterator<T> { private collection: ConcreteAggregate<T>; private index: number = 0; constructor(collection: ConcreteAggregate<T>) { this.collection = collection; } public next(): T | null { if (this.hasNext()) { return this.collection.getItem(this.index++); } return null; } public hasNext(): boolean { return this.index < this.collection.size(); } } // 具体聚合 class ConcreteAggregate<T> implements Aggregate<T> { private items: T[] = []; public add(item: T): void { this.items.push(item); } public getItem(index: number): T { return this.items[index]; } public size(): number { return this.items.length; } public createIterator(): Iterator<T> { return new ConcreteIterator<T>(this); } } // 使用 function clientCode() { const aggregate = new ConcreteAggregate<number>(); aggregate.add(1); aggregate.add(2); aggregate.add(3); const iterator = aggregate.createIterator(); while (iterator.hasNext()) { console.log(iterator.next()); } } // 执行客户端代码 clientCode();\"]},\"90\":{\"h\":\"职责链模式\",\"t\":[\"职责链模式是一种行为型设计模式，它通过将请求沿着处理链传递，直到有一个对象处理该请求。职责链模式可以将请求的发送者和接收者解耦，使得请求的处理更加灵活。\",\"抽象处理者（Handler）: 定义处理请求的接口，并持有下一个处理者的引用。\",\"具体处理者（ConcreteHandler）: 实现抽象处理者的接口，处理请求或将其传递给下一个处理者。\",\"客户端（Client）: 发起请求的对象。\"]},\"91\":{\"h\":\"优点\",\"t\":[\"解耦: 请求的发送者与具体处理者之间没有直接依赖关系。\",\"灵活性: 可以动态添加和修改处理链的结构。\"]},\"92\":{\"h\":\"使用场景\",\"t\":[\"当有多个对象可以处理请求，但具体处理者在运行时不确定时。\",\"当希望以不同的方式处理请求时。\",\"// 抽象处理者 abstract class Handler { protected nextHandler: Handler | null = null; public setNext(handler: Handler): Handler { this.nextHandler = handler; return handler; } public handleRequest(request: string): void { if (this.nextHandler) { this.nextHandler.handleRequest(request); } else { console.log(`No handler for request: ${request}`); } } } // 具体处理者 class ConcreteHandlerA extends Handler { public handleRequest(request: string): void { if (request === 'A') { console.log(\\\"Handler A processing request A.\\\"); } else { super.handleRequest(request); } } } class ConcreteHandlerB extends Handler { public handleRequest(request: string): void { if (request === 'B') { console.log(\\\"Handler B processing request B.\\\"); } else { super.handleRequest(request); } } } // 使用 function clientCode() { const handlerA = new ConcreteHandlerA(); const handlerB = new ConcreteHandlerB(); handlerA.setNext(handlerB); handlerA.handleRequest('A'); // 处理 A 的请求 handlerA.handleRequest('B'); // 处理 B 的请求 handlerA.handleRequest('C'); // 没有处理者处理 } // 执行客户端代码 clientCode();\"]},\"93\":{\"h\":\"命令模式\",\"t\":[\"命令模式是一种行为型设计模式，它将请求封装为对象，从而使您可以使用不同的请求、排队请求或记录请求，以及支持可撤销的操作。命令模式使得请求的发送者与接收者之间解耦。\",\"命令接口（Command）: 定义执行命令的接口。\",\"具体命令（ConcreteCommand）: 实现命令接口，定义与接收者之间的绑定。\",\"接收者（Receiver）: 处理执行请求的具体逻辑。\",\"调用者（Invoker）: 请求的发起者，持有命令对象并调用命令的执行方法。\",\"客户端（Client）: 创建具体命令对象并指定接收者。\"]},\"94\":{\"h\":\"优点\",\"t\":[\"解耦: 请求的发送者与接收者之间没有直接的依赖关系。\",\"扩展性: 可以很容易地添加新命令，而无需修改现有代码。\",\"可撤销操作: 可以实现操作的撤销和重做功能。\"]},\"95\":{\"h\":\"使用场景\",\"t\":[\"当需要将请求参数化时。\",\"当需要支持撤销和重做操作时。\",\"当希望使用队列或日志来请求操作时。\",\"// 命令接口 interface Command { execute(): void; undo(): void; } // 接收者 class Light { public turnOn(): void { console.log(\\\"The light is on.\\\"); } public turnOff(): void { console.log(\\\"The light is off.\\\"); } } // 具体命令 class TurnOnLightCommand implements Command { private light: Light; constructor(light: Light) { this.light = light; } public execute(): void { this.light.turnOn(); } public undo(): void { this.light.turnOff(); } } class TurnOffLightCommand implements Command { private light: Light; constructor(light: Light) { this.light = light; } public execute(): void { this.light.turnOff(); } public undo(): void { this.light.turnOn(); } } // 调用者 class RemoteControl { private command: Command | null = null; public setCommand(command: Command): void { this.command = command; } public pressButton(): void { if (this.command) { this.command.execute(); } } public pressUndo(): void { if (this.command) { this.command.undo(); } } } // 使用 function clientCode() { const light = new Light(); const turnOn = new TurnOnLightCommand(light); const turnOff = new TurnOffLightCommand(light); const remote = new RemoteControl(); // 打开灯 remote.setCommand(turnOn); remote.pressButton(); // 关闭灯 remote.setCommand(turnOff); remote.pressButton(); // 撤销操作 remote.pressUndo(); } // 执行客户端代码 clientCode();\"]},\"96\":{\"h\":\"备忘录模式\",\"t\":[\"备忘录模式是一种行为型设计模式，它允许在不暴露对象实现细节的情况下，保存和恢复对象的状态。该模式使得对象能够恢复到之前的状态，实现撤销和重做操作。\",\"备忘录（Memento）: 存储对象的内部状态的类。\",\"发起人（Originator）: 负责创建备忘录和恢复状态的对象。\",\"管理员（Caretaker）: 管理备忘录的对象，负责保存和恢复备忘录。\"]},\"97\":{\"h\":\"优点\",\"t\":[\"封装性: 备忘录模式不暴露对象的内部状态。\",\"灵活性: 可以在需要时恢复对象的状态。\"]},\"98\":{\"h\":\"使用场景\",\"t\":[\"当需要在对象状态变化时保存状态，以便后续恢复。\",\"当需要实现撤销和重做功能时。\",\"// 备忘录 class Memento { private state: string; constructor(state: string) { this.state = state; } public getState(): string { return this.state; } } // 发起人 class Originator { private state: string; public setState(state: string): void { this.state = state; console.log(`Originator: Setting state to ${state}`); } public saveState(): Memento { console.log(`Originator: Saving state to Memento`); return new Memento(this.state); } public restoreState(memento: Memento): void { this.state = memento.getState(); console.log(`Originator: State after restoring from Memento: ${this.state}`); } } // 管理员 class Caretaker { private mementos: Memento[] = []; public addMemento(memento: Memento): void { this.mementos.push(memento); } public getMemento(index: number): Memento { return this.mementos[index]; } } // 使用 function clientCode() { const originator = new Originator(); const caretaker = new Caretaker(); originator.setState('State 1'); caretaker.addMemento(originator.saveState()); // 保存状态 originator.setState('State 2'); caretaker.addMemento(originator.saveState()); // 保存状态 originator.setState('State 3'); // 恢复到之前的状态 originator.restoreState(caretaker.getMemento(1)); // 恢复到 State 2 } // 执行客户端代码 clientCode();\"]},\"99\":{\"h\":\"状态模式\",\"t\":[\"状态模式是一种行为型设计模式，它允许一个对象在其内部状态改变时改变其行为。状态模式将状态的行为封装在独立的状态类中，使得对象可以在不同状态下表现出不同的行为。\",\"状态接口（State）: 定义了与状态相关的行为接口。\",\"具体状态（ConcreteState）: 实现状态接口，定义具体的状态行为。\",\"上下文（Context）: 持有一个状态对象，并在其状态改变时委托状态对象来处理请求。\"]},\"100\":{\"h\":\"优点\",\"t\":[\"封装状态: 将状态相关的行为封装在状态类中，简化上下文类。\",\"易于扩展: 可以通过添加新状态类来扩展新的行为，而无需修改现有代码。\"]},\"101\":{\"h\":\"使用场景\",\"t\":[\"当一个对象的行为依赖于其状态，并且其状态在运行时会改变时。\",\"当需要在多个状态之间切换时。\",\"// 状态接口 interface State { handle(context: Context): void; } // 上下文 class Context { private state: State; constructor(state: State) { this.state = state; } public setState(state: State): void { this.state = state; } public request(): void { this.state.handle(this); // 委托请求给当前状态 } } // 具体状态 A class ConcreteStateA implements State { public handle(context: Context): void { console.log(\\\"Handling request in State A.\\\"); context.setState(new ConcreteStateB()); // 切换到状态 B } } // 具体状态 B class ConcreteStateB implements State { public handle(context: Context): void { console.log(\\\"Handling request in State B.\\\"); context.setState(new ConcreteStateA()); // 切换到状态 A } } // 使用 function clientCode() { const context = new Context(new ConcreteStateA()); context.request(); // 处理请求并切换到状态 B context.request(); // 处理请求并切换到状态 A context.request(); // 处理请求并切换到状态 B } // 执行客户端代码 clientCode();\"]},\"102\":{\"h\":\"访问者模式\",\"t\":[\"访问者模式是一种行为型设计模式，它允许在不改变对象结构的前提下，定义新的操作。通过将这些操作封装在访问者对象中，访问者模式使得可以对一组对象进行操作，而不需要修改这些对象的类。\",\"访问者接口（Visitor）: 定义对每个具体元素类的访问操作。\",\"具体访问者（ConcreteVisitor）: 实现访问者接口，定义具体的操作。\",\"元素接口（Element）: 定义接受访问者的方法。\",\"具体元素（ConcreteElement）: 实现元素接口，定义具体的元素数据。\",\"对象结构（ObjectStructure）: 维护一个元素集合，并可以遍历这些元素。\"]},\"103\":{\"h\":\"优点\",\"t\":[\"灵活性: 可以在不修改元素类的情况下添加新操作。\",\"集中性: 将操作集中在访问者中，避免了在各个元素中重复实现。\"]},\"104\":{\"h\":\"使用场景\",\"t\":[\"当需要对一组对象进行多种不同操作时。\",\"当需要在不改变对象结构的情况下，增加新的操作时。\",\"// 访问者接口 interface Visitor { visitConcreteElementA(element: ConcreteElementA): void; visitConcreteElementB(element: ConcreteElementB): void; } // 元素接口 interface Element1 { accept(visitor: Visitor): void; } // 具体元素 A class ConcreteElementA implements Element1 { public accept(visitor: Visitor): void { visitor.visitConcreteElementA(this); } public operationA(): string { return \\\"ConcreteElementA\\\"; } } // 具体元素 B class ConcreteElementB implements Element1 { public accept(visitor: Visitor): void { visitor.visitConcreteElementB(this); } public operationB(): string { return \\\"ConcreteElementB\\\"; } } // 具体访问者 class ConcreteVisitor implements Visitor { public visitConcreteElementA(element: ConcreteElementA): void { console.log(`Visited ${element.operationA()}`); } public visitConcreteElementB(element: ConcreteElementB): void { console.log(`Visited ${element.operationB()}`); } } // 对象结构 class ObjectStructure { private elements: Element[] = []; public add(element: Element): void { this.elements.push(element); } public accept(visitor: Visitor): void { for (const element of this.elements) { element.accept(visitor); } } } // 使用 function clientCode() { const objectStructure = new ObjectStructure(); objectStructure.add(new ConcreteElementA()); objectStructure.add(new ConcreteElementB()); const visitor = new ConcreteVisitor(); objectStructure.accept(visitor); // 访问所有元素 } // 执行客户端代码 clientCode();\"]},\"105\":{\"h\":\"中介者模式\",\"t\":[\"中介者模式是一种行为型设计模式，它通过定义一个中介对象来封装一系列对象之间的交互，使得对象之间不直接通信，而是通过中介者进行交互。这有助于降低对象之间的耦合度，提高系统的灵活性和可维护性。\",\"中介者接口（Mediator）: 定义了与各个同事对象的交互接口。\",\"具体中介者（ConcreteMediator）: 实现中介者接口，协调各个同事对象的交互。\",\"同事接口（Colleague）: 定义同事对象的接口。\",\"具体同事（ConcreteColleague）: 实现同事接口，包含中介者的引用并通过中介者与其他同事交互。\"]},\"106\":{\"h\":\"优点\",\"t\":[\"降低耦合: 同事对象之间不直接通信，减少了依赖关系。\",\"集中控制: 所有交互逻辑集中在中介者中，易于管理和扩展。\"]},\"107\":{\"h\":\"使用场景\",\"t\":[\"当一个系统中对象之间存在复杂的交互关系时。\",\"当希望通过一个中介对象来简化对象间的通信时。\",\"// 中介者接口 interface Mediator { send(message: string, colleague: Colleague): void; } // 同事接口 abstract class Colleague { protected mediator: Mediator; constructor(mediator: Mediator) { this.mediator = mediator; } public abstract receive(message: string): void; } // 具体同事 A class ConcreteColleagueA extends Colleague { public send(message: string): void { console.log(`Colleague A sending: ${message}`); this.mediator.send(message, this); } public receive(message: string): void { console.log(`Colleague A received: ${message}`); } } // 具体同事 B class ConcreteColleagueB extends Colleague { public send(message: string): void { console.log(`Colleague B sending: ${message}`); this.mediator.send(message, this); } public receive(message: string): void { console.log(`Colleague B received: ${message}`); } } // 具体中介者 class ConcreteMediator implements Mediator { private colleagueA: ConcreteColleagueA; private colleagueB: ConcreteColleagueB; constructor(colleagueA: ConcreteColleagueA, colleagueB: ConcreteColleagueB) { this.colleagueA = colleagueA; this.colleagueB = colleagueB; } public send(message: string, colleague: Colleague): void { if (colleague === this.colleagueA) { this.colleagueB.receive(message); } else if (colleague === this.colleagueB) { this.colleagueA.receive(message); } } } // 使用 function clientCode() { const colleagueA = new ConcreteColleagueA(null); const colleagueB = new ConcreteColleagueB(null); const mediator = new ConcreteMediator(colleagueA, colleagueB); // 设置中介者 colleagueA.mediator = mediator; colleagueB.mediator = mediator; // 发送消息 colleagueA.send(\\\"Hello, B!\\\"); colleagueB.send(\\\"Hello, A!\\\"); } // 执行客户端代码 clientCode();\"]},\"108\":{\"h\":\"解释器模式\",\"t\":[\"解释器模式是一种行为型设计模式，它提供了一个语言的文法表示，并定义了该语言的解释器。通过使用解释器模式，可以为特定的语法构建解析和执行机制。\",\"抽象表达式（Expression）: 定义解释操作的接口。\",\"终结符表达式（TerminalExpression）: 实现抽象表达式接口，代表文法中的终结符。\",\"非终结符表达式（NonTerminalExpression）: 实现抽象表达式接口，代表文法中的非终结符。\",\"上下文（Context）: 存储解释所需的全局信息。\"]},\"109\":{\"h\":\"优点\",\"t\":[\"灵活性: 可以通过组合不同的表达式来扩展文法。\",\"清晰性: 使文法和解释逻辑分开，便于理解和维护。\"]},\"110\":{\"h\":\"使用场景\",\"t\":[\"当需要定义一种语言的文法，并需要解释其句子时。\",\"当需要设计一个简单的语言或表达式计算器时。\",\" // 抽象表达式 interface Expression { interpret(context: Context): boolean; } // 上下文 class Context { private data: { [key: string]: boolean } = {}; public set(key: string, value: boolean): void { this.data[key] = value; } public get(key: string): boolean { return this.data[key]; } } // 终结符表达式 class TerminalExpression implements Expression { private key: string; constructor(key: string) { this.key = key; } public interpret(context: Context): boolean { return context.get(this.key); } } // 非终结符表达式 class OrExpression implements Expression { private expr1: Expression; private expr2: Expression; constructor(expr1: Expression, expr2: Expression) { this.expr1 = expr1; this.expr2 = expr2; } public interpret(context: Context): boolean { return this.expr1.interpret(context) || this.expr2.interpret(context); } } // 使用 function clientCode() { const context = new Context(); context.set(\\\"A\\\", true); context.set(\\\"B\\\", false); const expression = new OrExpression(new TerminalExpression(\\\"A\\\"), new TerminalExpression(\\\"B\\\")); console.log(`Result: ${expression.interpret(context)}`); // 输出: Result: true } // 执行客户端代码 clientCode();\"]},\"111\":{\"c\":[\"JavaScript\",\"设计模式\"]},\"112\":{\"h\":\"深浅拷贝\"},\"113\":{\"h\":\"数据类型\"},\"114\":{\"h\":\"基础类型\",\"t\":[\"undefined 表示不存在定义，声明变量但没有初始化，这个变量的值就是undefined； 注意：在任何一个引用变量值设置为undefined都是错误的\",\"null ，表示一个值被定义了，定义为空值； 使用场景为 定义变量准备在将来用于保存对象；所以引用值可以是null而不会是undefined；\",\"undefined和null的区别：js诞生的时候只设置了null作为“无”的值。最初的设计是null是表示一个“无”的对象，转为数值时为0； | undefined表示“无”的原始值，转为数值时为NaN；红宝书上说引入undefined就是为了正式的区分空对象指针与未经初始化的变量，变量设置为null就是空对象指针，没有设置就是未经初始化！\",\"Boolean，字面值为true和false\",\"number，字面量格式可以是十进制、八进制（八进制第一位必须是0）、十六进制（前两位必须是0x）\",\"String 由零个或多个16位Unicode字符组成的字符序列\",\"symbol，ES5 的对象属性名都是字符串，这容易造成属性名的冲突。比如，你使用了一个他人提供的对象，但又想为这个对象添加新的方法（mixin 模式），新方法的名字就有可能与现有方法产生冲突。如果有一种机制，保证每个属性的名字都是独一无二的就好了，这样就从根本上防止属性名的冲突。这就是ES6 引入Symbol的原因\"]},\"115\":{\"h\":\"引用类型\",\"t\":[\"引用类型统称为object类型，细分的话有：Object 类型、Array 类型、Date 类型、RegExp 类型、Function 类型 等。\"]},\"116\":{\"h\":\"浅拷贝\",\"t\":[\"浅拷贝是创建一个新对象，这个对象有着原始对象属性值的一份精确拷贝。\",\"如果属性是基本类型，拷贝是就是基本类型是值，\",\"如果属性是引用类型，拷贝的就是内存地址，所以如果其中一个对象改变了这个地址，就会影响到另外一个对象。\"]},\"117\":{\"h\":\"实现方式\",\"t\":[\"Object.assign()\",\"lodash 的 _.clone() 方法\",\"... 运算符\",\"Array.prototype.slice() 方法\",\"Array.prototype.concat() 方法\"]},\"118\":{\"h\":\"示例\",\"t\":[\" var person = { name: 'sxj', hobby: ['1', ['2', '3', '4'], '5'] } function shallowCopy(obj) { var target = {} for (var i in obj) { if (obj.hasOwnProperty(i)) { target[i] = obj[i] } } return target } var person1 = shallowCopy(person) person1.name = 'wyj' //在浅拷贝中，name属于基本属性，是不会互相影响的 person1.hobby[0] = '9' //在浅拷贝中，数组属于引用对象所以拷贝的是他在内存中的地址，是会互相影响的 console.log(person); console.log(person1); //结果就是person和person1的名字不一样 但是hobby数组是一样的并且hobby[0]都变成了‘9’\"]},\"119\":{\"h\":\"深拷贝\",\"t\":[\"深拷贝是将一个对象总内存中完整的拷贝出来一份，从堆内存中开辟一个新的区域存放新对象，且修改新对象不会影响原对象。\"]},\"120\":{\"h\":\"实现方式\",\"t\":[\"JSON.parse(JSON.stringify()) 像functionDate 都没法拷贝 弊端较多\",\"递归的操作\",\"Jquery.entend()\",\"lodash 的 _.cloneDeep() 方法\"]},\"121\":{\"h\":\"示例\",\"t\":[\"var person = { name: 'sxj', hobby: ['1', ['2', '3', '4'], '5'] } function deepClone(obj) { var cloneObj = new obj.constructor() if (obj === null) return obj //在js中，null是一个对象 if (obj instanceof Date) return new Date(obj) if (obj instanceof RegExp) return new RegExp(obj) if (typeof obj !== 'object') return obj for (var i in obj) { if (obj.hasOwnProperty(i)) { cloneObj[i] = deepClone(obj[i]) } } return cloneObj } var person1 = deepClone(person) person1.name = 'wyj' person1.hobby[0] = '9' console.log(person); console.log(person1);\"]},\"122\":{\"c\":[\"JavaScript\"]},\"123\":{\"h\":\"防抖节流\"},\"124\":{\"h\":\"防抖\",\"t\":[\"后执行当持续触发事件，一定时间内没有再次触发事件，事件处理函数就会执行一次；如果在设定的事件内又出发了一次，那么就重新计时并不执行函数。\",\" var input = document.getElementById('input') //防抖函数 function debounce(delay: number) { let timer return function (value) { clearTimeout(timer) /* * 我们想清除的是setTimeout 我们应该要存储timer这个变量 * 所以timer变量需要保存在内存中 * 所以在触发之前需要清除之前的定时器 * timer存储在内存中就要涉及到内存的泄露和闭包 * */ timer = setTimeout(function () { console.log(value); }, delay) } } // 我们需要的是在键盘抬起后不再输入后的一秒之后触发函数打印 var debounceFunc = debounce(1000) // 这个是一个函数 input.addEventListener('keyup', function (e) { debounceFunc(e.target.value) })\"]},\"125\":{\"h\":\"实际应用\",\"t\":[\"输入框搜索\",\"按钮点击\",\"浏览器窗口缩放\",\"滚动条滚动\",\"表单验证\",\"鼠标移动\"]},\"126\":{\"h\":\"节流\",\"t\":[\"前执行当持续触发事件，一定时间内只能触发一次。\",\" function thro(wait: number, callback: Function) { /* * 就是要做到在一定的时间内只执行一次 * * */ let timeout return function () { //只要存在timeout 就无法进入这个函数执行 if (!timeout) { timeout = setTimeout(function () { callback() //执行完成之后 将timeout置空 timeout = null }, wait) } } } function handel() { console.log('执行'); } document.getElementById('button').onclick = thro(2000, handel)\"]},\"127\":{\"h\":\"区别\",\"t\":[\"他们都是可以防止一个函数被无意义的高频率调用\",\"函数节流：是确保函数特定的时间内至多执行一次。\",\"函数防抖：是函数在特定的时间内不被再调用后执行。\",\"函数节流：是确保函数特定的时间内至多执行一次。\",\"函数防抖：是函数在特定的时间内不被再调用后执行。\"]},\"128\":{\"c\":[\"JavaScript\"]},\"129\":{\"h\":\"Observer\",\"t\":[\"MutationObserver用于监听Dom对象的变更，包括节点属性的变化、子节点的增删改。\"]},\"130\":{\"h\":\"构造函数\",\"t\":[\"const observer = new MutationObserver(callback)\"]},\"131\":{\"h\":\"方法\",\"t\":[\"disconnect()\",\"阻止 MutationObserver 实例继续接收的通知，直到再次调用其 observe() 方法，该观察者对象包含的回调函数都不会再被调用。\",\"observe()\",\"配置 MutationObserver 在 DOM 更改匹配给定选项时，通过其回调函数开始接收通知。\",\"takeRecords()\",\"从 MutationObserver 的通知队列中删除所有待处理的通知，并将它们返回到 MutationRecord对象的新 Array 中。\"]},\"132\":{\"h\":\"示例\",\"t\":[\"// 选择需要观察变动的节点 const targetNode = document.getElementById(\\\"some-id\\\"); // 观察器的配置（需要观察什么变动） const config = {attributes: true, childList: true, subtree: true}; // 当观察到变动时执行的回调函数 const callback = function (mutationsList, observer) { // Use traditional 'for loops' for IE 11 for (let mutation of mutationsList) { if (mutation.type === \\\"childList\\\") { console.log(\\\"A child node has been added or removed.\\\"); } else if (mutation.type === \\\"attributes\\\") { console.log(\\\"The \\\" + mutation.attributeName + \\\" attribute was modified.\\\"); } } }; // 创建一个观察器实例并传入回调函数 const observer = new MutationObserver(callback); // 以上述配置开始观察目标节点 observer.observe(targetNode, config); // 之后，可停止观察 observer.disconnect();\"]},\"133\":{\"h\":\"IntersectionObserver\",\"t\":[\"IntersectionObserver提供一种异步观察目标元素与其祖先元素或者顶级文档视口交叉状态 一般用于某一个元素出现在视口中，懒加载等\"]},\"134\":{\"h\":\"构造函数\",\"t\":[\"const observer = new IntersectionObserver(callback, options);\"]},\"135\":{\"h\":\"属性\",\"t\":[\"IntersectionObserver.root\",\"测试交叉时，用作边界盒的元素或文档。如果构造函数未传入 root 或其值为null，则默认使用顶级文档的视口。\",\"IntersectionObserver.rootMargin\",\"计算交叉时添加到根边界盒的矩形偏移量，可以有效的缩小或扩大根的判定范围从而满足计算需要。此属性返回的值可能与调用构造函数时指定的值不同，因此可能需要更改该值，以匹配内部要求。所有的偏移量均可用 像素（px）或百分比（%）来表达，默认值为“0px 0px 0px 0px”。\",\"IntersectionObserver.thresholds\",\"一个包含阈值的列表，按升序排列，列表中的每个阈值都是监听对象的交叉区域与边界区域的比率。当监听对象的任何阈值被越过时，都会生成一个通知（Notification）。如果构造器未传入值，则默认值为 0。\"]},\"136\":{\"h\":\"方法\",\"t\":[\"IntersectionObserver.disconnect()\",\"使 IntersectionObserver 对象停止监听目标。\",\"IntersectionObserver.observe()\",\"使 IntersectionObserver 开始监听一个目标元素。\",\"IntersectionObserver.takeRecords()\",\"返回所有观察目标的 IntersectionObserverEntry 对象数组。\",\"IntersectionObserver.unobserve()\",\"使 IntersectionObserver 停止监听特定目标元素。\"]},\"137\":{\"h\":\"示例\",\"t\":[\"const intersectionObserver = new IntersectionObserver((entries) => { // 如果 intersectionRatio 为 0，则目标在视野外， // 我们不需要做任何事情。 if (entries[0].intersectionRatio <= 0) return; loadItems(10); console.log(\\\"Loaded new items\\\"); }); // 开始监听 intersectionObserver.observe(document.querySelector(\\\".scrollerFooter\\\"));\"]},\"138\":{\"h\":\"ResizeObserver\",\"t\":[\"ResizeObserver接口监视 Element 内容盒或边框盒或者 SVGElement 边界尺寸的变化。。\",\"提示\",\"内容盒是盒模型放置内容的部分，这意味着边框盒减去内边距和边框的宽度就是内容盒。边框盒包含内容、内边距和边框。有关进一步阐述\"]},\"139\":{\"h\":\"构造函数\",\"t\":[\"const observer = new ResizeObserver(callback);\"]},\"140\":{\"h\":\"方法\",\"t\":[\"ResizeObserver.disconnect()\",\"取消特定观察者目标上所有对 Element 的监听。\",\"ResizeObserver.observe()\",\"开始对指定 Element 的监听。\",\"ResizeObserver.unobserve()\",\"结束对指定 Element 的监听。\"]},\"141\":{\"h\":\"示例\",\"t\":[\"const h1Elem = document.querySelector(\\\"h1\\\"); const pElem = document.querySelector(\\\"p\\\"); const divElem = document.querySelector(\\\"body > div\\\"); const slider = document.querySelector('input[type=\\\"range\\\"]'); const checkbox = document.querySelector('input[type=\\\"checkbox\\\"]'); divElem.style.width = \\\"600px\\\"; slider.addEventListener(\\\"input\\\", () => { divElem.style.width = `${slider.value}px`; }); const resizeObserver = new ResizeObserver((entries) => { for (const entry of entries) { if (entry.contentBoxSize) { // Firefox implements `contentBoxSize` as a single content rect, rather than an array const contentBoxSize = Array.isArray(entry.contentBoxSize) ? entry.contentBoxSize[0] : entry.contentBoxSize; h1Elem.style.fontSize = `${Math.max( 1.5, contentBoxSize.inlineSize / 200, )}rem`; pElem.style.fontSize = `${Math.max( 1, contentBoxSize.inlineSize / 600, )}rem`; } else { h1Elem.style.fontSize = `${Math.max( 1.5, entry.contentRect.width / 200, )}rem`; pElem.style.fontSize = `${Math.max(1, entry.contentRect.width / 600)}rem`; } } console.log(\\\"Size changed\\\"); }); resizeObserver.observe(divElem); checkbox.addEventListener(\\\"change\\\", () => { if (checkbox.checked) { resizeObserver.observe(divElem); } else { resizeObserver.unobserve(divElem); } });\"]},\"142\":{\"c\":[\"JavaScript\"]},\"143\":{\"h\":\"Worker\"},\"144\":{\"h\":\"Web Worker\",\"t\":[\"Web Worker 是一种运行在主线程之外的 JavaScript 并行执行环境。通过 Web Worker，开发者可以将耗时的任务（如数据处理、文件解析等）从主线程中剥离，从而提高页面的响应速度和用户体验。\"]},\"145\":{\"h\":\"API\"},\"146\":{\"h\":\"创建Worker\",\"t\":[\"Frontmatter\",\"参数是包含 Worker 脚本的文件路径。需要注意的是，文件必须与主线程在同源下运行。\",\"const worker = new Worker(\\\"worker.js\\\");\"]},\"147\":{\"h\":\"发送消息到Worker\",\"t\":[\"主线程使用postMessage 方法向 Worker 发送消息。\",\"worker.postMessage({type: \\\"start\\\", data: \\\"Hello Worker!\\\"});\",\"提示\",\"发送的数据可以是任何可序列化的对象，例如字符串、数字、数组或 JSON 对象。\"]},\"148\":{\"h\":\"Worker 接收消息\",\"t\":[\"Worker 使用 onmessage 事件监听消息。\",\"self.onmessage = function (event) { console.log('Message from Main Thread:', event.data); };\"]},\"149\":{\"h\":\"Worker 发送消息到主线程\",\"t\":[\"Worker 使用 postMessage 方法将消息发送回主线程。\",\"self.postMessage({type: \\\"response\\\", data: \\\"Hello Main Thread!\\\"});\"]},\"150\":{\"h\":\"捕获错误\",\"t\":[\"主线程可以通过 onerror 捕获 Worker 抛出的错误。\",\"worker.onerror = function (error) { console.error('Worker error:', error.message); };\"]},\"151\":{\"h\":\"终止Worker\",\"t\":[\"主线程可以使用 terminate 方法终止 Worker。\",\"worker.terminate();\"]},\"152\":{\"h\":\"Worker 内部全局对象\",\"t\":[\"在 Worker 内部，全局对象是 self，与主线程中的 window 不同。常用的方法包括：\"]},\"153\":{\"h\":\"示例\",\"t\":[\"主线程\",\"const worker = new Worker('worker.js'); worker.postMessage(\\\"我是主线程\\\"); worker.onmessage = function (event) { console.log('worker 回复:', event.data); }; worker.onerror = function (error) { console.error('Worker 错误:', error.message); };\",\"Worker 线程（worker.js）\",\"self.onmessage = function (event) { console.log('主线程发送:', event.data); self.postMessage(\\\"我是 Worker 线程\\\"); };\"]},\"154\":{\"h\":\"使用场景\",\"t\":[\"大量复杂计算任务\",\"数据处理和解析\",\"文件上传和下载\"]},\"155\":{\"h\":\"Shared Worker\",\"t\":[\"是一种特殊类型的 Web Worker，它允许在多个浏览上下文（如多个窗口、iframe 或其他 worker）之间共享一个 Worker。与普通 Worker 不同，SharedWorker 具有独立的全局作用域，即 SharedWorkerGlobalScope\"]},\"156\":{\"h\":\"特点\",\"t\":[\"跨页面通信：SharedWorker 可以在多个页面或 iframe 中运行，从而实现跨页面的通信。这对于需要在多个页面之间共享数据或状态的应用场景非常有用\",\"独立于页面的生命周期：SharedWorker 的生命周期独立于页面，这意味着即使关闭了创建 SharedWorker 的页面，SharedWorker 仍然可以继续运行，直到所有相关页面都关闭\",\"同源策略：要使 SharedWorker 连接到多个不同的页面，这些页面必须是同源的（相同的协议、主机和端口）\"]},\"157\":{\"h\":\"API\"},\"158\":{\"h\":\"创建Worker\",\"t\":[\"const worker = new SharedWorker(\\\"worker.js\\\");\",\"通信方式同Web Worker。\"]},\"159\":{\"h\":\"使用场景\",\"t\":[\"跨页面登录\",\"多页面通信\"]},\"160\":{\"h\":\"Service Worker\",\"t\":[\"Service Worker 首先是一个运行在后台的 Worker 线程，然后它会长期运行，充当一个服务，很适合那些不需要网页或用户互动的功能。它的最常见用途就是拦截和处理网络请求。\",\"Service Worker 是一个后台运行的脚本，充当一个代理服务器，拦截用户发出的网络请求，比如加载脚本和图片。Service Worker 可以修改用户的请求，或者直接向用户发出回应，不用联系服务器，这使得用户可以在离线情况下使用网络应用。它还可以在本地缓存资源文件，直接从缓存加载文件，因此可以加快访问速度。\"]},\"161\":{\"h\":\"注册Service Worker\",\"t\":[\"if ('serviceWorker' in navigator) { window.addEventListener('load', function () { navigator.serviceWorker.register('/service-worker.js'); }); }\"]},\"162\":{\"h\":\"示例\",\"t\":[\"self.addEventListener('fetch', (event) => { event.waitUntil(() => { if (event.request.url.includes('/product')) { let productId = event.data.productId let productCount = getProductData(productId) indexedDB.open('store', 1, (db) => { let productStore = db.createObjectStore('products', {keyPath: 'id'}) productStore.put({id: productId, count: ++productCount}) }) } }) })\"]},\"163\":{\"h\":\"使用步骤\"},\"164\":{\"h\":\"注册\",\"t\":[\" navigator.serviceWorker.register('sw.js').then(() => { console.info('注册成功') }).catch((err) => { console.error('注册失败') });\"]},\"165\":{\"c\":[\"JavaScript\"]},\"166\":{\"h\":\"文件预览\"},\"167\":{\"h\":\"\"},\"168\":{\"c\":[\"JavaScript\"]},\"169\":{\"h\":\"Git 基础\"},\"170\":{\"h\":\"文件状态\",\"t\":[\"工作区\",\"相当于本地写代码的区域，如git clone 一个项目到本地，相当于本地克隆了远程仓库项目的一个副本。\",\"暂存区\",\"暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中\",\"本地仓库\",\"提交更新，找到暂存区域文件，将快照永久性存储到Git本地仓库\",\"远程仓库\",\"远程仓库是一个Git服务器，保存了所有的版本信息，其他人可以通过克隆、拉取等方式获取到本地仓库的代码。\",\"img.png\"]},\"171\":{\"h\":\"Git 基本命令\"},\"172\":{\"h\":\"用户信息配置\",\"t\":[\"git config --global user.name \\\"[name]\\\" git config --global user.email \\\"[email address]\\\"\"]},\"173\":{\"h\":\"项目初始化\",\"t\":[\"git init [project-name] git colne [url]\"]},\"174\":{\"h\":\"常用操作\",\"t\":[\"Git init 初始化仓库，默认为master分支\",\"Git add . 提交全部文件修改到缓存区\",\"Git add [具体某个文件路径+全名] 提交某些文件到缓存区\",\"Git diff 查看当前代码add 后，会add 哪些内容\",\"Git diff --staged 查看现在commit提交后，会提交哪些内容\",\"Git status 查看当前分支状态\",\"Git pull [远程仓库名] [远程分支名] 拉取远程仓库的分支与本地当前分支合并\",\"Git pull [远程仓库名] [远程分支名]:[本地分支名] 拉取远程仓库的分支与本地某个分支合并\",\"Git commit -m \\\"注释\\\" 提交代码到本地仓库，并写提交注释\",\"Git commit -v 提交时显示所有diff 信息\",\"Git commit --amend [file1] [file2] 重做了上一次commit ，并包括指定文件的新变化关于提交信息的格式，可以遵循以下的规则：\",\"关于提交信息的格式，遵循以下的规则：\",\"feat：新特性\",\"fix： 修改bug\",\"refactor： 代码重构\",\"docs：文档修改\",\"style：代码格式修改，注意不是css修改\",\"test：测试用例修改\",\"chore：其他修改，比如构建流程，依赖管理\"]},\"175\":{\"h\":\"分支操作\",\"t\":[\"Git branch 查看本地所有分支\",\"Git branch -r 查看远程所有分支\",\"Git branch -a 查看本地和远程所有分支\",\"Git merge <分支名> 合并分支\",\"Git merge --abort 合并分支出现冲突，取消合并，一切回到合并前的状态。\",\"Git branch <新的分支> 基于当前分支，新建一个分支\",\"Git checkout --orphan <新的分支> 新建一个空分支（会保留之前分支的所有文件）\",\"Git branch -D <分支名> 删除本地某个分支\",\"Git push origin -delete <分支名> 删除远程分支\",\"Git branch <新的分支> <提交的ID> 从提交历史回复删除的某个分支\",\"Git branch -m <原分支> <新分支> 分支更名\",\"Git checkout <分支名> 切换到本地某个分支\",\"Git checkout <远程库>/<分支名> 切换到线上某个分支\",\"git checkout -b <新分支名> 把基于当前分支新建分支，并切换为这个分支\"]},\"176\":{\"h\":\"远程仓库操作\",\"t\":[\"Git fetch <remote> 下载远程仓库的所有变动\",\"Git remote -v 显示所有的远程仓库\",\"Git pull <remote> <branch> 拉取远程仓库的分支与本地当前分支合并\",\"Git fetch 获取线上最新版信息记录，不合并\",\"Git push <remote> <branch> 上传本地指定分支到远程仓库\",\"Git push <remote> --force 强行推送当前分支到远程仓库，即使有冲突\",\"Git push <remote> --all 推送所有分支到远程仓库\"]},\"177\":{\"h\":\"撤销操作\",\"t\":[\"Git checkout <file> 恢复暂存区的指定文件到工作区\",\"Git checkout <commit> <file> 恢复某个commit的指定文件到暂存区和工作区\",\"Git checkout . 恢复暂存区的所有文件到工作区\",\"Git reset [commit] 重置当前分支的指针为指定commit 同时重置暂存区，但工作区不变。\",\"Git reset --hard 重置暂存区与工作区，与上一次commit 保持一致\",\"Git reset <file> 重置暂存区指定文件，与上一次commit 保持一致，但工作区保持不变\",\"Git revert [commit] 后者的所有变化都将被前者抵消，并且应用到当前分支\"]},\"178\":{\"h\":\"存储操作\",\"t\":[\"Git stash 暂时将未提交的变化移除\",\"Git stash pop 取出储藏中最后存入的工作状态进行恢复，会删除储藏。\",\"Git stash list 查看所有储藏中的工作\",\"Git stash apply <储藏的名称> 取出储藏中对应的工作状态进行恢复，不会删除储藏\",\"Git stash clear 清空所有储藏的工作\",\"Git stash drop <储藏的名称> 删除对应的某个储藏\"]},\"179\":{\"c\":[\"Git\"]},\"180\":{\"h\":\"global.d.ts\",\"t\":[\"主要用于声明全局类型和模块\"]},\"181\":{\"h\":\"变量声明\",\"t\":[\"declare const MY_GLOBAL_VAR: string;\"]},\"182\":{\"h\":\"模块声明\",\"t\":[\"如果你使用的第三方库没有类型定义，可以在此文件中声明模块。\",\"declare module 'my-module'\"]},\"183\":{\"h\":\"接口声明\",\"t\":[\"interface Window { myCustomMethod: () => void; }\"]},\"184\":{\"h\":\"扩展现有类型\",\"t\":[\"interface Array<T> { customMethod(): void; }\"]},\"185\":{\"h\":\"命名空间声明\",\"t\":[\"declare namespace MyNamespace { interface MyInterface { prop: string; } function myFunction(): void; }\"]},\"186\":{\"h\":\"常用\",\"t\":[\"global.d.ts\",\"declare global { /** * 全局自定义环境变量的类型声明 */ interface ViteEnv { VITE_PORT: number; VITE_PUBLIC_PATH: string; VITE_ROUTER_HISTORY: string; VITE_CDN: boolean; VITE_HIDE_HOME: string; VITE_COMPRESSION: ViteCompression; VITE_BASE_URL?: string; VITE_APP_ENV: string; } } // 此文件跟同级目录的 global.d.ts 文件一样也是全局类型声明，只不过这里存放一些零散的全局类型，无需引入直接在 .vue 、.ts 、.tsx 文件使用即可获得类型提示 type RefType<T> = T | null; type EmitType = (event: string, ...args: any[]) => void; type TargetContext = \\\"_self\\\" | \\\"_blank\\\"; type ComponentRef<T extends HTMLElement = HTMLDivElement> = ComponentElRef<T> | null; type ElRef<T extends HTMLElement = HTMLDivElement> = Nullable<T>; type ForDataType<T> = { [P in T]?: ForDataType<T[P]>; }; type AnyFunction<T> = (...args: any[]) => T; type PropType<T> = VuePropType<T>; type Writable<T> = { -readonly [P in keyof T]: T[P]; }; type Nullable<T> = T | null; type NonNullable<T> = T extends null | undefined ? never : T; type Recordable<T = any> = Record<string, T>; type ReadonlyRecordable<T = any> = { readonly [key: string]: T; }; type Indexable<T = any> = { [key: string]: T; }; type DeepPartial<T> = { [P in keyof T]?: DeepPartial<T[P]>; }; type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never }; type Exclusive<T, U> = (Without<T, U> & U) | (Without<U, T> & T); type TimeoutHandle = ReturnType<typeof setTimeout>; type IntervalHandle = ReturnType<typeof setInterval>; type Effect = \\\"light\\\" | \\\"dark\\\"; interface ChangeEvent extends Event { target: HTMLInputElement; } interface WheelEvent { path?: EventTarget[]; } interface ImportMetaEnv extends ViteEnv { __: unknown; } interface Fn<T = any, R = T> { (...arg: T[]): R; } interface PromiseFn<T = any, R = T> { (...arg: T[]): Promise<R>; } interface ComponentElRef<T extends HTMLElement = HTMLDivElement> { $el: T; } type Tree = { label: string; value: any; children?: Tree[]; [property: string]: any; }; type TreeNode = Tree; type Similar = { label: string; prop: string; unit?: ((value: any) => string) | string; format?: (value: any) => string | number; icon?: string; }; type Option = { label: string; value: any; [property: string]: any; }; type Arrayable<T> = T | T[];\"]},\"187\":{\"c\":[\"TypeScript\"]},\"188\":{\"h\":\"TS简介\"},\"189\":{\"h\":\"概述\",\"t\":[\"TypeScript（简称 TS）是微软公司开发的一种基于 JavaScript （简称 JS）语言的编程语言。 它的目的并不是创造一种全新语言，而是增强 JavaScript 的功能，使其更适合多人合作的企业级项目。 TypeScript 可以看成是 JavaScript 的超集（superset），即它继承了后者的全部语法，所有 JavaScript 脚本都可以当作 TypeScript 脚本（但是可能会报错），此外它再增加了一些自己的语法。 TypeScript 对 JavaScript 添加的最主要部分，就是一个独立的类型系统。\"]},\"190\":{\"h\":\"类型的概念\",\"t\":[\"类型（type）指的是一组具有相同特征的值。如果两个值具有某种共同的特征，就可以说，它们属于同一种类型。 举例来说，123和456这两个值，共同特征是都能进行数值运算，所以都属于“数值”（number）这个类型。 一旦确定某个值的类型，就意味着，这个值具有该类型的所有特征，可以进行该类型的所有运算。凡是适用该类型的地方，都可以使用这个值；凡是不适用该类型的地方，使用这个值都会报错。 可以这样理解，类型是人为添加的一种编程约束和用法提示。 主要目的是在软件开发过程中，为编译器和开发工具提供更多的验证和帮助，帮助提高代码质量，减少错误。 下面是一段简单的 TypeScript 代码，演示一下类型系统的作用。\",\"function addOne(n: number) { return n + 1; }\",\"上面示例中，函数addOne()有一个参数n，类型为数值（number），表示这个位置只能使用数值，传入其他类型的值就会报错。\",\"addOne('hello') // 报错\",\"上面示例中，函数addOne()传入了一个字符串hello，TypeScript 发现类型不对，就报错了，指出这个位置只能传入数值，不能传入字符串。 JavaScript 语言就没有这个功能，不会检查类型对不对。开发阶段很可能发现不了这个问题，代码也许就会原样发布，导致用户在使用时遇到错误。 作为比较，TypeScript 是在开发阶段报错，这样有利于提早发现错误，避免使用时报错。另一方面，函数定义里面加入类型，具有提示作用，可以告诉开发者这个函数怎么用。\"]},\"191\":{\"h\":\"动态类型与静态类型\",\"t\":[\"前面说了，TypeScript 的主要功能是为 JavaScript 添加类型系统。大家可能知道，JavaScript 语言本身就有一套自己的类型系统，比如数值123和字符串Hello。 但是，JavaScript 的类型系统非常弱，而且没有使用限制，运算符可以接受各种类型的值。在语法上，JavaScript 属于动态类型语言。 请看下面的 JavaScript 代码。\",\"// 例一let x = 1; x = 'hello'; // 例二let y = { foo: 1 }; delete y.foo; y.bar = 2;\",\"上面的例一，变量x声明时，值的类型是数值，但是后面可以改成字符串。所以，无法提前知道变量的类型是什么，也就是说，变量的类型是动态的。 上面的例二，变量y是一个对象，有一个属性foo，但是这个属性是可以删掉的，并且还可以新增其他属性。所以，对象有什么属性，这个属性还在不在，也是动态的，没法提前知道。 正是因为存在这些动态变化，所以 JavaScript 的类型系统是动态的，不具有很强的约束性。这对于提前发现代码错误，非常不利。 TypeScript 引入了一个更强大、更严格的类型系统，属于静态类型语言。 上面的代码在 TypeScript 里面都会报错。\",\"// 例一let x = 1; x = 'hello'; // 报错// 例二let y = { foo: 1 }; delete y.foo; // 报错 y.bar = 2; // 报错\",\"上面示例中，例一的报错是因为变量赋值时，TypeScript 已经推断确定了类型，后面就不允许再赋值为其他类型的值，即变量的类型是静态的。例二的报错是因为对象的属性也是静态的，不允许随意增删。 TypeScript 的作用，就是为 JavaScript 引入这种静态类型特征。\"]},\"192\":{\"h\":\"静态类型的优点\",\"t\":[\"静态类型有很多好处，这也是 TypeScript 想要达到的目的。\",\"有利于代码的静态分析。 有了静态类型，不必运行代码，就可以确定变量的类型，从而推断代码有没有错误。这就叫做代码的静态分析。 这对于大型项目非常重要，单单在开发阶段运行静态检查，就可以发现很多问题，避免交付有问题的代码，大大降低了线上风险。\",\"有利于发现错误。 由于每个值、每个变量、每个运算符都有严格的类型约束，TypeScript 就能轻松发现拼写错误、语义错误和方法调用错误，节省程序员的时间。\",\"let obj = {message: ''}; console.log(obj.messege); // 报错\",\"上面示例中，不小心把message拼错了，写成messege。TypeScript 就会报错，指出没有定义过这个属性。JavaScript 遇到这种情况是不报错的。\",\"const a = 0; const b = true; const result = a + b; // 报错\",\"上面示例是合法的 JavaScript 代码，但是没有意义，不应该将数值a与布尔值b相加。TypeScript 就会直接报错，提示运算符+不能用于数值和布尔值的相加。\",\"function hello() { return 'hello world'; } hello().find('hello'); // 报错\",\"上面示例中，hello()返回的是一个字符串，TypeScript 发现字符串没有find()方法，所以报错了。如果是 JavaScript，只有到运行阶段才会报错。\",\"更好的 IDE 支持，做到语法提示和自动补全。 IDE（集成开发环境，比如 VSCode）一般都会利用类型信息，提供语法提示功能（编辑器自动提示函数用法、参数等）和自动补全功能（只键入一部分的变量名或函数名，编辑器补全后面的部分）。\",\"提供了代码文档。 类型信息可以部分替代代码文档，解释应该如何使用这些代码，熟练的开发者往往只看类型，就能大致推断代码的作用。借助类型信息，很多工具能够直接生成文档。\",\"有助于代码重构。 修改他人的 JavaScript 代码，往往非常痛苦，项目越大越痛苦，因为不确定修改后是否会影响到其他部分的代码。 类型信息大大减轻了重构的成本。一般来说，只要函数或对象的参数和返回值保持类型不变，就能基本确定，重构后的代码也能正常运行。如果还有配套的单元测试，就完全可以放心重构。越是大型的、多人合作的项目，类型信息能够提供的帮助越大。 综上所述，TypeScript 有助于提高代码质量，保证代码安全，更适合用在大型的企业级项目。这就是为什么大量 JavaScript 项目转成 TypeScript 的原因。\"]},\"193\":{\"h\":\"静态类型的缺点\",\"t\":[\"静态类型也存在一些缺点。\",\"丧失了动态类型的代码灵活性。 动态类型有非常高的灵活性，给予程序员很大的自由，静态类型将这些灵活性都剥夺了。\",\"增加了编程工作量。 有了类型之后，程序员不仅需要编写功能，还需要编写类型声明，确保类型正确。这增加了不少工作量，有时会显著拖长项目的开发时间。\",\"更高的学习成本。 类型系统通常比较复杂，要学习的东西更多，要求开发者付出更高的学习成本。\",\"引入了独立的编译步骤。 原生的 JavaScript 代码，可以直接在 JavaScript 引擎运行。添加类型系统以后，就多出了一个单独的编译步骤，检查类型是否正确，并将 TypeScript 代码转成 JavaScript 代码，这样才能运行。\",\"兼容性问题。 TypeScript 依赖 JavaScript 生态，需要用到很多外部模块。但是，过去大部分 JavaScript 项目都没有做 TypeScript 适配，虽然可以自己动手做适配，不过使用时难免还是会有一些兼容性问题。 总的来说，这些缺点使得 TypeScript 不一定适合那些小型的、短期的个人项目。\"]},\"194\":{\"c\":[\"TypeScript\"]},\"195\":{\"h\":\"基本用法\"},\"196\":{\"h\":\"类型声明\",\"t\":[\"TypeScript 代码最明显的特征，就是为 JavaScript 变量加上了类型声明\",\"let foo: string;\",\"上面示例中，变量foo的后面使用冒号，声明了它的类型为string。 类型声明的写法，一律为在标识符后面添加“冒号 + 类型”。函数参数和返回值，也是这样来声明类型。\",\"function toString(num: number): string { return String(num); }\",\"上面示例中，函数toString()的参数num的类型是number。参数列表的圆括号后面，声明了返回值的类型是string。 注意，变量的值应该与声明的类型一致，如果不一致，TypeScript 就会报错。\"]},\"197\":{\"h\":\"类型推断\",\"t\":[\"类型声明并不是必需的，如果没有，TypeScript 会自己推断类型。\",\"let foo = 123;\",\"上面示例中，变量foo并没有类型声明，TypeScript 就会推断它的类型。由于它被赋值为一个数值，因此 TypeScript 推断它的类型为number。 后面，如果变量foo更改为其他类型的值，跟推断的类型不一致，TypeScript 就会报错\",\"TypeScript 也可以推断函数的返回值。\",\"function toString(num: number) { return String(num); }\"]},\"198\":{\"h\":\"TypeScript Playground\",\"t\":[\"最简单的 TypeScript 使用方法，就是使用官网的在线编译页面，叫做\",\"TypeScript Playground\"]},\"199\":{\"h\":\"Ts-node 模块\",\"t\":[\"ts-node 是一个非官方的 npm 模块，可以直接运行 TypeScript 代码。 使用时，可以先全局安装它。\",\"$ npm install -g ts-node\",\"安装后，就可以直接运行 TypeScript 脚本。\",\"$ ts-node script.ts\",\"上面命令运行了 TypeScript 脚本script.ts，给出运行结果。 如果不安装 ts-node，也可以通过 npx 调用它来运行 TypeScript 脚本。\",\"$ npx ts-node script.ts\",\"上面命令中，npx会在线调用 ts-node，从而在不安装的情况下，运行script.ts。 如果执行 ts-node 命令不带有任何参数，它会提供一个 TypeScript 的命令行 REPL 运行环境，你可以在这个环境中输入 TypeScript 代码，逐行执行。\",\"$ ts-node\",\"上面示例中，单独运行ts-node命令，会给出一个大于号，这就是 TypeScript 的 REPL 运行环境，可以逐行输入代码运行。\",\"$ ts-node const twice = (x:string) => x + x; twice('abc') 'abcabc' >\",\"上面示例中，在 TypeScript 命令行 REPL 环境中，先输入一个函数twice，然后调用该函数，就会得到结果。 要退出这个 REPL 环境，可以按下 Ctrl + d，或者输入.exit。 如果只是想简单运行 TypeScript 代码看看结果，ts-node 不失为一个便捷的方法。\"]},\"200\":{\"c\":[\"TypeScript\"]},\"201\":{\"h\":\"特殊类型\"},\"202\":{\"h\":\"any类型\"},\"203\":{\"h\":\"基本意义\",\"t\":[\"any 类型表示没有任何限制，该类型的变量可以赋予任意类型的值。\",\"let x: any; x = 1; // 正确 x = 'foo'; // 正确 x = true; // 正确\",\"上面示例中，变量x的类型是any，就可以被赋值为任意类型的值。 变量类型一旦设为any ，TypeScript实际上会关闭这个变量的类型检查。即使有明显的类型错误，只要句法正确，都不会报错。\",\"let x: any = 'hello'; x(1) // 不报错 x.foo = 100; // 不报错\",\"上面示例中，变量x的值是一个字符串，但是把它当作函数调用，或者当作对象读取任意属性，TypeScript 编译时都不报错。 原因就是x的类型是any，TypeScript 不对其进行类型检查。由于这个原因，应该尽量避免使用any类型，否则就失去了使用 TypeScript 的意义。 实际开发中，any类型主要适用以下两个场合。\",\"出于特殊原因，需要关闭某些变量的类型检查，就可以把该变量的类型设为any。\",\"为了适配以前老的 JavaScript 项目，让代码快速迁移到 TypeScript，可以把变量类型设为any。有些年代很久的大型 JavaScript 项目，尤其是别人的代码，很难为每一行适配正确的类型，这时你为那些类型复杂的变量加上any，TypeScript 编译时就不会报错。 总之，TypeScript 认为，只要开发者使用了any类型，就表示开发者想要自己来处理这些代码，所以就不对any类型进行任何限制，怎么使用都可以。 从集合论的角度看，any类型可以看成是所有其他类型的全集，包含了一切可能的类型。TypeScript 将这种类型称为“顶层类型”（top type），意为涵盖了所有下层。\",\"类型推断问题 对于开发者没有指定类型、TypeScript 必须自己推断类型的那些变量，如果无法推断出类型，TypeScript 就会认为该变量的类型是any。\",\"function add(x, y) { return x + y; } add(1, [1, 2, 3]) // 不报错\",\"上面示例中，函数add()的参数变量x和y，都没有足够的信息，TypeScript 无法推断出它们的类型，就会认为这两个变量和函数返回值的类型都是any。以至于后面就不再对函数add()进行类型检查了，怎么用都可以。 这显然是很糟糕的情况，所以对于那些类型不明显的变量，一定要显式声明类型，防止被推断为any。 TypeScript 提供了一个编译选项noImplicitAny，打开该选项，只要推断出any类型就会报错。\",\"$ tsc --noImplicitAny app.ts\",\"上面命令使用了noImplicitAny编译选项进行编译，这时上面的函数add()就会报错。 这里有一个特殊情况，即使打开了noImplicitAny，使用let和var命令声明变量，但不赋值也不指定类型，是不会报错的。\",\"var x; // 不报错 let y; // 不报错\",\"上面示例中，变量x和y声明时没有赋值，也没有指定类型，TypeScript 会推断它们的类型为any。这时即使打开了noImplicitAny，也不会报错。\",\"let x; x = 123; x = {foo: 'hello'};\",\"上面示例中，变量x的类型推断为any，但是不报错，可以顺利通过编译。 由于这个原因，建议使用let和var声明变量时，如果不赋值，就一定要显式声明类型，否则可能存在安全隐患。 const命令没有这个问题，因为 JavaScript 语言规定const声明变量时，必须同时进行初始化（赋值）。const x; // 报错 上面示例中，const命令声明的x是不能改变值的，声明时必须同时赋值，否则报错，所以它不存在类型推断为any的问题。\",\"污染问题 any类型除了关闭类型检查，还有一个很大的问题，就是它会“污染”其他变量。它可以赋值给其他任何类型的变量（因为没有类型检查），导致其他变量出错。\",\"let x:any = 'hello'; let y:number; y = x; // 不报错 y * 123 // 不报错 y.toFixed() // 不报错上面示例中，变量x的类型是any，实际的值是一个字符串。变量y的类型是number，表示这是一个数值变量，但是它被赋值为x，这时并不会报错。然后，变量y继续进行各种数值运算，TypeScript 也检查不出错误，问题就这样留到运行时才会暴露。 污染其他具有正确类型的变量，把错误留到运行时，这就是不宜使用any类型的另一个主要原因。\"]},\"204\":{\"h\":\"Unknown 类型\",\"t\":[\"为了解决any类型“污染”其他变量的问题，TypeScript 3.0 引入了unknown类型。它与any含义相同，表示类型不确定，可能是任意类型，但是它的使用有一些限制，不像any那样自由，可以视为严格版的any。 unknown跟any的相似之处，在于所有类型的值都可以分配给unknown类型。\",\"let x: unknown; x = true; // 正确 x = 42; // 正确 x = 'Hello World'; // 正确\",\"上面示例中，变量x的类型是unknown，可以赋值为各种类型的值。这与any的行为一致。 unknown类型跟any类型的不同之处在于，它不能直接使用。主要有以下几个限制。 首先，unknown类型的变量，不能直接赋值给其他类型的变量（除了any类型和unknown类型）。\",\"let v: unknown = 123; let v1: boolean = v; // 报错let v2:number = v; // 报错\",\"上面示例中，变量v是unknown类型，赋值给any和unknown以外类型的变量都会报错，这就避免了污染问题，从而克服了any类型的一大缺点。 其次，不能直接调用unknown类型变量的方法和属性。\",\"let v1: unknown = {foo: 123}; v1.foo // 报错let v2:unknown = 'hello'; v2.trim() // 报错let v3:unknown = (n = 0) => n + 1; v3() // 报错\",\"上面示例中，直接调用unknown类型变量的属性和方法，或者直接当作函数执行，都会报错。 再次，unknown类型变量能够进行的运算是有限的，只能进行比较运算（运算符==、=、!=、!、||、&&、?）、取反运算（运算符!）、typeof运算符和instanceof运算符这几种，其他运算都会报错。\",\"let a: unknown = 1; a + 1 // 报错 a === 1 // 正确\",\"上面示例中，unknown类型的变量a进行加法运算会报错，因为这是不允许的运算。但是，进行比较运算就是可以的。 那么，怎么才能使用unknown类型变量呢？ 答案是只有经过“类型缩小”，unknown类型变量才可以使用。所谓“类型缩小”，就是缩小unknown变量的类型范围，确保不会出错。\",\"let a: unknown = 1; if (typeof a === 'number') { let r = a + 10; // 正确 }\",\"上面示例中，unknown类型的变量a经过typeof运算以后，能够确定实际类型是number，就能用于加法运算了。这就是“类型缩小”，即将一个不确定的类型缩小为更明确的类型。 下面是另一个例子。\",\"let s: unknown = 'hello'; if (typeof s === 'string') { s.length; // 正确 }\",\"上面示例中，确定变量s的类型为字符串以后，才能调用它的length属性。 这样设计的目的是，只有明确unknown变量的实际类型，才允许使用它，防止像any那样可以随意乱用，“污染”其他变量。类型缩小以后再使用，就不会报错。 总之，unknown可以看作是更安全的any。一般来说，凡是需要设为any类型的地方，通常都应该优先考虑设为unknown类型。 在集合论上，unknown也可以视为所有其他类型（除了any）的全集，所以它和any一样，也属于 TypeScript 的顶层类型。\"]},\"205\":{\"h\":\"Never 类型\",\"t\":[\"为了保持与集合论的对应关系，以及类型运算的完整性，TypeScript 还引入了“空类型”的概念，即该类型为空，不包含任何值。 由于不存在任何属于“空类型”的值，所以该类型被称为never，即不可能有这样的值。\",\"let x: never;\",\"上面示例中，变量x的类型是never，就不可能赋给它任何值，否则都会报错。 never类型的使用场景，主要是在一些类型运算之中，保证类型运算的完整性，详见后面章节。另外，不可能返回值的函数，返回值的类型就可以写成never，详见《函数》一章。 如果一个变量可能有多种类型（即联合类型），通常需要使用分支处理每一种类型。这时，处理所有可能的类型之后，剩余的情况就属于never类型。\",\"function fn(x: string | number) { if (typeof x === 'string') { // ... } else if (typeof x === 'number') { // ... } else { x; // never 类型 } }\",\"上面示例中，参数变量x可能是字符串，也可能是数值，判断了这两种情况后，剩下的最后那个else分支里面，x就是never类型了。 never类型的一个重要特点是，可以赋值给任意其他类型。\",\"function f(): never { throw new Error('Error'); } let v1: number = f(); // 不报错 let v2: string = f(); // 不报错 let v3: boolean = f(); // 不报错\",\"上面示例中，函数f()会抛出错误，所以返回值类型可以写成never，即不可能返回任何值。各种其他类型的变量都可以赋值为f()的运行结果（never类型）。 为什么never类型可以赋值给任意其他类型呢？这也跟集合论有关，空集是任何集合的子集。TypeScript 就相应规定，任何类型都包含了never类型。因此，never类型是任何其他类型所共有的，TypeScript 把这种情况称为“底层类型”（bottom type）。 总之，TypeScript 有两个“顶层类型”（any和unknown），但是“底层类型”只有never唯一一个。\"]},\"206\":{\"h\":\"symbol\",\"t\":[\"Symbol 是ES2015 新引入的一种原始类型的值。它类似字符串，但是每一个Symbol值都是独一无二的， 与其他任何值都不相等。 Symbol 值通过Symbol()函数生成。在 TypeScript 里面，Symbol 的类型使用symbol表示。\",\"let x: symbol = Symbol(); let y: symbol = Symbol(); x === y // false\"]},\"207\":{\"h\":\"unique symbol\",\"t\":[\"symbol类型包含所有的 Symbol 值，但是无法表示某一个具体的 Symbol 值。 比如，5是一个具体的数值，就用5这个字面量来表示，这也是它的值类型。但是，Symbol 值不存在字面量，必须通过变量来引用，所以写不ss出只包含单个 Symbol 值的那种值类型。 为了解决这个问题，TypeScript 设计了symbol的一个子类型unique symbol，它表示单个的、某个具体的 Symbol 值。 因为unique symbol表示单个值，所以这个类型的变量是不能修改值的，只能用const命令声明，不能用let声明。\",\"// 正确 const x: unique symbol = Symbol(); // 报错 // let y:unique symbol = Symbol();\",\"const命令为变量赋值 Symbol 值时，变量类型默认就是unique symbol，所以类型可以省略不写。\",\"const x: unique symbol = Symbol(); // 等同于const x = Symbol();\",\"每个声明为unique symbol类型的变量，它们的值都是不一样的，其实属于两个值类型。\",\"const a: unique symbol = Symbol(); const b: unique symbol = Symbol(); a === b // 报错\",\"上面示例中，变量a和变量b的类型虽然都是unique symbol，但其实是两个值类型。不同类型的值肯定是不相等的，所以最后一行就报错了。 由于 Symbol 类似于字符串，可以参考下面的例子来理解。\",\"const a: 'hello' = 'hello'; const b: 'world' = 'world'; a === b // 报错\",\"上面示例中，变量a和b都是字符串，但是属于不同的值类型，不能使用严格相等运算符进行比较。 而且，由于变量a和b是两个类型，就不能把一个赋值给另一个。\",\"const a: unique symbol = Symbol(); const b: unique symbol = a; // 报错\",\"例变量b的类型，如果要写成与变量a同一个unique symbol值类型，只能写成类型为typeof a。\",\"const a: unique symbol = Symbol(); const b: typeof a = a; // 正确\",\"不过我们知道，相同参数的Symbol.for()方法会返回相同的 Symbol 值。TypeScript 目前无法识别这种情况，所以可能出现多个 unique symbol 类型的变量，等于同一个 Symbol 值的情况。\",\"const a: unique symbol = Symbol.for('foo'); const b: unique symbol = Symbol.for('foo');\",\"unique symbol 类型是 symbol 类型的子类型，所以可以将前者赋值给后者，但是反过来就不行。\",\"const a: unique symbol = Symbol(); const b: symbol = a; // 正确 // const c:unique symbol = b; // 报错\",\"unique symbol 类型的一个作用，就是用作属性名，这可以保证不会跟其他属性名冲突。如果要把某一个特定的 Symbol 值当作属性名，那么它的类型只能是 unique symbol，不能是 symbol。\",\"const x: unique symbol = Symbol(); const y: symbol = Symbol(); interface Foo { [x]: string; // 正确 [y]: string; // 报错 }\",\"上面示例中，变量y当作属性名，但是y的类型是 symbol，不是固定不变的值，导致报错。 unique symbol类型也可以用作类（class）的属性值，但只能赋值给类的readonly static属性。\",\"class C { static readonly foo: unique symbol = Symbol(); }\",\"上面示例中，静态只读属性foo的类型就是unique symbol。注意，这时static和readonly两个限定符缺一不可，这是为了保证这个属性是固定不变的。\"]},\"208\":{\"h\":\"类型推断\",\"t\":[\"如果变量声明时没有给出类型，TypeScript 会推断某个 Symbol 值变量的类型。 let命令声明的变量，推断类型为 symbol。\",\"// 类型为 symbol let x = Symbol();\",\"const命令声明的变量，推断类型为 unique symbol。\",\"// 类型为 unique symbol const x = Symbol();\",\"但是，const命令声明的变量，如果赋值为另一个 symbol 类型的变量，则推断类型为 symbol。\",\"let x = Symbol(); // 类型为 symbol const y = x;\",\"let命令声明的变量，如果赋值为另一个 unique symbol 类型的变量，则推断类型还是 symbol。\",\"const x = Symbol(); // 类型为 symbol let y = x;\"]},\"209\":{\"c\":[\"TypeScript\"]},\"210\":{\"h\":\"类型大全\"},\"211\":{\"h\":\"基本类型\",\"t\":[\"JavaScript 语言（注意，不是 typescript :no-line-numbers）将值分成8种类型。\",\"boolean\",\"string\",\"number\",\"bigint\",\"symbol\",\"object\",\"undefined\",\"null\",\"typescript :no-line-numbers 继承了 JavaScript 的类型设计，以上8种类型可以看作 typescript :no-line-numbers 的基本类型。\"]},\"212\":{\"h\":\"包装对象类型\",\"t\":[\"JavaScript 的8种类型之中，undefined和null其实是两个特殊值，object属于复合类型，剩下的五种属于原始类型（primitive value），代表最基本的、不可再分的值。\",\"boolean\",\"string\",\"number\",\"bigint\",\"symbol\",\"上面这五种原始类型的值，都有对应的包装对象（wrapper object）。所谓“包装对象”，指的是这些值在需要时，会自动产生的对象。\",\"'hello'.charAt(1) // 'e'\",\"字符串hello执行了charAt()方法。但是，在 JavaScript 语言中，只有对象才有方法，原始类型的值本身没有方法。这行代码之所以可以运行，就是因为在调用方法时，字符串会自动转为包装对象，charAt()方法其实是定义在包装对象上。 五种包装对象之中，symbol 类型和 bigint 类型无法直接获取它们的包装对象（即Symbol()和BigInt()不能作为构造函数使用），但是剩下三种可以。\",\"Boolean()\",\"String()\",\"Number()\"]},\"213\":{\"h\":\"包装对象类型与字面量类型\",\"t\":[\"由于包装对象的存在，导致每一个原始类型的值都有包装对象和字面量两种情况。\",\"'hello' // 字面量new String('hello') // 包装对象\",\"上面示例中，第一行是字面量，第二行是包装对象，它们都是字符串。 为了区分这两种情况，typescript :no-line-numbers 对五种原始类型分别提供了大写和小写两种类型。\",\"Boolean 和 boolean\",\"String 和 string\",\"Number 和 number\",\"BigInt 和 bigint\",\"Symbol 和 symbol\",\"const s1: String = 'hello'; // 正确 const s2: String = new String('hello'); // 正确 const s3: string = 'hello'; // 正确 const s4: string = new String('hello'); // 报错\",\"Symbol()和BigInt()这两个函数不能当作构造函数使用，所以没有办法直接获得 symbol 类型和 bigint 类型的包装对象，除非使用下面的写法。但是，它们没有使用场景，因此Symbol和BigInt这两个类型虽然存在，但是完全没有使用的理由。\",\"提示\",\"没有使用意义\",\"let a = Object(Symbol()); let b = Object(BigInt());\"]},\"214\":{\"h\":\"Object 类型与 object 类型\",\"t\":[\"typescript :no-line-numbers 的对象类型也有大写Object和小写object两种。\"]},\"215\":{\"h\":\"Object 类型\",\"t\":[\"大写的Object类型代表 JavaScript 语言里面的广义对象。所有可以转成对象的值，都是Object类型，这囊括了几乎所有的值。\",\"let obj: Object; obj = true; obj = 'hi'; obj = 1; obj = {foo: 123}; obj = [1, 2]; obj = (a: number) => a + 1;\",\"事实上，除了undefined和null这两个值不能转为对象，其他任何值都可以赋值给Object类型。\",\"let obj: Object; obj = undefined; // 报错 obj = null; // 报错\",\"空对象{}是Object类型的简写形式，所以使用Object时常常用空对象代替。\"]},\"216\":{\"h\":\"object 类型\",\"t\":[\"小写的object类型代表 JavaScript 里面的狭义对象，即可以用字面量表示的对象，只包含对象、数组和函数，不包括原始类型的值。\",\"let obj: object; obj = {foo: 123}; obj = [1, 2]; obj = (a: number) => a + 1; obj = true; // 报错 obj = 'hi'; // 报错 obj = 1; // 报错\",\"注意\",\"大多数时候，我们使用对象类型，只希望包含真正的对象，不希望包含原始类型。所以，建议总是使用小写类型object，不使用大写类型Object。 无论是大写的Object类型，还是小写的object类型，都只包含 JavaScript 内置对象原生的属性和方法，用户自定义的属性和方法都不存在于这两个类型之中。\"]},\"217\":{\"h\":\"undefined 和 null 的特殊性\",\"t\":[\"undefined和null既是值，又是类型。\",\"let age: number = 24; age = null; // 正确 age = undefined; // 正确\",\"JavaScript 的行为是，变量如果等于undefined就表示还没有赋值，如果等于null就表示值为空。所以，TypeScript 就允许了任何类型的变量都可以赋值为这两个值。 但是有时候，这并不是开发者想要的行为，也不利于发挥类型系统的优势。\",\"const obj: object = undefined; obj.toString() // 编译不报错，运行就报错\",\"提示\",\"为了避免这种情况，及早发现错误，TypeScript 提供了一个编译选项strictNullChecks。只要打开这个选项，undefined和null就不能赋值给其他类型的变量（除了any类型和unknown类型）。\",\"// tsc --strictNullChecks app.ts let age: number = 24; age = null; // 报错 age = undefined; // 报错\",\"tsconfig.json\",\"{ \\\"compilerOptions\\\": { \\\"strictNullChecks\\\": true } }\",\"// 打开 strictNullChecks let x: undefined = null; // 报错 let y: null = undefined; // 报错\",\"总之，打开strictNullChecks以后，undefined和null只能赋值给自身，或者any类型和unknown类型的变量。\"]},\"218\":{\"h\":\"值类型\",\"t\":[\"TypeScript 规定，单个值也是一种类型，称为“值类型”。\",\"let x: 'hello'; x = 'hello'; // 正确 x = 'world'; // 报错\",\"TypeScript 推断类型时，遇到const命令声明的变量，如果代码里面没有注明类型，就会推断该变量是值类型。\",\"// x 的类型是 \\\"https\\\" const x = 'https'; // y 的类型是 string const y: string = 'https'; // x1 的类型是 { foo: number } const x1 = {foo: 1};\",\"提示\",\"值类型可能会出现一些很奇怪的报错。\",\"const x: 5 = 4 + 1; // 报错\",\"上面示例中，等号左侧的类型是数值5，等号右侧4 + 1的类型，TypeScript 推测为number。由于5是number的子类型，number是5的父类型，父类型不能赋值给子类型，所以报错了。 但是，反过来是可以的，子类型可以赋值给父类型。\",\" let x: 5 = 5; let y: number = 4 + 1; x = y; // 报错 y = x; // 正确\"]},\"219\":{\"h\":\"联合类型\",\"t\":[\"联合类型（union types）指的是多个类型组成的一个新类型，使用符号|表示。 联合类型A|B表示，任何一个类型只要属于A或B，就属于联合类型A|B。\",\"let x: string | number; x = 123; // 正确 x = 'abc'; // 正确 let setting: true | false; let gender: 'male' | 'female'; let rainbowColor: '赤' | '橙' | '黄' | '绿' | '青' | '蓝' | '紫';\",\"提示\",\"打开编译选项strictNullChecks后，其他类型的变量不能赋值为undefined或null。这时，如果某个变量确实可能包含空值，就可以采用联合类型的写法。\",\"let name: string | null; name = 'John'; name = null;\"]},\"220\":{\"h\":\"交叉类型\",\"t\":[\"交叉类型（intersection types）指的多个类型组成的一个新类型，使用符号&表示。 交叉类型A&B表示，任何一个类型必须同时属于A和B，才属于交叉类型A&B，即交叉类型同时满足A和B的特征。\",\"let x: number & string;\",\"上面示例中，变量x同时是数值和字符串，这当然是不可能的，所以 TypeScript 会认为x的类型实际是never。\",\"let obj: { foo: string } & { bar: string }; obj = { foo: 'hello', bar: 'world' };\",\"type A = { foo: number }; type B = A & { bar: number };\"]},\"221\":{\"h\":\"type 命令\",\"t\":[\"type Age = number; let age: Age = 55;\",\"别名不允许重名。\",\"type Color = 'red'; type Color = 'blue'; // 报错\",\"别名的作用域是块级作用域。这意味着，代码块内部定义的别名，影响不到外部。\",\"type Color = 'red'; if (Math.random() < 0.5) { type Color = 'blue'; }\",\"别名支持使用表达式，也可以在定义一个别名时，使用另一个别名，即别名允许嵌套。\",\"type World = \\\"world\\\"; type Greeting = `hello ${World}`;\"]},\"222\":{\"h\":\"typeof 运算符\",\"t\":[\"typeof 运算符是一个一元运算符，返回一个字符串，代表操作数的类型。 JavaScript 里面，typeof运算符只可能返回八种结果，而且都是字符串。\",\"typeof undefined; // \\\"undefined\\\" typeof true; // \\\"boolean\\\" typeof 1337; // \\\"number\\\" typeof \\\"foo\\\"; // \\\"string\\\" typeof {}; // \\\"object\\\" typeof parseInt; // \\\"function\\\" typeof Symbol(); // \\\"symbol\\\" typeof 127n // \\\"bigint\\\"\",\"TypeScript 将typeof运算符移植到了类型运算，它的操作数依然是一个值，但是返回的不是字符串，而是该值的 TypeScript 类型。\",\"const a = {x: 0}; type T0 = typeof a; // { x: number } type T1 = typeof a.x; // number\",\"提示\",\"这种用法的typeof返回的是 TypeScript 类型，所以只能用在类型运算之中（即跟类型相关的代码之中），不能用在值运算。 也就是说，同一段代码可能存在两种typeof运算符，一种用在值相关的 JavaScript 代码部分，另一种用在类型相关的 TypeScript 代码部分。\",\"let a = 1; let b: typeof a; if (typeof a === 'number') { b = a; }\",\"type T = typeof Date (); // 报错\",\"上面示例会报错，原因是 typeof 的参数不能是一个值的运算式，而Date()需要运算才知道结果。 typeof命令的参数不能是类型。\",\"type Age = number; type MyAge = typeof Age; // 报错\"]},\"223\":{\"h\":\"块级类型声明\",\"t\":[\"TypeScript 支持块级类型声明，即类型可以声明在代码块（用大括号表示）里面，并且只在当前代码块有效。\",\"if (true) { type T = number; let v: T = 5; } else { type T = string; let v: T = 'hello'; }\"]},\"224\":{\"c\":[\"TypeScript\"]},\"225\":{\"h\":\"数组与元组\"},\"226\":{\"h\":\"数组\",\"t\":[\"TypeScript数组有一个根本特征： 所有成员的类型必须相同，但是成员数量是不确定的，可以是无限数量的成员，也可以是零成员。\",\"let arr: number[] = [1, 2, 3]; let arr1: Array<number> = [1, 2, 3];\",\"如果数组成员的类型比较复杂，可以写在圆括号里面。\",\"let arr: (number | string)[]; let arr1: Array<number | string>;\",\"这个例子里面的圆括号是必须的，否则因为竖杠|的优先级低于[]，\",\"TypeScript 允许使用方括号读取数组成员的类型。\",\"type Names = string[]; type Name = Names[0]; // string\",\"由于数组成员的索引类型都是number，所以读取成员类型也可以写成下面这样。\",\"type Names = string[]; type Name = Names[number]; // string\"]},\"227\":{\"h\":\"数组的类型推断\",\"t\":[\"如果数组变量没有声明类型，TypeScript 就会推断数组成员的类型。这时，推断行为会因为值的不同，而有所不同。 如果变量的初始值是空数组，那么 TypeScript 会推断数组类型是any[]。\",\"const arr = []; arr // 推断为 any[] arr.push(123); arr // 推断类型为 number[] arr.push('abc'); arr // 推断类型为 (string|number)[]\",\"类型推断的自动更新只发生初始值为空数组的情况。如果初始值不是空数组，类型推断就不会更新。\",\"// 推断类型为 number[] const arr = [123]; arr.push('abc'); // 报错\"]},\"228\":{\"h\":\"只读数组，const 断言\",\"t\":[\"上面示例中，修改const命令声明的数组的成员是允许的。 但是，很多时候确实有声明为只读数组的需求，即不允许变动数组成员。 TypeScript 允许声明只读数组，方法是在数组类型前面加上readonly关键字。\",\"提示\",\"只读数组没有pop()、push()之类会改变原数组的方法\",\"const arr: readonly number[] = [0, 1]; arr[1] = 2; // 报错 arr.push(3); // 报错delete arr[0]; // 报错\",\"子类型继承了父类型的所有特征，并加上了自己的特征，所以子类型number[]可以用于所有使用父类型的场合，反过来就不行。\",\"let a1: number[] = [0, 1]; let a2: readonly number[] = a1; // 正确 a1 = a2; // 报错\",\"子类型number[]可以赋值给父类型readonly number[]，但是反过来就会报错。\",\"function getSum(s: number[]) {// ... } const arr: readonly number[] = [1, 2, 3]; getSum(arr) // 报错 相当于 只读数组赋值给可变数组 所以报错\",\"只读写法\",\"const a1: ReadonlyArray<number> = [0, 1]; const a2: Readonly<number[]> = [0, 1]; const arr = [0, 1] as const; arr[0] = [2]; // 报错\"]},\"229\":{\"h\":\"多维数组\",\"t\":[\"TypeScript 使用T[][]的形式，表示二维数组，T是最底层数组成员的类型。\",\" var multi: number[][] = [[1, 2, 3], [23, 24, 25]];\"]},\"230\":{\"h\":\"元组\",\"t\":[\"元组（tuple）是 TypeScript 特有的数据类型，JavaScript 没有单独区分这种类型。它表示成员类型可以自由设置的数组，即数组的各个成员的类型可以不同。\",\"const s: [string, string, boolean] = ['a', 'b', true];\",\"元组成员的类型可以添加问号后缀（?），表示该成员是可选的。\",\"let a: [number, number?] = [1];\",\"提示\",\"问号只能用于元组的尾部成员，也就是说，所有可选成员必须在必选成员之后。\",\"由于需要声明每个成员的类型，所以大多数情况下，元组的成员数量是有限的，从类型声明就可以明确知道，元组包含多少个成员，越界的成员会报错。\",\" let x: [string, string] = ['a', 'b']; x[2] = 'c'; // 报错\",\"相关信息\",\"使用扩展运算符（...），可以表示不限成员数量的元组\",\"type NamedNums = [string, ...number[] ]; const a: NamedNums = ['A', 1, 2]; const b: NamedNums = ['B', 1, 2, 3];\",\"扩展运算符（...）用在元组的任意位置都可以，它的后面只能是一个数组或元组。\",\"type t1 = [string, number, ...boolean[]]; type t2 = [string, ...boolean[], number]; type t3 = [...boolean[], string, number];\",\"如果不确定元组成员的类型和数量，可以写成下面这样。\",\"type Tuple = [...any[]];\",\"元组的成员可以添加成员名，这个成员名是说明性的，可以任意取名，没有实际作用。\",\"type Color = [red: number, green: number, blue: number]; const c: Color = [255, 255, 255];\",\"元组可以通过方括号，读取成员类型。\",\"type Tuple = [string, number]; type Age = Tuple[1]; // number\"]},\"231\":{\"h\":\"只读元组\",\"t\":[\"元组也可以是只读的，不允许修改，有两种写法。\",\"// 写法一 type t = readonly [number, string] // 写法二 type t = Readonly<[number, string]>\"]},\"232\":{\"h\":\"成员数量的推断\",\"t\":[\"如果没有可选成员和扩展运算符，TypeScript 会推断出元组的成员数量（即元组长度）。\",\"function f(point: [number, number]) { if (point.length === 3) { // 报错// ... } }\"]},\"233\":{\"h\":\"扩展运算符与成员数量\",\"t\":[\"扩展运算符（...）将数组（注意，不是元组）转换成一个逗号分隔的序列，这时 TypeScript 会认为这个序列的成员数量是不确定的，因为数组的成员数量是不确定的。 这导致如果函数调用时，使用扩展运算符传入函数参数，可能发生参数数量与数组长度不匹配的报错。\",\"const arr = [1, 2]; function add(x: number, y: number) { // ... } add(...arr) // 报错\",\"上面示例会报错，原因是函数add()只能接受两个参数，但是传入的是...arr，TypeScript 认为转换后的参数个数是不确定的。\",\"const arr: [number, number] = [1, 2]; function add(x: number, y: number) {// ... } add(...arr) // 正确\",\"一种写法是使用as const断言。\",\"const arr = [1, 2] as const;\",\"上面这种写法也可以，因为 TypeScript 会认为arr的类型是readonly [1, 2]，这是一个只读的值类型，可以当作数组，也可以当作元组。\"]},\"234\":{\"c\":[\"TypeScript\"]},\"235\":{\"h\":\"类型工具\"},\"236\":{\"h\":\"\",\"t\":[\"Awaited<Type>用来取出 Promise 的返回值类型，适合用在描述then()方法和 await 命令的参数类型。\",\"type A = Awaited<Promise<string>>;\",\"上面示例中，Awaited<Type>会返回 Promise 的返回值类型（string）。\",\"// number type B = Awaited<Promise<Promise<number>>>;\",\"如果它的类型参数不是 Promise 类型，那么就会原样返回。\",\"// number | boolean type C = Awaited<boolean | Promise<number>>;\"]},\"237\":{\"h\":\"\",\"t\":[\"ConstructorParameters<Type>提取构造方法Type的参数类型，组成一个元组类型返回。\",\"type T1 = ConstructorParameters<new (x: string, y: number) => object>; // [x: string, y: number] type T2 = ConstructorParameters<new (x?: string) => object>; // [x?: string | undefined]\",\"它可以返回一些内置构造方法的参数类型。\",\"type T1 = ConstructorParameters<ErrorConstructor>; // [message?: string] type T2 = ConstructorParameters<FunctionConstructor>; // string[] type T3 = ConstructorParameters<RegExpConstructor>; // [pattern:string|RegExp, flags?:string]\",\"如果参数类型不是构造方法，就会报错。\",\"type T1 = ConstructorParameters<string>; // 报错type T2 = ConstructorParameters<Function>; // 报错\",\"any类型和never类型是两个特殊值，分别返回unknown[]和never。\",\"type T1 = ConstructorParameters<any>; // unknown[] type T2 = ConstructorParameters<never>; // never\",\"ConstructorParameters<Type>的实现如下。\",\"type ConstructorParameters< T extends abstract new (...args: any) => any > = T extends abstract new (...args: infer P) => any ? P : never\"]},\"238\":{\"h\":\"\",\"t\":[\"Exclude<UnionType, ExcludedMembers>用来从联合类型UnionType里面，删除某些类型ExcludedMembers，组成一个新的类型返回。\",\"type T1 = Exclude<'a' | 'b' | 'c', 'a'>; // 'b'|'c' type T2 = Exclude<'a' | 'b' | 'c', 'a' | 'b'>; // 'c' type T3 = Exclude<string | (() => void), Function>; // string type T4 = Exclude<string | string[], any[]>; // string type T5 = Exclude<(() => void) | null, Function>; // null type T6 = Exclude<200 | 400, 200 | 201>; // 400 type T7 = Exclude<number, boolean>; // number\",\"Exclude<UnionType, ExcludedMembers>的实现如下。\",\"type Exclude<T, U> = T extends U ? never : T;\",\"上面代码中，等号右边的部分，表示先判断T是否兼容U，如果是的就返回never类型，否则返回当前类型T。由于never类型是任何其他类型的子类型，它跟其他类型组成联合类型时，可以直接将never类型从联合类型中“消掉”，因此Exclude<T, U>就相当于删除兼容的类型，剩下不兼容的类型\"]},\"239\":{\"h\":\"\",\"t\":[\"Extract<UnionType, Union>用来从联合类型UnionType之中，提取指定类型Union，组成一个新类型返回。它与Exclude<T, U>正好相反。\",\"type T1 = Extract<'a' | 'b' | 'c', 'a'>; // 'a' type T2 = Extract<'a' | 'b' | 'c', 'a' | 'b'>; // 'a'|'b' type T3 = Extract<'a' | 'b' | 'c', 'a' | 'd'>; // 'a' type T4 = Extract<string | string[], any[]>; // string[] type T5 = Extract<(() => void) | null, Function>; // () => void type T6 = Extract<200 | 400, 200 | 201>; // 200\",\"如果参数类型Union不包含在联合类型UnionType之中，则返回never类型。\",\"type T = Extract<string | number, boolean>; // never\",\"Extract<UnionType, Union>的实现如下。\",\"type Extract<T, U> = T extends U ? T : never;\"]},\"240\":{\"h\":\"\",\"t\":[\"InstanceType<Type>提取构造函数的返回值的类型（即实例类型），参数Type是一个构造函数，等同于构造函数的ReturnType<Type>。\",\"type T = InstanceType<new () => object>; // object\",\"上面示例中，类型参数是一个构造函数new () => object，返回值是该构造函数的实例类型（object）。\",\"type A = InstanceType<ErrorConstructor>; // Error type B = InstanceType<FunctionConstructor>; // Function type C = InstanceType<RegExpConstructor>; // RegExp\",\"上面示例中，InstanceType<T>的参数都是 TypeScript 内置的原生对象的构造函数类型，InstanceType<T>的返回值就是这些构造函数的实例类型。 由于 Class 作为类型，代表实例类型。要获取它的构造方法，必须把它当成值，然后用typeof运算符获取它的构造方法类型。\",\"class C { x = 0; y = 0; } type T = InstanceType<typeof C>; // C\",\"如果类型参数不是构造方法，就会报错。\",\"type T1 = InstanceType<string>; // 报错 type T2 = InstanceType<Function>; // 报错\",\"如果类型参数是any或never两个特殊值，分别返回any和never。\",\"type T1 = InstanceType<any>; // any type T2 = InstanceType<never>; // never\",\"InstanceType<Type>的实现如下。\",\"type InstanceType< T extends abstract new (...args: any) => any > = T extends abstract new (...args: any) => infer R ? R : any;\"]},\"241\":{\"h\":\"\",\"t\":[\"NonNullable<Type>用来从联合类型Type删除null类型和undefined类型，组成一个新类型返回，也就是返回Type的非空类型版本。\",\"// string|number type T1 = NonNullable<string | number | undefined>; // string[] type T2 = NonNullable<string[] | null | undefined>; type T3 = NonNullable<boolean>; // boolean type T4 = NonNullable<number | null>; // number type T5 = NonNullable<string | undefined>; // string type T6 = NonNullable<null | undefined>; // never\",\"NonNullable<Type>的实现如下。\",\"type NonNullable<T> = T & {}\",\"上面代码中，T & {}等同于求T & Object的交叉类型。由于 TypeScript 的非空值都属于Object的子类型，所以会返回自身；而null和undefined不属于Object，会返回never类型。\"]},\"242\":{\"h\":\"\",\"t\":[\"Omit<Type, Keys>用来从对象类型Type中，删除指定的属性Keys，组成一个新的对象类型返回。\",\"interface A { x: number; y: number; } type T1 = Omit<A, 'x'>; // { y: number } type T2 = Omit<A, 'y'>; // { x: number } type T3 = Omit<A, 'x' | 'y'>; // { }\",\"上面示例中，Omit<Type, Keys>从对象类型A里面删除指定属性，返回剩下的属性。 指定删除的键名Keys可以是对象类型Type中不存在的属性，但必须兼容string|number|symbol。\",\"interface A { x: number; y: number; } type T = Omit<A, 'z'>; // { x: number; y: number }\",\"上面示例中，对象类型A中不存在属性z，所以就原样返回了。Omit<Type, Keys>的实现如下。\",\"type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>;\"]},\"243\":{\"h\":\"\",\"t\":[\"OmitThisParameter<Type>从函数类型中移除 this 参数。\",\"function toHex(this: Number) { return this.toString(16); } type T = OmitThisParameter<typeof toHex>; // () => string\",\"上面示例中，OmitThisParameter<T>给出了函数toHex()的类型，并将其中的this参数删除。 如果函数没有 this 参数，则返回原始函数类型。OmitThisParameter<Type>的实现如下\",\"type OmitThisParameter<T> = unknown extends ThisParameterType<T> ? T : T extends (...args: infer A) => infer R ? (...args: A) => R : T;\"]},\"244\":{\"h\":\"\",\"t\":[\"Parameters<Type>从函数类型Type里面提取参数类型，组成一个元组返回。\",\"type T1 = Parameters<() => string>; // [] type T2 = Parameters<(s: string) => void>; // [s:string] type T3 = Parameters<<T>(arg: T) => T>; // [arg: unknown] type T4 = Parameters<(x: { a: number; b: string }) => void>; // [x: { a: number, b: string }] type T5 = Parameters<(a: number, b: number) => number>; // [a:number, b:number]\",\"上面示例中，Parameters<Type>的返回值会包括函数的参数名，这一点需要注意。 如果参数类型Type不是带有参数的函数形式，会报错。\",\"// 报错 type T1 = Parameters<string>; // 报错 type T2 = Parameters<Function>;\",\"由于any和never是两个特殊值，会返回unknown[]和never。\",\"type T1 = Parameters<any>; // unknown[] type T2 = Parameters<never>; // never\",\"相关信息\",\"Parameters<Type>主要用于从外部模块提供的函数类型中，获取参数类型。\",\"interface SecretName { first: string; last: string; } interface SecretSanta { name: SecretName; gift: string; } export function getGift(name: SecretName, gift: string): SecretSanta { // ... }\",\"上面示例中，模块只输出了函数getGift()，没有输出参数SecretName和返回值SecretSanta。这时就可以通过Parameters<T>和ReturnType<T>拿到这两个接口类型\",\"type ParaT = Parameters<typeof getGift>[0]; // SecretName type ReturnT = ReturnType<typeof getGift>; // SecretSanta\",\"Parameters<Type>的实现如下。\",\"type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never\"]},\"245\":{\"h\":\"\",\"t\":[\"Partial<Type>返回一个新类型，将参数类型Type的所有属性变为可选属性。\",\"interface A { x: number; y: number; } type T = Partial<A>; // { x?: number; y?: number; }\",\"Partial<Type>的实现如下。\",\"type Partial<T> = { [P in keyof T]?: T[P]; };\"]},\"246\":{\"h\":\"\",\"t\":[\"Pick<Type, Keys>返回一个新的对象类型，第一个参数Type是一个对象类型，第二个参数Keys是Type里面被选定的键名。\",\"interface A { x: number; y: number; } type T1 = Pick<A, 'x'>; // { x: number } type T2 = Pick<A, 'y'>; // { y: number } type T3 = Pick<A, 'x' | 'y'>; // { x: number; y: number }\",\"上面示例中，Pick<Type, Keys>会从对象类型A里面挑出指定的键名，组成一个新的对象类型。 指定的键名Keys必须是对象键名Type里面已经存在的键名，否则会报错\",\"interface A { x: number; y: number; } type T = Pick<A, 'z'>; // 报错\",\"上面示例中，对象类型A不存在键名z，所以报错了。Pick<Type, Keys>的实现如下。\",\"type Pick<T, K extends keyof T> = { [P in K]: T[P]; };\"]},\"247\":{\"h\":\"\",\"t\":[\"Readonly<Type>返回一个新类型，将参数类型Type的所有属性变为只读属性。\",\"interface A { x: number; y?: number; } // { readonly x: number; readonly y?: number; } type T = Readonly<A>;\",\"上面示例中，y是可选属性，Readonly<Type>不会改变这一点，只会让y变成只读。Readonly<Type>的实现如下。\",\"type Readonly<T> = { readonly [P in keyof T]: T[P]; };\",\"我们可以自定义类型工具Mutable<Type>，将参数类型的所有属性变成可变属性。\",\"type Mutable<T> = { -readonly [P in keyof T]: T[P]; };\",\"提示\",\"上面代码中，-readonly表示去除属性的只读标志。 相应地，+readonly就表示增加只读标志，等同于readonly。因此，Readonly<Type>的实现也可以写成下面这样。\",\"type Readonly<T> = { +readonly [P in keyof T]: T[P]; };\",\"Readonly<Type>可以与Partial<Type>结合使用，将所有属性变成只读的可选属性。\",\"interface Person { name: string; age: number; } const worker: Readonly<Partial<Person>> = {name: '张三'}; worker.name = '李四'; // 报错\"]},\"248\":{\"h\":\"\",\"t\":[\"Record<Keys, Type>返回一个对象类型，参数Keys用作键名，参数Type用作键值类型。\",\"// { a: number } type T = Record<'a', number>;\",\"上面示例中，Record<Keys, Type>的第一个参数a，用作对象的键名，第二个参数number是a的键值类型。 参数Keys可以是联合类型，这时会依次展开为多个键。\",\"// { a: number, b: number } type T = Record<'a' | 'b', number>;\",\"上面示例中，第一个参数是联合类型'a'|'b'，展开成两个键名a和b。 如果参数Type是联合类型，就表明键值是联合类型。\",\"// { a: number|string } type T = Record<'a', number | string>;\",\"参数Keys的类型必须兼容string|number|symbol，否则不能用作键名，会报错。Record<Keys, Type>的实现如下。\",\"type Record<K extends string | number | symbol, T> = { [P in K]: T; }\"]},\"249\":{\"h\":\"\",\"t\":[\"Required<Type>返回一个新类型，将参数类型Type的所有属性变为必选属性。它与Partial<Type>的作用正好相反。\",\"interface A { x?: number; y: number; } type T = Required<A>; // { x: number; y: number; }\",\"Required<Type>的实现如下。\",\"type Required<T> = { [P in keyof T]-?: T[P]; };\",\"提示\",\"上面代码中，符号-?表示去除可选属性的“问号”，使其变成必选属性。 相对应地，符号+?表示增加可选属性的“问号”，等同于?。因此，前面的Partial<Type>的定义也可以写成下面这样。\",\"type Partial<T> = { [P in keyof T]+?: T[P]; };\"]},\"250\":{\"h\":\"\",\"t\":[\"ReadonlyArray<Type>用来生成一个只读数组类型，类型参数Type表示数组成员的类型。\",\"const values: ReadonlyArray<string> = ['a', 'b', 'c']; values[0] = 'x'; // 报错 values.push('x'); // 报错 values.pop(); // 报错 values.splice(1, 1); // 报错\",\"上面示例中，变量values的类型是一个只读数组，所以修改成员会报错，并且那些会修改源数组的方法push()、pop()、splice()等都不存在。ReadonlyArray<Type>的实现如下。\",\"interface ReadonlyArray<T> { readonly length: number; readonly [n: number]: T; // ... }\"]},\"251\":{\"h\":\"\",\"t\":[\"ReturnType<Type>提取函数类型Type的返回值类型，作为一个新类型返回。\",\"type T1 = ReturnType<() => string>; // string type T2 = ReturnType<() => { a: string; b: number }>; // { a: string; b: number } type T3 = ReturnType<(s: string) => void>; // void type T4 = ReturnType<() => () => any[]>; // () => any[] type T5 = ReturnType<typeof Math.random>; // number type T6 = ReturnType<typeof Array.isArray>; // boolean\",\"如果参数类型是泛型函数，返回值取决于泛型类型。如果泛型不带有限制条件，就会返回unknown。\",\"type T1 = ReturnType<<T>() => T>; // unknown type T2 = ReturnType< <T extends U, U extends number[]>() => T >; // number[]\",\"注意\",\"如果类型不是函数，会报错。\",\"type T1 = ReturnType<boolean>; // 报错 type T2 = ReturnType<Function>; // 报错 type T1 = ReturnType<any>; // any type T2 = ReturnType<never>; // never\",\"ReturnType<Type>的实现如下。\",\" type ReturnType< T extends (...args: any) => any > = T extends (...args: any) => infer R ? R : any;\"]},\"252\":{\"h\":\"\",\"t\":[\"ThisParameterType<Type>提取函数类型中this参数的类型。\",\"function toHex(this: number) { return this.toString(16); } type T = ThisParameterType<typeof toHex>; // number\",\"如果函数没有this参数，则返回unknown。ThisParameterType<Type>的实现如下。\",\"type ThisParameterType<T> = T extends (this: infer U, ...args: never ) => any ? U : unknown;\"]},\"253\":{\"h\":\"\",\"t\":[\"ThisType<Type>不返回类型，只用来跟其他类型组成交叉类型，用来提示 TypeScript 其他类型里面的this的类型。\",\"interface HelperThisValue { logError: (error: string) => void; } let helperFunctions: { [name: string]: Function } & ThisType<HelperThisValue> = { hello: function () { this.logError(\\\"Error: Something wrong!\\\"); // 正确this.update(); // 报错 } }\",\"上面示例中，变量helperFunctions的类型是一个正常的对象类型与ThisType<HelperThisValue>组成的交叉类型。 这里的ThisType的作用是提示 TypeScript，变量helperFunctions的this应该满足HelperThisValue的条件。所以，this.logError()可以正确调用，而this.update()会报错，因为HelperThisValue里面没有这个方法。 注意，使用这个类型工具时，必须打开noImplicitThis设置。 下面是另一个例子。\",\"let obj: ThisType<{ x: number }> & { getX: () => number }; obj = { getX() { return this.x + this.y; // 报错 }, };\",\"上面示例中，getX()里面的this.y会报错，因为根据ThisType<{ x: number }>，这个对象的this不包含属性y。ThisType<Type>的实现就是一个空接口。\"]},\"254\":{\"h\":\"字符串类型工具\",\"t\":[\"TypeScript 内置了四个字符串类型工具，专门用来操作字符串类型。这四个工具类型都定义在 TypeScript 自带的.d.ts文件里面。 它们的实现都是在底层调用 JavaScript 引擎提供 JavaScript 字符操作方法。\"]},\"255\":{\"h\":\"\",\"t\":[\"Uppercase<StringType>将字符串类型的每个字符转为大写。\",\"type A = 'hello'; // \\\"HELLO\\\" type B = Uppercase<A>;\"]},\"256\":{\"h\":\"\",\"t\":[\"Lowercase<StringType>将字符串的每个字符转为小写。\",\"type A = 'HELLO'; // \\\"hello\\\" type B = Lowercase<A>;\"]},\"257\":{\"h\":\"\",\"t\":[\"Capitalize<StringType>将字符串的第一个字符转为大写。\",\"type A = 'hello'; // \\\"Hello\\\" type B = Capitalize<A>;\"]},\"258\":{\"h\":\"\",\"t\":[\"Uncapitalize<StringType> 将字符串的第一个字符转为小写。\",\"type A = 'HELLO'; // \\\"hELLO\\\" type B = Uncapitalize<A>;\"]},\"259\":{\"c\":[\"TypeScript\"]},\"260\":{\"h\":\"tsconfig.json\"},\"261\":{\"h\":\"简介\",\"t\":[\"tsconfig.json是 TypeScript 项目的配置文件，放在项目的根目录。反过来说，如果一个目录里面有tsconfig.json，TypeScript 就认为这是项目的根目录。tsconfig.json文件主要供tsc编译器使用，它的命令行参数--project或-p可以指定tsconfig.json的位置\",\"tsc -p ./dir\"]},\"262\":{\"h\":\"基本结构\",\"t\":[\"tsconfig.json文件可以不必手写，使用 tsc 命令的--init参数自动生成。\",\"提示\",\"你也可以使用别人预先写好的 tsconfig.json 文件，npm 的@tsconfig名称空间下面有很多模块，都是写好的tsconfig.json样本，比如 @tsconfig/recommended和@tsconfig/node16\"]},\"263\":{\"h\":\"compilerOptions\"},\"264\":{\"h\":\"allowJs\",\"t\":[\"allowJs允许 TypeScript 项目加载 JS 脚本。编译时，也会将 JS 文件，一起拷贝到输出目录\",\"{ \\\"compilerOptions\\\": { \\\"allowJs\\\": true } }\"]},\"265\":{\"h\":\"alwaysStrict\",\"t\":[\"alwaysStrict确保脚本以 ECMAScript 严格模式进行解析，因此脚本头部不用写\\\"use strict\\\"。它的值是一个布尔值，默认为true。\"]},\"266\":{\"h\":\"allowSyntheticDefaultImports\",\"t\":[\"allowSyntheticDefaultImports允许import命令默认加载没有default输出的模块。\",\"比如，打开这个设置，就可以写import React from \\\"react\\\";，而不是import * as React from \\\"react\\\";\"]},\"267\":{\"h\":\"allowUnreachableCode\",\"t\":[\"allowUnreachableCode设置是否允许存在不可能执行到的代码。它的值有三种可能\",\"undefined： 默认值，编辑器显示警告。\",\"true：忽略不可能执行到的代码。\",\"false：编译器报错。\"]},\"268\":{\"h\":\"allowUnusedLabels\",\"t\":[\"allowUnusedLabels设置是否允许存在未使用的标签。它的值有三种可能\",\"undefined： 默认值，编辑器显示警告。\",\"true：忽略未使用的标签。\",\"false：编译器报错。\"]},\"269\":{\"h\":\"baseUrl\",\"t\":[\"baseUrl的值为字符串，指定 TypeScript 项目的基准目录。 由于默认是以 tsconfig.json 的位置作为基准目录，所以一般情况不需要使用该属性。\",\"{ \\\"compilerOptions\\\": { \\\"baseUrl\\\": \\\"./\\\" } }\",\"上面示例中，baseUrl为当前目录./。那么，当遇到下面的语句，TypeScript 将以./为起点，寻找hello/world.ts。\"]},\"270\":{\"h\":\"checkJs\",\"t\":[\"checkJS设置对 JS 文件同样进行类型检查。打开这个属性，也会自动打开allowJs。它等同于在 JS 脚本的头部添加// @ts-check命令。\"]},\"271\":{\"h\":\"composite\",\"t\":[\"composite打开某些设置，使得 TypeScript 项目可以进行增量构建，往往跟incremental属性配合使用。\"]},\"272\":{\"h\":\"declaration\",\"t\":[\"declaration设置编译时是否为每个脚本生成类型声明文件.d.ts。\"]},\"273\":{\"h\":\"declarationDir\",\"t\":[\"declarationDir设置生成的.d.ts文件所在的目录。\",\"{ \\\"compilerOptions\\\": { \\\"declaration\\\": true, \\\"declarationDir\\\": \\\"./types\\\" } }\"]},\"274\":{\"h\":\"declarationMap\",\"t\":[\"declarationMap设置生成.d.ts类型声明文件的同时，还会生成对应的 Source Map 文件。\",\"{ \\\"compilerOptions\\\": { \\\"declaration\\\": true, \\\"declarationMap\\\": true } }\"]},\"275\":{\"h\":\"diagnostics\",\"t\":[\"显示诊断信息\"]},\"276\":{\"h\":\"disableSizeLimit\",\"t\":[\"禁用JavaScript工程体积大小的限制\"]},\"277\":{\"h\":\"emitBOM\",\"t\":[\"emitBOM设置是否在编译结果的文件头添加字节顺序标志 BOM，默认值是false\"]},\"278\":{\"h\":\"emitDecoratorMetadata[实验性]\",\"t\":[\"给源码里的装饰器声明加上设计类型元数据。\"]},\"279\":{\"h\":\"experimentalDecorators[实验性]\",\"t\":[\"启用实验性的ES装饰器。\"]},\"280\":{\"h\":\"emitDeclarationOnly\",\"t\":[\"emitDeclarationOnly设置编译后只生成.d.ts文件，不生成.js文件\"]},\"281\":{\"h\":\"extendedDiagnostics\",\"t\":[\"显示详细的诊断信息\"]},\"282\":{\"h\":\"esModuleInterop\",\"t\":[\"esModuleInterop修复了一些 CommonJS 和 ES6 模块之间的兼容性问题。\",\"如果module属性为node16或nodenext，则esModuleInterop默认为true，其他情况默认为false。\",\"打开这个属性，使用import命令加载 CommonJS 模块时，TypeScript 会严格检查兼容性问题是否存在。\",\"import * as moment from \\\"moment\\\"; moment(); // 报错\",\"上面示例中，根据 ES6 规范，import * as moment里面的moment是一个对象，不能当作函数调用，所以第二行报错了。\",\"解决方法就是改写上面的语句，改成加载默认接口。\",\"import moment from \\\"moment\\\"; moment(); // 不报错\",\"打开esModuleInterop以后，如果将上面的代码编译成 CommonJS 模块格式，就会加入一些辅助函数，保证编译后的代码行为正确。\",\"提示\",\"注意，打开esModuleInterop，将自动打开allowSyntheticDefaultImports。\"]},\"283\":{\"h\":\"exactOptionalPropertyTypes\",\"t\":[\"exactOptionalPropertyTypes设置可选属性不能赋值为undefined。\",\"// 打开 exactOptionalPropertyTypes interface MyObj { foo?: \\\"A\\\" | \\\"B\\\"; } let obj: MyObj = {foo: \\\"A\\\"}; obj.foo = undefined; // 报错\",\"上面示例中，foo是可选属性，打开exactOptionalPropertyTypes以后，该属性就不能显式赋值为undefined。\"]},\"284\":{\"h\":\"forceConsistentCasingInFileNames\",\"t\":[\"forceConsistentCasingInFileNames设置文件名是否为大小写敏感，默认为true\"]},\"285\":{\"h\":\"incremental\",\"t\":[\"incremental让 TypeScript 项目构建时产生文件tsbuildinfo，从而完成增量构建\"]},\"286\":{\"h\":\"inlineSourceMap\",\"t\":[\"inlineSourceMap设置将 SourceMap 文件写入编译后的 JS 文件中，否则会单独生成一个.js.map文件。\"]},\"287\":{\"h\":\"inlineSources\",\"t\":[\"inlineSources设置将原始的.ts代码嵌入编译后的 JS 中。\",\"它要求sourceMap或inlineSourceMap至少打开一个。\"]},\"288\":{\"h\":\"isolatedModules\",\"t\":[\"isolatedModules设置如果当前 TypeScript 脚本作为单个模块编译，是否会因为缺少其他脚本的类型信息而报错，主要便于非官方的编译工具（比如 Babel）正确编译单个脚本。\"]},\"289\":{\"h\":\"jsx\",\"t\":[\"jsx设置如何处理.tsx文件。它一般以下三个值。\",\"preserve：保留JSX语法，输出的文件名为 jsx。\",\"react：将\",\"编译成React.createElement(\\\"div\\\")，输出的文件名为.js\",\"react-native：将\",\"编译成React.createElement(\\\"div\\\")，输出的文件名为.js，支持JSX转换。\",\"{ \\\"compilerOptions\\\": { \\\"jsx\\\": \\\"preserve\\\" } }\"]},\"290\":{\"h\":\"lib\",\"t\":[\"lib值是一个数组，描述项目需要加载的 TypeScript 内置类型描述文件，跟三斜线指令/// <reference lib=\\\"\\\" />作用相同。\",\"{ \\\"compilerOptions\\\": { \\\"lib\\\": [ \\\"dom\\\", \\\"es2021\\\" ] } }\"]},\"291\":{\"h\":\"listEmittedFiles\",\"t\":[\"listEmittedFiles设置编译时在终端显示，生成了哪些文件。\",\"{ \\\"compilerOptions\\\": { \\\"listEmittedFiles\\\": true } }\"]},\"292\":{\"h\":\"listFiles\",\"t\":[\"listFiles设置编译时在终端显示，参与本次编译的文件列表。\",\"{ \\\"compilerOptions\\\": { \\\"listFiles\\\": true } }\"]},\"293\":{\"h\":\"mapRoot\",\"t\":[\"mapRoot指定 SourceMap 文件的位置，而不是默认的生成位置。\",\"{ \\\"compilerOptions\\\": { \\\"sourceMap\\\": true, \\\"mapRoot\\\": \\\"https://my-website.com/debug/sourcemaps/\\\" } }\"]},\"294\":{\"h\":\"module\",\"t\":[\"module指定编译产物的模块格式。它的默认值与target属性有关，如果target是ES3或ES5，它的默认值是commonjs，否则就是ES6/ES2015。\"]},\"295\":{\"h\":\"moduleResolution\",\"t\":[\"moduleResolution确定模块路径的算法，即如何查找模块。它可以取以下四种值。\",\"node：采用 Node.js 的 CommonJS 模块算法。\",\"node16或nodenext：采用 Node.js 的 ECMAScript 模块算法，从 TypeScript 4.7 开始支持。\",\"classic：TypeScript 1.6 之前的算法，新项目不建议使用。\",\"它的默认值与module属性有关，如果module为AMD、UMD、System或ES6/ES2015，默认值为classic；如果module为node16或nodenext，默认值为这两个值；其他情况下,默认值为Node。\"]},\"296\":{\"h\":\"moduleSuffixes\",\"t\":[\"moduleSuffixes指定模块的后缀名。\",\"{ \\\"compilerOptions\\\": { \\\"moduleSuffixes\\\": [ \\\".ios\\\", \\\".native\\\", \\\"\\\" ] } }\",\"上面的设置使得 TypeScript 对于语句import * as foo from \\\"./foo\\\";，会搜索以下脚本./foo.ios.ts、./foo.native.ts和./foo.ts。\"]},\"297\":{\"h\":\"newLine\",\"t\":[\"newLine设置换行符为CRLF（Windows）还是LF（Linux）。\"]},\"298\":{\"h\":\"noEmit\",\"t\":[\"noEmit设置是否产生编译结果。如果不生成，TypeScript 编译就纯粹作为类型检查了。\"]},\"299\":{\"h\":\"noEmitHelpers\",\"t\":[\"noEmitHelpers设置在编译结果文件不插入 TypeScript 辅助函数，而是通过外部引入辅助函数来解决，比如 NPM 模块tslib。\"]},\"300\":{\"h\":\"exclude\",\"t\":[\"exclude属性是一个数组，必须与include属性一起使用，用来从编译列表中去除指定的文件。它也支持使用与include属性相同的通配符。\",\"include: 指定要包含在编译中的文件或目录，支持通配符\",\"exclude: 指定要排除在编译之外的文件或目录，默认排除node_modules、dist等\",\"{ \\\"include\\\": [ \\\"src/**/*\\\" ], \\\"exclude\\\": [ \\\"node_modules\\\", \\\"dist\\\" ] }\"]},\"301\":{\"h\":\"include\",\"t\":[\"include属性指定所要编译的文件列表，既支持逐一列出文件，也支持通配符。文件位置相对于当前配置文件而定。\",\"{ \\\"include\\\": [ \\\"src/**/*\\\", \\\"tests/**/*\\\" ] }\",\"include属性支持三种通配符\",\"?：指代单个字符\",\"*：指代任意字符，不含路径分隔符\",\"**：指定任意目录层级。\",\"如果不指定文件后缀名，默认包括.ts、.tsx和.d.ts文件。如果打开了allowJs，那么还包括.js和.jsx。\"]},\"302\":{\"h\":\"extends\",\"t\":[\"tsconfig.json可以继承另一个tsconfig.json文件的配置。如果一个项目有多个配置，可以把共同的配置写成tsconfig.base.json，其他的配置文件继承该文件，这样便于维护和修改。\",\"extends属性用来指定所要继承的配置文件。它可以是本地文件。\"]},\"303\":{\"h\":\"references\",\"t\":[\"references属性是一个数组，数组成员为对象，适合一个大项目由许多小项目构成的情况，用来设置需要引用的底层项目。\",\"{ \\\"references\\\": [ { \\\"path\\\": \\\"../pkg1\\\" }, { \\\"path\\\": \\\"../pkg2/tsconfig.json\\\" } ] }\"]},\"304\":{\"h\":\"files\",\"t\":[\"files属性指定编译的文件列表，如果其中有一个文件不存在，就会报错。\",\"它是一个数组，排在前面的文件先编译。\",\"{ \\\"files\\\": [ \\\"a.ts\\\", \\\"b.ts\\\" ] }\",\"注意\",\"该属性必须逐一列出文件，不支持文件匹配。如果文件较多，建议使用include和exclude属性。\"]},\"305\":{\"c\":[\"TypeScript\"]},\"306\":{\"h\":\"Vue3 相当于Vue2 的提升\"},\"307\":{\"h\":\"响应式原理(Proxy)\",\"t\":[\"Vue3 使用了 Proxy 来实现响应式系统，而 Vue2 使用的是 Object.defineProperty。Proxy[ES6] 提供了更强大的功能，可以直接监听对象的新增和删除属性，而不需要像 Vue2 那样使用 Vue.set 和 Vue.delete。 这使得 Vue3 的响应式系统更加高效和灵活。\"]},\"308\":{\"h\":\"碎片化(Fragments)\",\"t\":[\"Vue3 支持组件的多个根节点，这被称为“碎片化”（Fragments）。在 Vue2 中，每个组件只能有一个根节点，而 Vue3 允许组件返回多个根节点，这使得组件的结构更加灵活。\"]},\"309\":{\"h\":\"异步组件(Suspense)\",\"t\":[\"Vue3 引入了 Suspense 组件，用于处理异步组件的加载状态。\",\" import {defineAsyncComponent} from \\\"vue\\\"; const AsyncComp = defineAsyncComponent(() => { return new Promise((resolve, reject) => { // ...load component from server resolve(/* loaded component */) }) }) const AsyncPopup = defineAsyncComponent({ loader: () => import('./ArticleList.vue'), // 加载异步组件时使用的组件 loadingComponent: LoadingComponent, // 加载失败时使用的组件 errorComponent: ErrorComponent, // 在显示加载组件之前延迟。默认值：200ms。 delay: 1000, // 超过给定时间，则会显示错误组件。默认值：Infinity。 timeout: 3000 })\",\" <Suspense> <template #default> <async-component/> </template> <template #fallback> Loading ... </template> </Suspense>\"]},\"310\":{\"h\":\"传送门(teleport)\",\"t\":[\"它可以将一个组件内部的一部分模板“传送”到该组件的 DOM 结构外层的位置去。\",\" <Teleport to=\\\"body\\\"></Teleport>\"]},\"311\":{\"h\":\"禁用 Teleport\",\"t\":[\" <Teleport :disabled=\\\"isMobile\\\"> ... </Teleport>\"]},\"312\":{\"h\":\"延迟解析的 Teleport\",\"t\":[\"在 Vue 3.5 及更高版本中，我们可以使用 defer prop 推迟 Teleport 的目标解析，直到应用的其他部分挂载。这允许 Teleport 将由 Vue 渲染且位于组件树之后部分的容器元素作为目标\",\" <Teleport defer to=\\\"#late-div\\\">...</Teleport> <!-- 稍后出现于模板中的某处 --> <div id=\\\"late-div\\\"></div>\"]},\"313\":{\"h\":\"更小的核心代码\",\"t\":[\"核心代码 + compositionApi：13.5kb ---- vue2为31.94kb\",\"所有Runtime: 22.5kb ---- vue2 为32kb\"]},\"314\":{\"h\":\"更快的速度\",\"t\":[\"SSR速度提高2-3 倍\",\"初始渲染/更新速度最高提高一倍\",\"内存占用减少一半\"]},\"315\":{\"h\":\"更好的TypeScript支持\"},\"316\":{\"c\":[\"Vue3\"]},\"317\":{\"h\":\"服务端渲染\",\"t\":[\"提示\",\"在默认情况下Vue 的职责是在浏览器中生成和操作DOM。Vue也支持将组件在服务器端直接渲染成HTML 字符串，作为服务端响应返回给浏览器，最后在浏览器端将静态的HTML ‘激活’为能够交互的客户端应用。\"]},\"318\":{\"h\":\"优点\",\"t\":[\"更快的首屏加载\",\"统一的心智模型\",\"更好的SEO\"]},\"319\":{\"h\":\"首屏加载\",\"t\":[\"这一点在慢网速或者运行缓慢的设备上比较重要，渲染的HTML 无需等待JavaScript的下载和执行，用户是可以更快的看到完整的渲染页面。除此之外，获取数据的首次访问也在服务端完成，这样就会有更快 的数据反应\"]},\"320\":{\"h\":\"心智模型\",\"t\":[\"你可以使用相同的语言以及相同的声明式、面相组件的心智模型来开发整个应用，而不需要在后端模版系统和前端框架之间来回切换。\"]},\"321\":{\"h\":\"SEO\",\"t\":[\"搜索爬虫可以直接看到完全渲染的页面\"]},\"322\":{\"h\":\"缺点\",\"t\":[\"开发存在限制\",\"Node环境\",\"服务端负载\"]},\"323\":{\"h\":\"开发限制\",\"t\":[\"浏览器特定的代码只能在某些生命周期钩子中使用，一些外部库可能需要特殊处理凯能在服务端渲染的应用中运行\"]},\"324\":{\"h\":\"Node 环境\",\"t\":[\"更多的与构件配置和部署相关的要求。服务端渲染的应用需要一个能让Node.js 服务器运行的环境，不像完全静态的SPA那样可以直接部署在任意的静态文件服务器上。\"]},\"325\":{\"h\":\"服务端负载\",\"t\":[\"在Node.JS 中渲染一个完整的应用要比仅仅托管静态文件更加占用CPU资源\"]},\"326\":{\"c\":[\"Vue3\"]},\"327\":{\"h\":\"Vue常用指令(Directive)\"},\"328\":{\"h\":\"Permission\",\"t\":[\"/** * 权限指令 * @description 和权限判断函数 checkPermission 功能类似 */ const permission: Directive = { mounted(el, binding) { const {value: permissionRoles} = binding const {roles} = useUserStore() if (isArray(permissionRoles) && permissionRoles.length > 0) { const hasPermission = roles.some(role => permissionRoles.includes(role)) if (!hasPermission) el.parentNode?.removeChild(el) } else { throw new Error('参数必须是一个数组且长度大于 0') } } }\"]},\"329\":{\"h\":\"自动聚焦\",\"t\":[\"const focus: Directive = { mounted(el) { el.focus() } }\"]},\"330\":{\"h\":\"图片懒加载\",\"t\":[\"/** * 图片懒加载 img标签使用 */ const lazyLoad: Directive = { mounted(el, binding) { const observer = new IntersectionObserver(entries => { entries.forEach(entry => { if (entry.isIntersecting) { el.src = binding.value observer.unobserve(el) } }) }) observer.observe(el) } }\"]},\"331\":{\"h\":\"防抖指令\",\"t\":[\"/** * 防抖指令 */ const debounce: Directive = { mounted(el, binding) { const eventType = binding.arg || 'click' const delay = 300 const originalHandler = binding.value const debouncedHandler = lodashDebounce((...args) => { originalHandler && originalHandler(...args) }, delay) el.__vueClickHandler__ = debouncedHandler el.addEventListener(eventType, debouncedHandler) }, unmounted(el, binding) { const eventType = binding.arg || 'click' const originalHandler = el.__vueClickHandler__ if (originalHandler) { el.removeEventListener(eventType, originalHandler) } } }\"]},\"332\":{\"c\":[\"Vue3\"]},\"333\":{\"h\":\"Loader\"},\"334\":{\"h\":\"概述\",\"t\":[\"Loader用于对模块源代码进行转换，在import或加载模块时预处理文件 默认情况下，在遇到import或者require加载模块的时候，webpack只支持对js和json文件打包。像css、sass、png等这些类型的文件的时候，webpack则无能为力，这个时候就需要配置对应的loader进行文件内容的解析。\",\"img.png\"]},\"335\":{\"h\":\"使用方式\",\"t\":[\"module.export = { module: { rules: [ { test: /\\\\.csss$/, use: [ {loader: 'style-loader'}, { loader: 'css-loader', options: { modules: true } }, {loader: 'sass-loader'} ] } ] } }\"]},\"336\":{\"h\":\"特点\",\"t\":[\"因为loader支持链式调用，联众的每个loader会处理之前已处理过的资源，最终变为js代码。顺序为相反的顺序执行，即上述执行方式为sass-loader、css-loader、style-loader\",\"loader可以是同步的，也可以是异步的\",\"loader运行在Nodejs中，并且能够执行任何操作。\",\"除了常见的通过package.json的面来讲一个npm模块导出为loader，还可以在module.rules中使用loader字段直接引用一个模块。\",\"插件（plugin）可以为loader带来更多特性\",\"loader能够产生额外的任意文件。\"]},\"337\":{\"h\":\"常见的loader\",\"t\":[\"Style-loader 将css添加到Dom的内联样式标签style中\",\"Css-loader 允许将css文件通过require的方式引入，并返回css代码\",\"Less-loader 处理less\",\"Sass-loader 处理sass\",\"Postcss-loader 处理css\",\"Autoprefixer-loader 处理css 已弃用\",\"File-loader 分发文件到output目录并返回相对路径\",\"Url-loader 和file-loader类似，但是当文件小于设定的limit时可以返回一个Data Url\",\"Html-minify-loader 压缩HTML\",\"babel-loader 用babel来转化ES6文件到其他版本\"]},\"338\":{\"c\":[\"Webpack\"]},\"339\":{\"h\":\"ces\"},\"340\":{\"c\":[\"JavaScript\"]},\"341\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"342\":{\"h\":\"Java Script\"},\"343\":{\"h\":\"Git\"},\"344\":{\"h\":\"Project\"},\"345\":{\"h\":\"Type Script\"},\"346\":{\"h\":\"Vue3\"},\"347\":{\"h\":\"Webpack\"},\"348\":{\"h\":\"Aaa\"}},\"dirtCount\":0,\"index\":[[\"压缩html\",{\"1\":{\"337\":1}}],[\"已弃用\",{\"1\":{\"337\":1}}],[\"已经推断确定了类型\",{\"1\":{\"191\":1}}],[\"常见的loader\",{\"0\":{\"337\":1}}],[\"常用\",{\"0\":{\"186\":1}}],[\"常用操作\",{\"0\":{\"174\":1}}],[\"常用的方法包括\",{\"1\":{\"152\":1}}],[\"常用于根据不同的条件\",{\"1\":{\"42\":1}}],[\"顺序为相反的顺序执行\",{\"1\":{\"336\":1}}],[\"联众的每个loader会处理之前已处理过的资源\",{\"1\":{\"336\":1}}],[\"联合类型a|b表示\",{\"1\":{\"219\":1}}],[\"联合类型\",{\"0\":{\"219\":1},\"1\":{\"219\":1}}],[\"自动聚焦\",{\"0\":{\"329\":1}}],[\"自带的\",{\"1\":{\"254\":1}}],[\"功能类似\",{\"1\":{\"328\":1}}],[\"权限指令\",{\"1\":{\"328\":1}}],[\"权限控制\",{\"1\":{\"59\":1}}],[\"服务器运行的环境\",{\"1\":{\"324\":1}}],[\"服务端负载\",{\"0\":{\"325\":1},\"1\":{\"322\":1}}],[\"服务端渲染的应用需要一个能让node\",{\"1\":{\"324\":1}}],[\"服务端渲染\",{\"0\":{\"317\":1}}],[\"浏览器特定的代码只能在某些生命周期钩子中使用\",{\"1\":{\"323\":1}}],[\"浏览器窗口缩放\",{\"1\":{\"125\":1}}],[\"缺点\",{\"0\":{\"322\":1}}],[\"搜索爬虫可以直接看到完全渲染的页面\",{\"1\":{\"321\":1}}],[\"面相组件的心智模型来开发整个应用\",{\"1\":{\"320\":1}}],[\"心智模型\",{\"0\":{\"320\":1}}],[\"渲染的html\",{\"1\":{\"319\":1}}],[\"渲染且位于组件树之后部分的容器元素作为目标\",{\"1\":{\"312\":1}}],[\"首屏加载\",{\"0\":{\"319\":1}}],[\"首先\",{\"1\":{\"204\":1}}],[\"首先是一个运行在后台的\",{\"1\":{\"160\":1}}],[\"统一的心智模型\",{\"1\":{\"318\":1}}],[\"激活\",{\"1\":{\"317\":1}}],[\"初始渲染\",{\"1\":{\"314\":1}}],[\"初始化仓库\",{\"1\":{\"174\":1}}],[\"倍\",{\"1\":{\"314\":1}}],[\"核心代码\",{\"1\":{\"313\":1}}],[\"稍后出现于模板中的某处\",{\"1\":{\"312\":1}}],[\"及更高版本中\",{\"1\":{\"312\":1}}],[\"及早发现错误\",{\"1\":{\"217\":1}}],[\"延迟解析的\",{\"0\":{\"312\":1}}],[\"延迟加载\",{\"1\":{\"60\":1}}],[\"到该组件的\",{\"1\":{\"310\":1}}],[\"传送\",{\"1\":{\"310\":1}}],[\"传送门\",{\"0\":{\"310\":1}}],[\"传入了一个字符串hello\",{\"1\":{\"190\":1}}],[\"传入其他类型的值就会报错\",{\"1\":{\"190\":1}}],[\"超过给定时间\",{\"1\":{\"309\":1}}],[\"加载失败时使用的组件\",{\"1\":{\"309\":1}}],[\"加载异步组件时使用的组件\",{\"1\":{\"309\":1}}],[\"异步组件\",{\"0\":{\"309\":1}}],[\"异步存取\",{\"1\":{\"35\":1}}],[\"碎片化\",{\"0\":{\"308\":1},\"1\":{\"308\":1}}],[\"那样使用\",{\"1\":{\"307\":1}}],[\"那么还包括\",{\"1\":{\"301\":1}}],[\"那么就会原样返回\",{\"1\":{\"236\":1}}],[\"那么就重新计时并不执行函数\",{\"1\":{\"124\":1}}],[\"那么它的类型只能是\",{\"1\":{\"207\":1}}],[\"那么\",{\"1\":{\"204\":1,\"227\":1,\"269\":1}}],[\"响应式原理\",{\"0\":{\"307\":1}}],[\"排在前面的文件先编译\",{\"1\":{\"304\":1}}],[\"排队请求或记录请求\",{\"1\":{\"93\":1}}],[\"既支持逐一列出文件\",{\"1\":{\"301\":1}}],[\"辅助函数\",{\"1\":{\"299\":1}}],[\"6\",{\"1\":{\"295\":1}}],[\"600\",{\"1\":{\"141\":2}}],[\"600px\",{\"1\":{\"141\":1}}],[\"7\",{\"1\":{\"295\":1}}],[\"采用\",{\"1\":{\"295\":2}}],[\"参与本次编译的文件列表\",{\"1\":{\"292\":1}}],[\"参数必须是一个数组且长度大于\",{\"1\":{\"328\":1}}],[\"参数keys的类型必须兼容string|number|symbol\",{\"1\":{\"248\":1}}],[\"参数keys可以是联合类型\",{\"1\":{\"248\":1}}],[\"参数keys用作键名\",{\"1\":{\"248\":1}}],[\"参数type用作键值类型\",{\"1\":{\"248\":1}}],[\"参数type是一个构造函数\",{\"1\":{\"240\":1}}],[\"参数\",{\"1\":{\"243\":2}}],[\"参数变量x可能是字符串\",{\"1\":{\"205\":1}}],[\"参数列表的圆括号后面\",{\"1\":{\"196\":1}}],[\"参数等\",{\"1\":{\"192\":1}}],[\"参数是包含\",{\"1\":{\"146\":1}}],[\"生成了哪些文件\",{\"1\":{\"291\":1}}],[\"生态\",{\"1\":{\"193\":1}}],[\"跟三斜线指令\",{\"1\":{\"290\":1}}],[\"跟推断的类型不一致\",{\"1\":{\"197\":1}}],[\"描述项目需要加载的\",{\"1\":{\"290\":1}}],[\"改成加载默认接口\",{\"1\":{\"282\":1}}],[\"规范\",{\"1\":{\"282\":1}}],[\"规定\",{\"1\":{\"218\":1}}],[\"根据\",{\"1\":{\"282\":1}}],[\"启用实验性的es装饰器\",{\"1\":{\"279\":1}}],[\"启动计算机\",{\"1\":{\"70\":1}}],[\"显示详细的诊断信息\",{\"1\":{\"281\":1}}],[\"显示诊断信息\",{\"1\":{\"275\":1}}],[\"显示所有的远程仓库\",{\"1\":{\"176\":1}}],[\"往往跟incremental属性配合使用\",{\"1\":{\"271\":1}}],[\"往往非常痛苦\",{\"1\":{\"192\":1}}],[\"寻找hello\",{\"1\":{\"269\":1}}],[\"忽略未使用的标签\",{\"1\":{\"268\":1}}],[\"忽略不可能执行到的代码\",{\"1\":{\"267\":1}}],[\"严格模式进行解析\",{\"1\":{\"265\":1}}],[\"放在项目的根目录\",{\"1\":{\"261\":1}}],[\"专门用来操作字符串类型\",{\"1\":{\"254\":1}}],[\"符号+\",{\"1\":{\"249\":1}}],[\"符号\",{\"1\":{\"249\":1}}],[\"符合单一职责原则\",{\"1\":{\"76\":1}}],[\"展开成两个键名a和b\",{\"1\":{\"248\":1}}],[\"展示\",{\"0\":{\"9\":1}}],[\"李四\",{\"1\":{\"247\":1}}],[\"张三\",{\"1\":{\"247\":1}}],[\"获取数据的首次访问也在服务端完成\",{\"1\":{\"319\":1}}],[\"获取参数类型\",{\"1\":{\"244\":1}}],[\"获取线上最新版信息记录\",{\"1\":{\"176\":1}}],[\"k>>\",{\"1\":{\"242\":1}}],[\"k\",{\"1\":{\"242\":1,\"246\":2,\"248\":1}}],[\"keys>会从对象类型a里面挑出指定的键名\",{\"1\":{\"246\":1}}],[\"keys>返回一个新的对象类型\",{\"1\":{\"246\":1}}],[\"keys>的实现如下\",{\"1\":{\"242\":1,\"246\":1}}],[\"keys>从对象类型a里面删除指定属性\",{\"1\":{\"242\":1}}],[\"keys>用来从对象类型type中\",{\"1\":{\"242\":1}}],[\"keyof\",{\"1\":{\"186\":3,\"242\":1,\"245\":1,\"246\":1,\"247\":3,\"249\":2}}],[\"keypath\",{\"1\":{\"162\":1}}],[\"keyup\",{\"1\":{\"124\":1}}],[\"key\",{\"1\":{\"36\":4,\"73\":1,\"86\":1,\"110\":10,\"186\":2}}],[\"z\",{\"1\":{\"242\":1,\"246\":1}}],[\"消掉\",{\"1\":{\"238\":1}}],[\"转换成一个逗号分隔的序列\",{\"1\":{\"233\":1}}],[\"转为数值时为nan\",{\"1\":{\"114\":1}}],[\"转为数值时为0\",{\"1\":{\"114\":1}}],[\"成员数量的推断\",{\"0\":{\"232\":1}}],[\"读取成员类型\",{\"1\":{\"230\":1}}],[\"越界的成员会报错\",{\"1\":{\"230\":1}}],[\"越是大型的\",{\"1\":{\"192\":1}}],[\"问号\",{\"1\":{\"249\":2}}],[\"问号只能用于元组的尾部成员\",{\"1\":{\"230\":1}}],[\"问题就这样留到运行时才会暴露\",{\"1\":{\"203\":1}}],[\"元组也可以是只读的\",{\"1\":{\"231\":1}}],[\"元组可以通过方括号\",{\"1\":{\"230\":1}}],[\"元组的成员可以添加成员名\",{\"1\":{\"230\":1}}],[\"元组的成员数量是有限的\",{\"1\":{\"230\":1}}],[\"元组包含多少个成员\",{\"1\":{\"230\":1}}],[\"元组成员的类型可以添加问号后缀\",{\"1\":{\"230\":1}}],[\"元组\",{\"0\":{\"230\":1},\"1\":{\"230\":1}}],[\"元素接口\",{\"1\":{\"102\":1,\"104\":1}}],[\"反过来说\",{\"1\":{\"261\":1}}],[\"反过来就不行\",{\"1\":{\"228\":1}}],[\"反过来是可以的\",{\"1\":{\"218\":1}}],[\"断言\",{\"0\":{\"228\":1}}],[\"允许将css文件通过require的方式引入\",{\"1\":{\"337\":1}}],[\"允许组件返回多个根节点\",{\"1\":{\"308\":1}}],[\"允许声明只读数组\",{\"1\":{\"228\":1}}],[\"允许使用方括号读取数组成员的类型\",{\"1\":{\"226\":1}}],[\"允许你存储和检索用键索引的对象可以存储结构化克隆算法支持的任何对象\",{\"1\":{\"35\":1}}],[\"块级类型声明\",{\"0\":{\"223\":1}}],[\"影响不到外部\",{\"1\":{\"221\":1}}],[\"别名支持使用表达式\",{\"1\":{\"221\":1}}],[\"别名的作用域是块级作用域\",{\"1\":{\"221\":1}}],[\"别名不允许重名\",{\"1\":{\"221\":1}}],[\"交叉类型a\",{\"1\":{\"220\":1}}],[\"交叉类型\",{\"0\":{\"220\":1},\"1\":{\"220\":1}}],[\"紫\",{\"1\":{\"219\":1}}],[\"蓝\",{\"1\":{\"219\":1}}],[\"青\",{\"1\":{\"219\":1}}],[\"绿\",{\"1\":{\"219\":1}}],[\"黄\",{\"1\":{\"219\":1}}],[\"橙\",{\"1\":{\"219\":1}}],[\"赤\",{\"1\":{\"219\":1}}],[\"父类型不能赋值给子类型\",{\"1\":{\"218\":1}}],[\"遇到const命令声明的变量\",{\"1\":{\"218\":1}}],[\"遇到这种情况是不报错的\",{\"1\":{\"192\":1}}],[\"称为\",{\"1\":{\"218\":1}}],[\"又是类型\",{\"1\":{\"217\":1}}],[\"小写的object类型代表\",{\"1\":{\"216\":1}}],[\"事实上\",{\"1\":{\"215\":1}}],[\"事件监听消息\",{\"1\":{\"148\":1}}],[\"事件处理函数就会执行一次\",{\"1\":{\"124\":1}}],[\"事件总线\",{\"1\":{\"84\":1,\"86\":1}}],[\"除此之外\",{\"1\":{\"319\":1}}],[\"除了常见的通过package\",{\"1\":{\"336\":1}}],[\"除了undefined和null这两个值不能转为对象\",{\"1\":{\"215\":1}}],[\"除了any\",{\"1\":{\"204\":1}}],[\"除了any类型和unknown类型\",{\"1\":{\"204\":1,\"217\":1}}],[\"除非使用下面的写法\",{\"1\":{\"213\":1}}],[\"第二个参数number是a的键值类型\",{\"1\":{\"248\":1}}],[\"第二个参数keys是type里面被选定的键名\",{\"1\":{\"246\":1}}],[\"第二行是包装对象\",{\"1\":{\"213\":1}}],[\"第一个参数是联合类型\",{\"1\":{\"248\":1}}],[\"第一个参数type是一个对象类型\",{\"1\":{\"246\":1}}],[\"第一行是字面量\",{\"1\":{\"213\":1}}],[\"五种包装对象之中\",{\"1\":{\"212\":1}}],[\"字符操作方法\",{\"1\":{\"254\":1}}],[\"字符串\",{\"1\":{\"317\":1}}],[\"字符串类型工具\",{\"0\":{\"254\":1}}],[\"字符串会自动转为包装对象\",{\"1\":{\"212\":1}}],[\"字符串hello执行了charat\",{\"1\":{\"212\":1}}],[\"字面量new\",{\"1\":{\"213\":1}}],[\"字面量格式可以是十进制\",{\"1\":{\"114\":1}}],[\"字面值为true和false\",{\"1\":{\"114\":1}}],[\"静态只读属性foo的类型就是unique\",{\"1\":{\"207\":1}}],[\"静态类型将这些灵活性都剥夺了\",{\"1\":{\"193\":1}}],[\"静态类型也存在一些缺点\",{\"1\":{\"193\":1}}],[\"静态类型的缺点\",{\"0\":{\"193\":1}}],[\"静态类型的优点\",{\"0\":{\"192\":1}}],[\"静态类型有很多好处\",{\"1\":{\"192\":1}}],[\"目前无法识别这种情况\",{\"1\":{\"207\":1}}],[\"目标接口\",{\"1\":{\"53\":1,\"55\":1}}],[\"类似于字符串\",{\"1\":{\"207\":1}}],[\"类型参数type表示数组成员的类型\",{\"1\":{\"250\":1}}],[\"类型参数是一个构造函数new\",{\"1\":{\"240\":1}}],[\"类型工具\",{\"0\":{\"235\":1}}],[\"类型与\",{\"0\":{\"214\":1}}],[\"类型无法直接获取它们的包装对象\",{\"1\":{\"212\":1}}],[\"类型和\",{\"1\":{\"212\":1,\"213\":1}}],[\"类型大全\",{\"0\":{\"210\":1}}],[\"类型为\",{\"1\":{\"208\":4}}],[\"类型为数值\",{\"1\":{\"190\":1}}],[\"类型是\",{\"1\":{\"207\":1}}],[\"类型是人为添加的一种编程约束和用法提示\",{\"1\":{\"190\":1}}],[\"类型的包装对象\",{\"1\":{\"213\":1}}],[\"类型的一个作用\",{\"1\":{\"207\":1}}],[\"类型的子类型\",{\"1\":{\"207\":1}}],[\"类型的变量\",{\"1\":{\"207\":1,\"208\":2}}],[\"类型的概念\",{\"0\":{\"190\":1}}],[\"类型缩小以后再使用\",{\"1\":{\"204\":1}}],[\"类型缩小\",{\"1\":{\"204\":3}}],[\"类型表示没有任何限制\",{\"1\":{\"203\":1}}],[\"类型推断就不会更新\",{\"1\":{\"227\":1}}],[\"类型推断的自动更新只发生初始值为空数组的情况\",{\"1\":{\"227\":1}}],[\"类型推断问题\",{\"1\":{\"203\":1}}],[\"类型推断\",{\"0\":{\"197\":1,\"208\":1}}],[\"类型声明并不是必需的\",{\"1\":{\"197\":1}}],[\"类型声明的写法\",{\"1\":{\"196\":1}}],[\"类型声明\",{\"0\":{\"196\":1}}],[\"类型系统通常比较复杂\",{\"1\":{\"193\":1}}],[\"类型信息能够提供的帮助越大\",{\"1\":{\"192\":1}}],[\"类型信息大大减轻了重构的成本\",{\"1\":{\"192\":1}}],[\"类型信息可以部分替代代码文档\",{\"1\":{\"192\":1}}],[\"类型\",{\"0\":{\"204\":1,\"205\":1,\"214\":1,\"215\":1,\"216\":1},\"1\":{\"42\":1,\"115\":5,\"190\":1,\"196\":1,\"205\":1,\"222\":2,\"236\":1}}],[\"某个具体的\",{\"1\":{\"207\":1}}],[\"里面的this\",{\"1\":{\"253\":1}}],[\"里面的狭义对象\",{\"1\":{\"216\":1}}],[\"里面\",{\"1\":{\"206\":1,\"222\":1,\"223\":1}}],[\"里面都会报错\",{\"1\":{\"191\":1}}],[\"值类型可能会出现一些很奇怪的报错\",{\"1\":{\"218\":1}}],[\"值类型\",{\"0\":{\"218\":1},\"1\":{\"218\":1}}],[\"值变量的类型\",{\"1\":{\"208\":1}}],[\"值当作属性名\",{\"1\":{\"207\":1}}],[\"值时\",{\"1\":{\"207\":1}}],[\"值的情况\",{\"1\":{\"207\":1}}],[\"值的那种值类型\",{\"1\":{\"207\":1}}],[\"值的类型是数值\",{\"1\":{\"191\":1}}],[\"值不存在字面量\",{\"1\":{\"207\":1}}],[\"值\",{\"1\":{\"207\":4}}],[\"值通过symbol\",{\"1\":{\"206\":1}}],[\"底层类型\",{\"1\":{\"205\":2}}],[\"任何一个类型必须同时属于a和b\",{\"1\":{\"220\":1}}],[\"任何一个类型只要属于a或b\",{\"1\":{\"219\":1}}],[\"任何类型都包含了never类型\",{\"1\":{\"205\":1}}],[\"任务列表\",{\"0\":{\"19\":1}}],[\"空对象\",{\"1\":{\"215\":1}}],[\"空集是任何集合的子集\",{\"1\":{\"205\":1}}],[\"空类型\",{\"1\":{\"205\":2}}],[\"各种其他类型的变量都可以赋值为f\",{\"1\":{\"205\":1}}],[\"剩下不兼容的类型\",{\"1\":{\"238\":1}}],[\"剩下的五种属于原始类型\",{\"1\":{\"212\":1}}],[\"剩下的最后那个else分支里面\",{\"1\":{\"205\":1}}],[\"剩余的情况就属于never类型\",{\"1\":{\"205\":1}}],[\"判断了这两种情况后\",{\"1\":{\"205\":1}}],[\"详见\",{\"1\":{\"205\":1}}],[\"详见后面章节\",{\"1\":{\"205\":1}}],[\"另一种用在类型相关的\",{\"1\":{\"222\":1}}],[\"另一方面\",{\"1\":{\"190\":1}}],[\"另外\",{\"1\":{\"205\":1}}],[\"才属于交叉类型a\",{\"1\":{\"220\":1}}],[\"才允许使用它\",{\"1\":{\"204\":1}}],[\"才能调用它的length属性\",{\"1\":{\"204\":1}}],[\"确定变量s的类型为字符串以后\",{\"1\":{\"204\":1}}],[\"确保不会出错\",{\"1\":{\"204\":1}}],[\"确保类型正确\",{\"1\":{\"193\":1}}],[\"确保某些步骤的执行顺序\",{\"1\":{\"79\":1}}],[\"确保享元对象的复用\",{\"1\":{\"71\":1}}],[\"确保同一系列的产品一起使用\",{\"1\":{\"44\":1}}],[\"能够确定实际类型是number\",{\"1\":{\"204\":1}}],[\"答案是只有经过\",{\"1\":{\"204\":1}}],[\"再次\",{\"1\":{\"204\":1}}],[\"再次调用时直接显示\",{\"1\":{\"61\":1}}],[\"其实属于两个值类型\",{\"1\":{\"207\":1}}],[\"其次\",{\"1\":{\"204\":1}}],[\"其他的配置文件继承该文件\",{\"1\":{\"302\":1}}],[\"其他情况下\",{\"1\":{\"295\":1}}],[\"其他情况默认为false\",{\"1\":{\"282\":1}}],[\"其他类型里面的this的类型\",{\"1\":{\"253\":1}}],[\"其他类型的变量不能赋值为undefined或null\",{\"1\":{\"219\":1}}],[\"其他任何值都可以赋值给object类型\",{\"1\":{\"215\":1}}],[\"其他运算都会报错\",{\"1\":{\"204\":1}}],[\"其他变量的问题\",{\"1\":{\"204\":1}}],[\"其他变量\",{\"1\":{\"203\":1,\"204\":1}}],[\"其他修改\",{\"1\":{\"174\":1}}],[\"其他人可以通过克隆\",{\"1\":{\"170\":1}}],[\"把这种情况称为\",{\"1\":{\"205\":1}}],[\"把错误留到运行时\",{\"1\":{\"203\":1}}],[\"把基于当前分支新建分支\",{\"1\":{\"175\":1}}],[\"污染其他具有正确类型的变量\",{\"1\":{\"203\":1}}],[\"污染\",{\"1\":{\"203\":1,\"204\":2}}],[\"污染问题\",{\"1\":{\"203\":1}}],[\"赋值给any和unknown以外类型的变量都会报错\",{\"1\":{\"204\":1}}],[\"赋值\",{\"1\":{\"203\":1}}],[\"必须与include属性一起使用\",{\"1\":{\"300\":1}}],[\"必须打开noimplicitthis设置\",{\"1\":{\"253\":1}}],[\"必须把它当成值\",{\"1\":{\"240\":1}}],[\"必须通过变量来引用\",{\"1\":{\"207\":1}}],[\"必须同时进行初始化\",{\"1\":{\"203\":1}}],[\"必须自己推断类型的那些变量\",{\"1\":{\"203\":1}}],[\"否则就是es6\",{\"1\":{\"294\":1}}],[\"否则就失去了使用\",{\"1\":{\"203\":1}}],[\"否则会单独生成一个\",{\"1\":{\"286\":1}}],[\"否则会报错\",{\"1\":{\"246\":1}}],[\"否则不能用作键名\",{\"1\":{\"248\":1}}],[\"否则返回当前类型t\",{\"1\":{\"238\":1}}],[\"否则因为竖杠|的优先级低于\",{\"1\":{\"226\":1}}],[\"否则都会报错\",{\"1\":{\"205\":1}}],[\"否则报错\",{\"1\":{\"203\":1}}],[\"否则可能存在安全隐患\",{\"1\":{\"203\":1}}],[\"建议使用include和exclude属性\",{\"1\":{\"304\":1}}],[\"建议使用let和var声明变量时\",{\"1\":{\"203\":1}}],[\"建议总是使用小写类型object\",{\"1\":{\"216\":1}}],[\"建造者接口\",{\"1\":{\"48\":1}}],[\"建造者\",{\"1\":{\"46\":1}}],[\"建造者模式是一种创建型设计模式\",{\"1\":{\"46\":1}}],[\"建造者模式\",{\"0\":{\"46\":1}}],[\"防止像any那样可以随意乱用\",{\"1\":{\"204\":1}}],[\"防止被推断为any\",{\"1\":{\"203\":1}}],[\"防抖指令\",{\"0\":{\"331\":1},\"1\":{\"331\":1}}],[\"防抖函数\",{\"1\":{\"124\":1}}],[\"防抖节流\",{\"0\":{\"123\":1}}],[\"防抖\",{\"0\":{\"124\":1},\"1\":{\"37\":1}}],[\"怎么才能使用unknown类型变量呢\",{\"1\":{\"204\":1}}],[\"怎么用都可以\",{\"1\":{\"203\":1}}],[\"怎么使用都可以\",{\"1\":{\"203\":1}}],[\"意为涵盖了所有下层\",{\"1\":{\"203\":1}}],[\"顶层类型\",{\"1\":{\"203\":1,\"205\":1}}],[\"认为转换后的参数个数是不确定的\",{\"1\":{\"233\":1}}],[\"认为\",{\"1\":{\"203\":1}}],[\"总之\",{\"1\":{\"203\":1,\"204\":1,\"205\":1,\"217\":1}}],[\"总的来说\",{\"1\":{\"193\":1}}],[\"尤其是别人的代码\",{\"1\":{\"203\":1}}],[\"尤其是在创建成本较高的对象时\",{\"1\":{\"49\":1}}],[\"让代码快速迁移到\",{\"1\":{\"203\":1}}],[\"出于特殊原因\",{\"1\":{\"203\":1}}],[\"应该尽量避免使用any类型\",{\"1\":{\"203\":1}}],[\"编译就纯粹作为类型检查了\",{\"1\":{\"298\":1}}],[\"编译成react\",{\"1\":{\"289\":2}}],[\"编译器报错\",{\"1\":{\"267\":1,\"268\":1}}],[\"编译不报错\",{\"1\":{\"217\":1}}],[\"编译时\",{\"1\":{\"264\":1}}],[\"编译时就不会报错\",{\"1\":{\"203\":1}}],[\"编译时都不报错\",{\"1\":{\"203\":1}}],[\"编辑器显示警告\",{\"1\":{\"267\":1,\"268\":1}}],[\"编辑器补全后面的部分\",{\"1\":{\"192\":1}}],[\"编辑器自动提示函数用法\",{\"1\":{\"192\":1}}],[\"编辑此页链接\",{\"1\":{\"3\":1}}],[\"正确编译单个脚本\",{\"1\":{\"288\":1}}],[\"正确this\",{\"1\":{\"253\":1}}],[\"正确\",{\"1\":{\"203\":3,\"204\":6,\"207\":4,\"213\":3,\"217\":2,\"218\":2,\"219\":2,\"228\":1,\"233\":1}}],[\"正是因为存在这些动态变化\",{\"1\":{\"191\":1}}],[\"特有的数据类型\",{\"1\":{\"230\":1}}],[\"特殊类型\",{\"0\":{\"201\":1}}],[\"特点\",{\"0\":{\"156\":1,\"336\":1}}],[\"环境\",{\"0\":{\"324\":1},\"1\":{\"199\":1}}],[\"环境中\",{\"1\":{\"199\":1}}],[\"然后用typeof运算符获取它的构造方法类型\",{\"1\":{\"240\":1}}],[\"然后\",{\"1\":{\"203\":1}}],[\"然后调用该函数\",{\"1\":{\"199\":1}}],[\"然后它会长期运行\",{\"1\":{\"160\":1}}],[\"先输入一个函数twice\",{\"1\":{\"199\":1}}],[\"逐行执行\",{\"1\":{\"199\":1}}],[\"运行就报错\",{\"1\":{\"217\":1}}],[\"运行环境\",{\"1\":{\"199\":2}}],[\"运行script\",{\"1\":{\"199\":1}}],[\"运算符是一个一元运算符\",{\"1\":{\"222\":1}}],[\"运算符==\",{\"1\":{\"204\":1}}],[\"运算符可以接受各种类型的值\",{\"1\":{\"191\":1}}],[\"运算符\",{\"0\":{\"222\":1},\"1\":{\"117\":1,\"204\":1}}],[\"调用它来运行\",{\"1\":{\"199\":1}}],[\"调用者\",{\"1\":{\"93\":1,\"95\":1}}],[\"给源码里的装饰器声明加上设计类型元数据\",{\"1\":{\"278\":1}}],[\"给出运行结果\",{\"1\":{\"199\":1}}],[\"给予程序员很大的自由\",{\"1\":{\"193\":1}}],[\"安装后\",{\"1\":{\"199\":1}}],[\"叫做\",{\"1\":{\"198\":1}}],[\"最终变为js代码\",{\"1\":{\"336\":1}}],[\"最后在浏览器端将静态的html\",{\"1\":{\"317\":1}}],[\"最简单的\",{\"1\":{\"198\":1}}],[\"最初的设计是null是表示一个\",{\"1\":{\"114\":1}}],[\"推迟\",{\"1\":{\"312\":1}}],[\"推测为number\",{\"1\":{\"218\":1}}],[\"推断为\",{\"1\":{\"227\":1}}],[\"推断行为会因为值的不同\",{\"1\":{\"227\":1}}],[\"推断类型时\",{\"1\":{\"218\":1}}],[\"推断类型为\",{\"1\":{\"208\":2,\"227\":3}}],[\"推断它的类型为number\",{\"1\":{\"197\":1}}],[\"推送所有分支到远程仓库\",{\"1\":{\"176\":1}}],[\"冒号\",{\"1\":{\"196\":1}}],[\"短期的个人项目\",{\"1\":{\"193\":1}}],[\"虽然可以自己动手做适配\",{\"1\":{\"193\":1}}],[\"过去大部分\",{\"1\":{\"193\":1}}],[\"依赖\",{\"1\":{\"193\":1}}],[\"依赖管理\",{\"1\":{\"174\":1}}],[\"兼容性问题\",{\"1\":{\"193\":1}}],[\"检查类型是否正确\",{\"1\":{\"193\":1}}],[\"要获取它的构造方法\",{\"1\":{\"240\":1}}],[\"要退出这个\",{\"1\":{\"199\":1}}],[\"要求开发者付出更高的学习成本\",{\"1\":{\"193\":1}}],[\"要学习的东西更多\",{\"1\":{\"193\":1}}],[\"要使\",{\"1\":{\"156\":1}}],[\"还可以在module\",{\"1\":{\"336\":1}}],[\"还是lf\",{\"1\":{\"297\":1}}],[\"还是小写的object类型\",{\"1\":{\"216\":1}}],[\"还会生成对应的\",{\"1\":{\"274\":1}}],[\"还引入了\",{\"1\":{\"205\":1}}],[\"还有一个很大的问题\",{\"1\":{\"203\":1}}],[\"还需要编写类型声明\",{\"1\":{\"193\":1}}],[\"还不会编写\",{\"1\":{\"10\":1}}],[\"程序员不仅需要编写功能\",{\"1\":{\"193\":1}}],[\"丧失了动态类型的代码灵活性\",{\"1\":{\"193\":1}}],[\"综上所述\",{\"1\":{\"192\":1}}],[\"多维数组\",{\"0\":{\"229\":1}}],[\"多人合作的项目\",{\"1\":{\"192\":1}}],[\"多页面通信\",{\"1\":{\"159\":1}}],[\"因为loader支持链式调用\",{\"1\":{\"336\":1}}],[\"因为根据thistype<\",{\"1\":{\"253\":1}}],[\"因为helperthisvalue里面没有这个方法\",{\"1\":{\"253\":1}}],[\"因为数组的成员数量是不确定的\",{\"1\":{\"233\":1}}],[\"因为unique\",{\"1\":{\"207\":1}}],[\"因为这是不允许的运算\",{\"1\":{\"204\":1}}],[\"因为没有类型检查\",{\"1\":{\"203\":1}}],[\"因为\",{\"1\":{\"203\":1,\"233\":1}}],[\"因为不确定修改后是否会影响到其他部分的代码\",{\"1\":{\"192\":1}}],[\"因此脚本头部不用写\",{\"1\":{\"265\":1}}],[\"因此exclude<t\",{\"1\":{\"238\":1}}],[\"因此symbol和bigint这两个类型虽然存在\",{\"1\":{\"213\":1}}],[\"因此可以加快访问速度\",{\"1\":{\"160\":1}}],[\"因此可以借助于\",{\"1\":{\"12\":1}}],[\"因此可能需要更改该值\",{\"1\":{\"135\":1}}],[\"因此\",{\"1\":{\"9\":1,\"197\":1,\"205\":1,\"247\":1,\"249\":1}}],[\"项目构建时产生文件tsbuildinfo\",{\"1\":{\"285\":1}}],[\"项目可以进行增量构建\",{\"1\":{\"271\":1}}],[\"项目的基准目录\",{\"1\":{\"269\":1}}],[\"项目的配置文件\",{\"1\":{\"261\":1}}],[\"项目加载\",{\"1\":{\"264\":1}}],[\"项目\",{\"1\":{\"203\":2}}],[\"项目都没有做\",{\"1\":{\"193\":1}}],[\"项目转成\",{\"1\":{\"192\":1}}],[\"项目越大越痛苦\",{\"1\":{\"192\":1}}],[\"项目初始化\",{\"0\":{\"173\":1}}],[\"修改const命令声明的数组的成员是允许的\",{\"1\":{\"228\":1}}],[\"修改他人的\",{\"1\":{\"192\":1}}],[\"修改bug\",{\"1\":{\"174\":1}}],[\"很多时候确实有声明为只读数组的需求\",{\"1\":{\"228\":1}}],[\"很多工具能够直接生成文档\",{\"1\":{\"192\":1}}],[\"很难为每一行适配正确的类型\",{\"1\":{\"203\":1}}],[\"很适合那些不需要网页或用户互动的功能\",{\"1\":{\"160\":1}}],[\"借助类型信息\",{\"1\":{\"192\":1}}],[\"熟练的开发者往往只看类型\",{\"1\":{\"192\":1}}],[\"集成开发环境\",{\"1\":{\"192\":1}}],[\"集中控制\",{\"1\":{\"106\":1}}],[\"集中性\",{\"1\":{\"103\":1}}],[\"做到语法提示和自动补全\",{\"1\":{\"192\":1}}],[\"写法二\",{\"1\":{\"231\":1}}],[\"写法一\",{\"1\":{\"231\":1}}],[\"写成messege\",{\"1\":{\"192\":1}}],[\"写作日期为\",{\"1\":{\"27\":1}}],[\"由于默认是以\",{\"1\":{\"269\":1}}],[\"由于any和never是两个特殊值\",{\"1\":{\"244\":1}}],[\"由于never类型是任何其他类型的子类型\",{\"1\":{\"238\":1}}],[\"由于需要声明每个成员的类型\",{\"1\":{\"230\":1}}],[\"由于数组成员的索引类型都是number\",{\"1\":{\"226\":1}}],[\"由于5是number的子类型\",{\"1\":{\"218\":1}}],[\"由于包装对象的存在\",{\"1\":{\"213\":1}}],[\"由于变量a和b是两个类型\",{\"1\":{\"207\":1}}],[\"由于\",{\"1\":{\"207\":1,\"240\":1,\"241\":1}}],[\"由于不存在任何属于\",{\"1\":{\"205\":1}}],[\"由于这个原因\",{\"1\":{\"203\":2}}],[\"由于它被赋值为一个数值\",{\"1\":{\"197\":1}}],[\"由于每个值\",{\"1\":{\"192\":1}}],[\"由零个或多个16位unicode字符组成的字符序列\",{\"1\":{\"114\":1}}],[\"想要达到的目的\",{\"1\":{\"192\":1}}],[\"非常不利\",{\"1\":{\"191\":1}}],[\"非终结符表达式\",{\"1\":{\"108\":1,\"110\":1}}],[\"没法提前知道\",{\"1\":{\"191\":1}}],[\"没有输出参数secretname和返回值secretsanta\",{\"1\":{\"244\":1}}],[\"没有实际作用\",{\"1\":{\"230\":1}}],[\"没有单独区分这种类型\",{\"1\":{\"230\":1}}],[\"没有使用意义\",{\"1\":{\"213\":1}}],[\"没有设置就是未经初始化\",{\"1\":{\"114\":1}}],[\"没有处理者处理\",{\"1\":{\"92\":1}}],[\"也支持通配符\",{\"1\":{\"301\":1}}],[\"也会自动打开allowjs\",{\"1\":{\"270\":1}}],[\"也会将\",{\"1\":{\"264\":1}}],[\"也就是返回type的非空类型版本\",{\"1\":{\"241\":1}}],[\"也就是说\",{\"1\":{\"191\":1,\"222\":1,\"230\":1}}],[\"也不利于发挥类型系统的优势\",{\"1\":{\"217\":1}}],[\"也不会报错\",{\"1\":{\"203\":1}}],[\"也可能是数值\",{\"1\":{\"205\":1}}],[\"也可以是异步的\",{\"1\":{\"336\":1}}],[\"也可以是零成员\",{\"1\":{\"226\":1}}],[\"也可以当作元组\",{\"1\":{\"233\":1}}],[\"也可以在定义一个别名时\",{\"1\":{\"221\":1}}],[\"也可以通过\",{\"1\":{\"199\":1}}],[\"也可以推断函数的返回值\",{\"1\":{\"197\":1}}],[\"也属于\",{\"1\":{\"204\":1}}],[\"也检查不出错误\",{\"1\":{\"203\":1}}],[\"也没有指定类型\",{\"1\":{\"203\":1}}],[\"也是这样来声明类型\",{\"1\":{\"196\":1}}],[\"也是动态的\",{\"1\":{\"191\":1}}],[\"也实现组件接口\",{\"1\":{\"65\":1}}],[\"x1\",{\"1\":{\"218\":2}}],[\"x就是never类型了\",{\"1\":{\"205\":1}}],[\"x\",{\"1\":{\"191\":4,\"199\":3,\"203\":16,\"204\":4,\"205\":5,\"206\":2,\"207\":5,\"208\":6,\"217\":1,\"218\":9,\"219\":3,\"220\":1,\"222\":3,\"230\":2,\"233\":2,\"237\":4,\"240\":1,\"242\":6,\"244\":2,\"245\":2,\"246\":6,\"247\":2,\"249\":2,\"250\":2,\"253\":3}}],[\"例变量b的类型\",{\"1\":{\"207\":1}}],[\"例二的报错是因为对象的属性也是静态的\",{\"1\":{\"191\":1}}],[\"例二let\",{\"1\":{\"191\":2}}],[\"例一的报错是因为变量赋值时\",{\"1\":{\"191\":1}}],[\"例一let\",{\"1\":{\"191\":2}}],[\"例如字符串\",{\"1\":{\"147\":1}}],[\"属于静态类型语言\",{\"1\":{\"191\":1}}],[\"属于动态类型语言\",{\"1\":{\"191\":1}}],[\"属性\",{\"0\":{\"135\":1}}],[\"大多数时候\",{\"1\":{\"216\":1}}],[\"大写的object类型代表\",{\"1\":{\"215\":1}}],[\"大大降低了线上风险\",{\"1\":{\"192\":1}}],[\"大家可能知道\",{\"1\":{\"191\":1}}],[\"大量复杂计算任务\",{\"1\":{\"154\":1}}],[\"避免交付有问题的代码\",{\"1\":{\"192\":1}}],[\"避免使用时报错\",{\"1\":{\"190\":1}}],[\"避免了在各个元素中重复实现\",{\"1\":{\"103\":1}}],[\"避免了直接的依赖关系\",{\"1\":{\"84\":1}}],[\"避免了昂贵的初始化过程\",{\"1\":{\"50\":1}}],[\"作为服务端响应返回给浏览器\",{\"1\":{\"317\":1}}],[\"作为一个新类型返回\",{\"1\":{\"251\":1}}],[\"作为类型\",{\"1\":{\"240\":1}}],[\"作为比较\",{\"1\":{\"190\":1}}],[\"作者设置为\",{\"1\":{\"27\":1}}],[\"报错type\",{\"1\":{\"237\":1}}],[\"报错delete\",{\"1\":{\"228\":1}}],[\"报错let\",{\"1\":{\"204\":3}}],[\"报错\",{\"1\":{\"190\":1,\"191\":3,\"192\":3,\"203\":1,\"204\":3,\"207\":6,\"213\":1,\"215\":2,\"216\":3,\"217\":4,\"218\":3,\"221\":1,\"222\":2,\"227\":1,\"228\":5,\"230\":1,\"232\":1,\"233\":1,\"237\":1,\"240\":2,\"244\":2,\"246\":1,\"247\":1,\"250\":4,\"251\":2,\"253\":2,\"282\":1,\"283\":1}}],[\"有两种写法\",{\"1\":{\"231\":1}}],[\"有两个\",{\"1\":{\"205\":1}}],[\"有些年代很久的大型\",{\"1\":{\"203\":1}}],[\"有时会显著拖长项目的开发时间\",{\"1\":{\"193\":1}}],[\"有了类型之后\",{\"1\":{\"193\":1}}],[\"有了静态类型\",{\"1\":{\"192\":1}}],[\"有助于提高代码质量\",{\"1\":{\"192\":1}}],[\"有助于代码重构\",{\"1\":{\"192\":1}}],[\"有利于发现错误\",{\"1\":{\"192\":1}}],[\"有利于代码的静态分析\",{\"1\":{\"192\":1}}],[\"有一个属性foo\",{\"1\":{\"191\":1}}],[\"有一个参数n\",{\"1\":{\"190\":1}}],[\"有关进一步阐述\",{\"1\":{\"138\":1}}],[\"帮助提高代码质量\",{\"1\":{\"190\":1}}],[\"凡是需要设为any类型的地方\",{\"1\":{\"204\":1}}],[\"凡是不适用该类型的地方\",{\"1\":{\"190\":1}}],[\"凡是适用该类型的地方\",{\"1\":{\"190\":1}}],[\"共同特征是都能进行数值运算\",{\"1\":{\"190\":1}}],[\"举例来说\",{\"1\":{\"190\":1}}],[\"语义错误和方法调用错误\",{\"1\":{\"192\":1}}],[\"语言里面的广义对象\",{\"1\":{\"215\":1}}],[\"语言中\",{\"1\":{\"212\":1}}],[\"语言\",{\"1\":{\"211\":1}}],[\"语言规定const声明变量时\",{\"1\":{\"203\":1}}],[\"语言本身就有一套自己的类型系统\",{\"1\":{\"191\":1}}],[\"语言就没有这个功能\",{\"1\":{\"190\":1}}],[\"语言的编程语言\",{\"1\":{\"189\":1}}],[\"语法\",{\"0\":{\"18\":1},\"1\":{\"14\":1,\"29\":1}}],[\"语法进行了扩展\",{\"1\":{\"13\":1}}],[\"语法扩展\",{\"1\":{\"12\":1}}],[\"简介\",{\"0\":{\"261\":1}}],[\"简称\",{\"1\":{\"189\":2}}],[\"简化上下文类\",{\"1\":{\"100\":1}}],[\"简化接口\",{\"1\":{\"69\":1}}],[\"简化客户端代码\",{\"1\":{\"66\":1}}],[\"概述\",{\"0\":{\"189\":1,\"334\":1}}],[\"只用来跟其他类型组成交叉类型\",{\"1\":{\"253\":1}}],[\"只会让y变成只读\",{\"1\":{\"247\":1}}],[\"只读元组\",{\"0\":{\"231\":1}}],[\"只读写法\",{\"1\":{\"228\":1}}],[\"只读数组赋值给可变数组\",{\"1\":{\"228\":1}}],[\"只读数组没有pop\",{\"1\":{\"228\":1}}],[\"只读数组\",{\"0\":{\"228\":1}}],[\"只希望包含真正的对象\",{\"1\":{\"216\":1}}],[\"只包含对象\",{\"1\":{\"216\":1}}],[\"只能接受两个参数\",{\"1\":{\"233\":1}}],[\"只能写成类型为typeof\",{\"1\":{\"207\":1}}],[\"只能用const命令声明\",{\"1\":{\"207\":1}}],[\"只能进行比较运算\",{\"1\":{\"204\":1}}],[\"只有对象才有方法\",{\"1\":{\"212\":1}}],[\"只有never唯一一个\",{\"1\":{\"205\":1}}],[\"只有明确unknown变量的实际类型\",{\"1\":{\"204\":1}}],[\"只有到运行阶段才会报错\",{\"1\":{\"192\":1}}],[\"只要打开这个选项\",{\"1\":{\"217\":1}}],[\"只要推断出any类型就会报错\",{\"1\":{\"203\":1}}],[\"只要开发者使用了any类型\",{\"1\":{\"203\":1}}],[\"只要句法正确\",{\"1\":{\"203\":1}}],[\"只要函数或对象的参数和返回值保持类型不变\",{\"1\":{\"192\":1}}],[\"只要存在timeout\",{\"1\":{\"126\":1}}],[\"只键入一部分的变量名或函数名\",{\"1\":{\"192\":1}}],[\"只不过这里存放一些零散的全局类型\",{\"1\":{\"186\":1}}],[\"命名空间声明\",{\"0\":{\"185\":1}}],[\"命令的\",{\"1\":{\"262\":1}}],[\"命令的参数类型\",{\"1\":{\"236\":1}}],[\"命令\",{\"0\":{\"221\":1}}],[\"命令行\",{\"1\":{\"199\":1}}],[\"命令不带有任何参数\",{\"1\":{\"199\":1}}],[\"命令接口\",{\"1\":{\"93\":1,\"95\":1}}],[\"命令模式使得请求的发送者与接收者之间解耦\",{\"1\":{\"93\":1}}],[\"命令模式是一种行为型设计模式\",{\"1\":{\"93\":1}}],[\"命令模式\",{\"0\":{\"93\":1}}],[\"接口声明\",{\"0\":{\"183\":1}}],[\"接收消息\",{\"0\":{\"148\":1}}],[\"接收者\",{\"1\":{\"93\":1,\"95\":1}}],[\"变量helperfunctions的this应该满足helperthisvalue的条件\",{\"1\":{\"253\":1}}],[\"变量helperfunctions的类型是一个正常的对象类型与thistype<helperthisvalue>组成的交叉类型\",{\"1\":{\"253\":1}}],[\"变量values的类型是一个只读数组\",{\"1\":{\"250\":1}}],[\"变量v是unknown类型\",{\"1\":{\"204\":1}}],[\"变量如果等于undefined就表示还没有赋值\",{\"1\":{\"217\":1}}],[\"变量a和b都是字符串\",{\"1\":{\"207\":1}}],[\"变量a和变量b的类型虽然都是unique\",{\"1\":{\"207\":1}}],[\"变量类型默认就是unique\",{\"1\":{\"207\":1}}],[\"变量类型一旦设为any\",{\"1\":{\"203\":1}}],[\"变量y当作属性名\",{\"1\":{\"207\":1}}],[\"变量y继续进行各种数值运算\",{\"1\":{\"203\":1}}],[\"变量y的类型是number\",{\"1\":{\"203\":1}}],[\"变量y是一个对象\",{\"1\":{\"191\":1}}],[\"变量x同时是数值和字符串\",{\"1\":{\"220\":1}}],[\"变量x和y声明时没有赋值\",{\"1\":{\"203\":1}}],[\"变量x的类型是never\",{\"1\":{\"205\":1}}],[\"变量x的类型是unknown\",{\"1\":{\"204\":1}}],[\"变量x的类型是any\",{\"1\":{\"203\":2}}],[\"变量x的类型推断为any\",{\"1\":{\"203\":1}}],[\"变量x的值是一个字符串\",{\"1\":{\"203\":1}}],[\"变量x声明时\",{\"1\":{\"191\":1}}],[\"变量foo并没有类型声明\",{\"1\":{\"197\":1}}],[\"变量foo的后面使用冒号\",{\"1\":{\"196\":1}}],[\"变量的值应该与声明的类型一致\",{\"1\":{\"196\":1}}],[\"变量的类型是动态的\",{\"1\":{\"191\":1}}],[\"变量加上了类型声明\",{\"1\":{\"196\":1}}],[\"变量声明\",{\"0\":{\"181\":1}}],[\"变量设置为null就是空对象指针\",{\"1\":{\"114\":1}}],[\"清空所有储藏的工作\",{\"1\":{\"178\":1}}],[\"清晰性\",{\"1\":{\"109\":1}}],[\"清晰分离了构建逻辑和产品表示\",{\"1\":{\"47\":1}}],[\"暂时将未提交的变化移除\",{\"1\":{\"178\":1}}],[\"暂存区是一个文件\",{\"1\":{\"170\":1}}],[\"暂存区\",{\"1\":{\"170\":1}}],[\"恢复暂存区的所有文件到工作区\",{\"1\":{\"177\":1}}],[\"恢复暂存区的指定文件到工作区\",{\"1\":{\"177\":1}}],[\"恢复某个commit的指定文件到暂存区和工作区\",{\"1\":{\"177\":1}}],[\"恢复到\",{\"1\":{\"98\":1}}],[\"恢复到之前的状态\",{\"1\":{\"98\":1}}],[\"强行推送当前分支到远程仓库\",{\"1\":{\"176\":1}}],[\"下面是另一个例子\",{\"1\":{\"204\":1,\"253\":1}}],[\"下面是一段简单的\",{\"1\":{\"190\":1}}],[\"下载远程仓库的所有变动\",{\"1\":{\"176\":1}}],[\"下一篇\",{\"1\":{\"3\":1}}],[\"切换到线上某个分支\",{\"1\":{\"175\":1}}],[\"切换到本地某个分支\",{\"1\":{\"175\":1}}],[\"切换到状态\",{\"1\":{\"101\":2}}],[\"删除指定的属性keys\",{\"1\":{\"242\":1}}],[\"删除某些类型excludedmembers\",{\"1\":{\"238\":1}}],[\"删除对应的某个储藏\",{\"1\":{\"178\":1}}],[\"删除远程分支\",{\"1\":{\"175\":1}}],[\"删除本地某个分支\",{\"1\":{\"175\":1}}],[\"删除观察者的方法和通知观察者的方法\",{\"1\":{\"81\":1}}],[\"合并分支出现冲突\",{\"1\":{\"175\":1}}],[\"合并分支\",{\"1\":{\"175\":1}}],[\"测试用例修改\",{\"1\":{\"174\":1}}],[\"测试交叉时\",{\"1\":{\"135\":1}}],[\"新项目不建议使用\",{\"1\":{\"295\":1}}],[\"新引入的一种原始类型的值\",{\"1\":{\"206\":1}}],[\"新建一个空分支\",{\"1\":{\"175\":1}}],[\"新建一个分支\",{\"1\":{\"175\":1}}],[\"新特性\",{\"1\":{\"174\":1}}],[\"新方法的名字就有可能与现有方法产生冲突\",{\"1\":{\"114\":1}}],[\"遵循以下的规则\",{\"1\":{\"174\":1}}],[\"重构后的代码也能正常运行\",{\"1\":{\"192\":1}}],[\"重置暂存区指定文件\",{\"1\":{\"177\":1}}],[\"重置暂存区与工作区\",{\"1\":{\"177\":1}}],[\"重置当前分支的指针为指定commit\",{\"1\":{\"177\":1}}],[\"重做了上一次commit\",{\"1\":{\"174\":1}}],[\"重新定义算法的某些特定步骤\",{\"1\":{\"78\":1}}],[\"信息\",{\"1\":{\"174\":1}}],[\"拉取远程仓库的分支与本地某个分支合并\",{\"1\":{\"174\":1}}],[\"拉取远程仓库的分支与本地当前分支合并\",{\"1\":{\"174\":1,\"176\":1}}],[\"拉取等方式获取到本地仓库的代码\",{\"1\":{\"170\":1}}],[\"远程分支名\",{\"1\":{\"174\":2}}],[\"远程仓库操作\",{\"0\":{\"176\":1}}],[\"远程仓库名\",{\"1\":{\"174\":2}}],[\"远程仓库是一个git服务器\",{\"1\":{\"170\":1}}],[\"远程仓库\",{\"1\":{\"170\":1}}],[\"哪些内容\",{\"1\":{\"174\":1}}],[\"会搜索以下脚本\",{\"1\":{\"296\":1}}],[\"会严格检查兼容性问题是否存在\",{\"1\":{\"282\":1}}],[\"会返回unknown\",{\"1\":{\"244\":1}}],[\"会返回never类型\",{\"1\":{\"241\":1}}],[\"会报错\",{\"1\":{\"244\":1,\"248\":1,\"251\":1,\"253\":1}}],[\"会认为arr的类型是readonly\",{\"1\":{\"233\":1}}],[\"会认为这个序列的成员数量是不确定的\",{\"1\":{\"233\":1}}],[\"会认为x的类型实际是never\",{\"1\":{\"220\":1}}],[\"会自动产生的对象\",{\"1\":{\"212\":1}}],[\"会自己推断类型\",{\"1\":{\"197\":1}}],[\"会推断出元组的成员数量\",{\"1\":{\"232\":1}}],[\"会推断数组类型是any\",{\"1\":{\"227\":1}}],[\"会推断某个\",{\"1\":{\"208\":1}}],[\"会推断它们的类型为any\",{\"1\":{\"203\":1}}],[\"会抛出错误\",{\"1\":{\"205\":1}}],[\"会给出一个大于号\",{\"1\":{\"199\":1}}],[\"会删除储藏\",{\"1\":{\"178\":1}}],[\"会保留之前分支的所有文件\",{\"1\":{\"175\":1}}],[\"会提交哪些内容\",{\"1\":{\"174\":1}}],[\"会add\",{\"1\":{\"174\":1}}],[\"会使用\",{\"1\":{\"12\":1}}],[\"后面\",{\"1\":{\"197\":1}}],[\"后面就不允许再赋值为其他类型的值\",{\"1\":{\"191\":1}}],[\"后者的所有变化都将被前者抵消\",{\"1\":{\"177\":1}}],[\"后\",{\"1\":{\"174\":1}}],[\"后执行当持续触发事件\",{\"1\":{\"124\":1}}],[\"查看所有储藏中的工作\",{\"1\":{\"178\":1}}],[\"查看本地和远程所有分支\",{\"1\":{\"175\":1}}],[\"查看本地所有分支\",{\"1\":{\"175\":1}}],[\"查看远程所有分支\",{\"1\":{\"175\":1}}],[\"查看当前分支状态\",{\"1\":{\"174\":1}}],[\"查看当前代码add\",{\"1\":{\"174\":1}}],[\"查看现在commit提交后\",{\"1\":{\"174\":1}}],[\"查看详情\",{\"1\":{\"15\":1,\"16\":1,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":1}}],[\"默认情况下\",{\"1\":{\"334\":1}}],[\"默认包括\",{\"1\":{\"301\":1}}],[\"默认排除node\",{\"1\":{\"300\":1}}],[\"默认值是false\",{\"1\":{\"277\":1}}],[\"默认值\",{\"1\":{\"267\":1,\"268\":1,\"309\":2}}],[\"默认值为node\",{\"1\":{\"295\":1}}],[\"默认值为这两个值\",{\"1\":{\"295\":1}}],[\"默认值为classic\",{\"1\":{\"295\":1}}],[\"默认值为\",{\"1\":{\"135\":1}}],[\"默认为true\",{\"1\":{\"265\":1,\"284\":1}}],[\"默认为master分支\",{\"1\":{\"174\":1}}],[\"基本结构\",{\"0\":{\"262\":1}}],[\"基本类型\",{\"0\":{\"211\":1}}],[\"基本意义\",{\"0\":{\"203\":1}}],[\"基本用法\",{\"0\":{\"195\":1}}],[\"基本命令\",{\"0\":{\"171\":1}}],[\"基于当前分支\",{\"1\":{\"175\":1}}],[\"基础\",{\"0\":{\"169\":1}}],[\"基础类型\",{\"0\":{\"114\":1}}],[\"找到暂存区域文件\",{\"1\":{\"170\":1}}],[\"本地分支名\",{\"1\":{\"174\":1}}],[\"本地仓库\",{\"1\":{\"170\":1}}],[\"本页面就是一个示例\",{\"1\":{\"3\":1}}],[\"相对应地\",{\"1\":{\"249\":1}}],[\"相应地\",{\"1\":{\"247\":1}}],[\"相关信息\",{\"1\":{\"230\":1,\"244\":1}}],[\"相当于vue2\",{\"0\":{\"306\":1}}],[\"相当于\",{\"1\":{\"228\":1}}],[\"相当于本地克隆了远程仓库项目的一个副本\",{\"1\":{\"170\":1}}],[\"相当于本地写代码的区域\",{\"1\":{\"170\":1}}],[\"相同参数的symbol\",{\"1\":{\"207\":1}}],[\"相同的协议\",{\"1\":{\"156\":1}}],[\"工作区\",{\"1\":{\"170\":1}}],[\"工厂方法模式\",{\"0\":{\"42\":1}}],[\"直接调用unknown类型变量的属性和方法\",{\"1\":{\"204\":1}}],[\"直接从缓存加载文件\",{\"1\":{\"160\":1}}],[\"直到应用的其他部分挂载\",{\"1\":{\"312\":1}}],[\"直到所有相关页面都关闭\",{\"1\":{\"156\":1}}],[\"直到再次调用其\",{\"1\":{\"131\":1}}],[\"直到有一个对象处理该请求\",{\"1\":{\"90\":1}}],[\"直到需要时才进行实例化\",{\"1\":{\"60\":1}}],[\"拦截用户发出的网络请求\",{\"1\":{\"160\":1}}],[\"充当一个代理服务器\",{\"1\":{\"160\":1}}],[\"充当一个服务\",{\"1\":{\"160\":1}}],[\"跨页面登录\",{\"1\":{\"159\":1}}],[\"跨页面通信\",{\"1\":{\"156\":1}}],[\"连接到多个不同的页面\",{\"1\":{\"156\":1}}],[\"仍然可以继续运行\",{\"1\":{\"156\":1}}],[\"独立于页面的生命周期\",{\"1\":{\"156\":1}}],[\"即上述执行方式为sass\",{\"1\":{\"336\":1}}],[\"即如何查找模块\",{\"1\":{\"295\":1}}],[\"即实例类型\",{\"1\":{\"240\":1}}],[\"即元组长度\",{\"1\":{\"232\":1}}],[\"即数组的各个成员的类型可以不同\",{\"1\":{\"230\":1}}],[\"即不允许变动数组成员\",{\"1\":{\"228\":1}}],[\"即不可能返回任何值\",{\"1\":{\"205\":1}}],[\"即不可能有这样的值\",{\"1\":{\"205\":1}}],[\"即类型可以声明在代码块\",{\"1\":{\"223\":1}}],[\"即跟类型相关的代码之中\",{\"1\":{\"222\":1}}],[\"即别名允许嵌套\",{\"1\":{\"221\":1}}],[\"即交叉类型同时满足a和b的特征\",{\"1\":{\"220\":1}}],[\"即可以用字面量表示的对象\",{\"1\":{\"216\":1}}],[\"即symbol\",{\"1\":{\"212\":1}}],[\"即联合类型\",{\"1\":{\"205\":1}}],[\"即该类型为空\",{\"1\":{\"205\":1}}],[\"即将一个不确定的类型缩小为更明确的类型\",{\"1\":{\"204\":1}}],[\"即使打开了noimplicitany\",{\"1\":{\"203\":1}}],[\"即使有明显的类型错误\",{\"1\":{\"203\":1}}],[\"即使有冲突\",{\"1\":{\"176\":1}}],[\"即变量的类型是静态的\",{\"1\":{\"191\":1}}],[\"即它继承了后者的全部语法\",{\"1\":{\"189\":1}}],[\"即\",{\"1\":{\"155\":1}}],[\"与其他任何值都不相等\",{\"1\":{\"206\":1}}],[\"与上一次commit\",{\"1\":{\"177\":2}}],[\"与普通\",{\"1\":{\"155\":1}}],[\"与主线程中的\",{\"1\":{\"152\":1}}],[\"之前的算法\",{\"1\":{\"295\":1}}],[\"之类会改变原数组的方法\",{\"1\":{\"228\":1}}],[\"之间共享一个\",{\"1\":{\"155\":1}}],[\"之后\",{\"1\":{\"132\":1}}],[\"线程\",{\"1\":{\"153\":2,\"160\":1}}],[\"错误\",{\"1\":{\"153\":1}}],[\"回复\",{\"1\":{\"153\":1}}],[\"我是\",{\"1\":{\"153\":1}}],[\"我是主线程\",{\"1\":{\"153\":1}}],[\"我们可以使用\",{\"1\":{\"312\":1}}],[\"我们可以自定义类型工具mutable<type>\",{\"1\":{\"247\":1}}],[\"我们使用对象类型\",{\"1\":{\"216\":1}}],[\"我们不需要做任何事情\",{\"1\":{\"137\":1}}],[\"我们需要的是在键盘抬起后不再输入后的一秒之后触发函数打印\",{\"1\":{\"124\":1}}],[\"我们应该要存储timer这个变量\",{\"1\":{\"124\":1}}],[\"我们想清除的是settimeout\",{\"1\":{\"124\":1}}],[\"我们一般都会想到cookie\",{\"1\":{\"35\":1}}],[\"全局自定义环境变量的类型声明\",{\"1\":{\"186\":1}}],[\"全局对象是\",{\"1\":{\"152\":1}}],[\"全局只能存在一个实例\",{\"1\":{\"41\":1}}],[\"终止worker\",{\"0\":{\"151\":1}}],[\"终结符表达式\",{\"1\":{\"108\":1,\"110\":1}}],[\"抛出的错误\",{\"1\":{\"150\":1}}],[\"捕获\",{\"1\":{\"150\":1}}],[\"捕获错误\",{\"0\":{\"150\":1}}],[\"脚本作为单个模块编译\",{\"1\":{\"288\":1}}],[\"脚本的头部添加\",{\"1\":{\"270\":1}}],[\"脚本的文件路径\",{\"1\":{\"146\":1}}],[\"脚本script\",{\"1\":{\"199\":1}}],[\"脚本\",{\"1\":{\"189\":1,\"199\":2,\"264\":1}}],[\"脚本都可以当作\",{\"1\":{\"189\":1}}],[\"脚注\",{\"0\":{\"16\":1}}],[\"开发限制\",{\"0\":{\"323\":1}}],[\"开发存在限制\",{\"1\":{\"322\":1}}],[\"开发阶段很可能发现不了这个问题\",{\"1\":{\"190\":1}}],[\"开发者可以将耗时的任务\",{\"1\":{\"144\":1}}],[\"开始支持\",{\"1\":{\"295\":1}}],[\"开始对指定\",{\"1\":{\"140\":1}}],[\"开始监听\",{\"1\":{\"137\":1}}],[\"开始监听一个目标元素\",{\"1\":{\"136\":1}}],[\"><\",{\"1\":{\"310\":1,\"312\":1}}],[\">作用相同\",{\"1\":{\"290\":1}}],[\">\",{\"1\":{\"141\":1,\"186\":2,\"199\":1,\"228\":1,\"231\":1,\"237\":1,\"238\":3,\"239\":4,\"240\":1,\"242\":4,\"246\":4,\"251\":5,\"253\":2,\"309\":1,\"311\":1,\"312\":2,\"328\":1}}],[\"内存占用减少一半\",{\"1\":{\"314\":1}}],[\"内置类型描述文件\",{\"1\":{\"290\":1}}],[\"内置了四个字符串类型工具\",{\"1\":{\"254\":1}}],[\"内置的原生对象的构造函数类型\",{\"1\":{\"240\":1}}],[\"内置对象原生的属性和方法\",{\"1\":{\"216\":1}}],[\"内部\",{\"1\":{\"152\":1}}],[\"内部全局对象\",{\"0\":{\"152\":1}}],[\"内边距和边框\",{\"1\":{\"138\":1}}],[\"内容盒是盒模型放置内容的部分\",{\"1\":{\"138\":1}}],[\"内容盒或边框盒或者\",{\"1\":{\"138\":1}}],[\"内容\",{\"1\":{\"12\":1}}],[\"边框盒包含内容\",{\"1\":{\"138\":1}}],[\"边界尺寸的变化\",{\"1\":{\"138\":1}}],[\"queryselector\",{\"1\":{\"137\":1,\"141\":5}}],[\"则会显示错误组件\",{\"1\":{\"309\":1}}],[\"则esmoduleinterop默认为true\",{\"1\":{\"282\":1}}],[\"则返回unknown\",{\"1\":{\"252\":1}}],[\"则返回原始函数类型\",{\"1\":{\"243\":1}}],[\"则返回never类型\",{\"1\":{\"239\":1}}],[\"则推断类型还是\",{\"1\":{\"208\":1}}],[\"则推断类型为\",{\"1\":{\"208\":1}}],[\"则目标在视野外\",{\"1\":{\"137\":1}}],[\"则默认值为\",{\"1\":{\"135\":1}}],[\"则默认使用顶级文档的视口\",{\"1\":{\"135\":1}}],[\"停止监听特定目标元素\",{\"1\":{\"136\":1}}],[\"列表中的每个阈值都是监听对象的交叉区域与边界区域的比率\",{\"1\":{\"135\":1}}],[\"按升序排列\",{\"1\":{\"135\":1}}],[\"按钮点击\",{\"1\":{\"125\":1}}],[\"来实现响应式系统\",{\"1\":{\"307\":1}}],[\"来表达\",{\"1\":{\"135\":1}}],[\"来解析\",{\"1\":{\"12\":1}}],[\"像css\",{\"1\":{\"334\":1}}],[\"像素\",{\"1\":{\"135\":1}}],[\"像functiondate\",{\"1\":{\"120\":1}}],[\"计算交叉时添加到根边界盒的矩形偏移量\",{\"1\":{\"135\":1}}],[\"计划\",{\"1\":{\"19\":2}}],[\"用babel来转化es6文件到其他版本\",{\"1\":{\"337\":1}}],[\"用来设置需要引用的底层项目\",{\"1\":{\"303\":1}}],[\"用来从编译列表中去除指定的文件\",{\"1\":{\"300\":1}}],[\"用来提示\",{\"1\":{\"253\":1}}],[\"用作对象的键名\",{\"1\":{\"248\":1}}],[\"用作边界盒的元素或文档\",{\"1\":{\"135\":1}}],[\"用在元组的任意位置都可以\",{\"1\":{\"230\":1}}],[\"用大括号表示\",{\"1\":{\"223\":1}}],[\"用户是可以更快的看到完整的渲染页面\",{\"1\":{\"319\":1}}],[\"用户自定义的属性和方法都不存在于这两个类型之中\",{\"1\":{\"216\":1}}],[\"用户信息配置\",{\"0\":{\"172\":1}}],[\"用于处理异步组件的加载状态\",{\"1\":{\"309\":1}}],[\"用于创建一系列相关或相互依赖的对象\",{\"1\":{\"43\":1}}],[\"用于在客户端存储大量的结构化数据\",{\"1\":{\"35\":1}}],[\"懒加载等\",{\"1\":{\"133\":1}}],[\"观察器的配置\",{\"1\":{\"132\":1}}],[\"观察者可以在运行时动态添加或移除\",{\"1\":{\"82\":1}}],[\"观察者与主题之间的耦合度低\",{\"1\":{\"82\":1}}],[\"观察者接口\",{\"1\":{\"81\":1,\"83\":1}}],[\"观察者\",{\"1\":{\"81\":1}}],[\"观察者模式是一种行为型设计模式\",{\"1\":{\"81\":1}}],[\"观察者模式\",{\"0\":{\"81\":1}}],[\"选择需要观察变动的节点\",{\"1\":{\"132\":1}}],[\"选项卡\",{\"0\":{\"15\":1}}],[\"更多的与构件配置和部署相关的要求\",{\"1\":{\"324\":1}}],[\"更快的首屏加载\",{\"1\":{\"318\":1}}],[\"更快的速度\",{\"0\":{\"314\":1}}],[\"更小的核心代码\",{\"0\":{\"313\":1}}],[\"更高的学习成本\",{\"1\":{\"193\":1}}],[\"更适合用在大型的企业级项目\",{\"1\":{\"192\":1}}],[\"更好的seo\",{\"1\":{\"318\":1}}],[\"更好的typescript支持\",{\"0\":{\"315\":1}}],[\"更好的\",{\"1\":{\"192\":1}}],[\"更严格的类型系统\",{\"1\":{\"191\":1}}],[\"更改匹配给定选项时\",{\"1\":{\"131\":1}}],[\"更新速度最高提高一倍\",{\"1\":{\"314\":1}}],[\"更新新闻\",{\"1\":{\"83\":1}}],[\"更新时间等页面元信息\",{\"1\":{\"6\":1}}],[\"更新时间\",{\"1\":{\"3\":1}}],[\"该属性必须逐一列出文件\",{\"1\":{\"304\":1}}],[\"该属性就不能显式赋值为undefined\",{\"1\":{\"283\":1}}],[\"该类型的变量可以赋予任意类型的值\",{\"1\":{\"203\":1}}],[\"该观察者对象包含的回调函数都不会再被调用\",{\"1\":{\"131\":1}}],[\"该模式使得对象能够恢复到之前的状态\",{\"1\":{\"96\":1}}],[\"阻止\",{\"1\":{\"131\":1}}],[\"构造函数\",{\"0\":{\"130\":1,\"134\":1,\"139\":1}}],[\"子类型number\",{\"1\":{\"228\":1}}],[\"子类型继承了父类型的所有特征\",{\"1\":{\"228\":1}}],[\"子类型可以赋值给父类型\",{\"1\":{\"218\":1}}],[\"子节点的增删改\",{\"1\":{\"129\":1}}],[\"子系统类\",{\"1\":{\"68\":1,\"70\":1}}],[\"函数生成\",{\"1\":{\"206\":1}}],[\"函数f\",{\"1\":{\"205\":1}}],[\"函数\",{\"1\":{\"205\":1}}],[\"函数add\",{\"1\":{\"203\":1}}],[\"函数addone\",{\"1\":{\"190\":2}}],[\"函数tostring\",{\"1\":{\"196\":1}}],[\"函数参数和返回值\",{\"1\":{\"196\":1}}],[\"函数定义里面加入类型\",{\"1\":{\"190\":1}}],[\"函数防抖\",{\"1\":{\"127\":2}}],[\"函数节流\",{\"1\":{\"127\":2}}],[\"他们都是可以防止一个函数被无意义的高频率调用\",{\"1\":{\"127\":1}}],[\"区别\",{\"0\":{\"127\":1}}],[\"执行\",{\"1\":{\"126\":1}}],[\"执行完成之后\",{\"1\":{\"126\":1}}],[\"执行客户端代码\",{\"1\":{\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"70\":1,\"73\":1,\"77\":1,\"80\":1,\"83\":1,\"86\":1,\"89\":1,\"92\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1}}],[\"就认为这是项目的根目录\",{\"1\":{\"261\":1}}],[\"就表明键值是联合类型\",{\"1\":{\"248\":1}}],[\"就表示开发者想要自己来处理这些代码\",{\"1\":{\"203\":1}}],[\"就属于联合类型a|b\",{\"1\":{\"219\":1}}],[\"就允许了任何类型的变量都可以赋值为这两个值\",{\"1\":{\"217\":1}}],[\"就用5这个字面量来表示\",{\"1\":{\"207\":1}}],[\"就相应规定\",{\"1\":{\"205\":1}}],[\"就不能把一个赋值给另一个\",{\"1\":{\"207\":1}}],[\"就不可能赋给它任何值\",{\"1\":{\"205\":1}}],[\"就不会报错\",{\"1\":{\"204\":1}}],[\"就一定要显式声明类型\",{\"1\":{\"203\":1}}],[\"就多出了一个单独的编译步骤\",{\"1\":{\"193\":1}}],[\"就完全可以放心重构\",{\"1\":{\"192\":1}}],[\"就能用于加法运算了\",{\"1\":{\"204\":1}}],[\"就能基本确定\",{\"1\":{\"192\":1}}],[\"就能大致推断代码的作用\",{\"1\":{\"192\":1}}],[\"就能轻松发现拼写错误\",{\"1\":{\"192\":1}}],[\"就会加入一些辅助函数\",{\"1\":{\"282\":1}}],[\"就会返回unknown\",{\"1\":{\"251\":1}}],[\"就会推断数组成员的类型\",{\"1\":{\"227\":1}}],[\"就会推断该变量是值类型\",{\"1\":{\"218\":1}}],[\"就会推断它的类型\",{\"1\":{\"197\":1}}],[\"就会认为这两个变量和函数返回值的类型都是any\",{\"1\":{\"203\":1}}],[\"就会认为该变量的类型是any\",{\"1\":{\"203\":1}}],[\"就会得到结果\",{\"1\":{\"199\":1}}],[\"就会直接报错\",{\"1\":{\"192\":1}}],[\"就会报错\",{\"1\":{\"192\":1,\"196\":1,\"197\":1,\"203\":1,\"237\":1,\"240\":1,\"304\":1}}],[\"就会影响到另外一个对象\",{\"1\":{\"116\":1}}],[\"就可以写import\",{\"1\":{\"266\":1}}],[\"就可以采用联合类型的写法\",{\"1\":{\"219\":1}}],[\"就可以把该变量的类型设为any\",{\"1\":{\"203\":1}}],[\"就可以被赋值为任意类型的值\",{\"1\":{\"203\":1}}],[\"就可以直接运行\",{\"1\":{\"199\":1}}],[\"就可以发现很多问题\",{\"1\":{\"192\":1}}],[\"就可以确定变量的类型\",{\"1\":{\"192\":1}}],[\"就可以说\",{\"1\":{\"190\":1}}],[\"就报错了\",{\"1\":{\"190\":1}}],[\"就意味着\",{\"1\":{\"190\":1}}],[\"就是因为在调用方法时\",{\"1\":{\"212\":1}}],[\"就是用作属性名\",{\"1\":{\"207\":1}}],[\"就是缩小unknown变量的类型范围\",{\"1\":{\"204\":1}}],[\"就是它会\",{\"1\":{\"203\":1}}],[\"就是使用官网的在线编译页面\",{\"1\":{\"198\":1}}],[\"就是为\",{\"1\":{\"191\":1,\"196\":1}}],[\"就是一个独立的类型系统\",{\"1\":{\"189\":1}}],[\"就是要做到在一定的时间内只执行一次\",{\"1\":{\"126\":1}}],[\"就无法进入这个函数执行\",{\"1\":{\"126\":1}}],[\"鼠标移动\",{\"1\":{\"125\":1}}],[\"表单验证\",{\"1\":{\"125\":1}}],[\"表示增加可选属性的\",{\"1\":{\"249\":1}}],[\"表示去除可选属性的\",{\"1\":{\"249\":1}}],[\"表示先判断t是否兼容u\",{\"1\":{\"238\":1}}],[\"表示该成员是可选的\",{\"1\":{\"230\":1}}],[\"表示二维数组\",{\"1\":{\"229\":1}}],[\"表示\",{\"1\":{\"220\":1}}],[\"表示类型不确定\",{\"1\":{\"204\":1}}],[\"表示这是一个数值变量\",{\"1\":{\"203\":1}}],[\"表示这个位置只能使用数值\",{\"1\":{\"190\":1}}],[\"表示一个值被定义了\",{\"1\":{\"114\":1}}],[\"表示不存在定义\",{\"1\":{\"114\":1}}],[\"表示树的叶子节点\",{\"1\":{\"65\":1}}],[\"滚动条滚动\",{\"1\":{\"125\":1}}],[\"输入框搜索\",{\"1\":{\"125\":1}}],[\"输出的文件名为\",{\"1\":{\"289\":3}}],[\"输出\",{\"1\":{\"110\":1}}],[\"实验性\",{\"0\":{\"278\":1,\"279\":1}}],[\"实际的值是一个字符串\",{\"1\":{\"203\":1}}],[\"实际开发中\",{\"1\":{\"203\":1}}],[\"实际应用\",{\"0\":{\"125\":1}}],[\"实例继续接收的通知\",{\"1\":{\"131\":1}}],[\"实现方式\",{\"0\":{\"117\":1,\"120\":1}}],[\"实现抽象表达式接口\",{\"1\":{\"108\":2}}],[\"实现抽象处理者的接口\",{\"1\":{\"90\":1}}],[\"实现同事接口\",{\"1\":{\"105\":1}}],[\"实现中介者接口\",{\"1\":{\"105\":1}}],[\"实现元素接口\",{\"1\":{\"102\":1}}],[\"实现访问者接口\",{\"1\":{\"102\":1}}],[\"实现状态接口\",{\"1\":{\"99\":1}}],[\"实现撤销和重做操作\",{\"1\":{\"96\":1}}],[\"实现命令接口\",{\"1\":{\"93\":1}}],[\"实现观察者接口\",{\"1\":{\"81\":1}}],[\"实现主题接口\",{\"1\":{\"81\":1}}],[\"实现组件接口的具体类\",{\"1\":{\"65\":1}}],[\"实现实现接口的具体类\",{\"1\":{\"62\":1}}],[\"实现接口\",{\"1\":{\"62\":1,\"64\":1}}],[\"实现了聚合接口\",{\"1\":{\"87\":1}}],[\"实现了迭代器接口\",{\"1\":{\"87\":1}}],[\"实现了抽象类中的具体步骤\",{\"1\":{\"78\":1}}],[\"实现了策略接口的具体算法\",{\"1\":{\"75\":1}}],[\"实现了享元接口\",{\"1\":{\"71\":1}}],[\"实现了主题接口\",{\"1\":{\"59\":2}}],[\"实现了装饰器接口\",{\"1\":{\"56\":1}}],[\"实现了组件接口的具体类\",{\"1\":{\"56\":1}}],[\"实现克隆方法\",{\"1\":{\"49\":1}}],[\"实现建造者接口\",{\"1\":{\"46\":1}}],[\"递归的操作\",{\"1\":{\"120\":1}}],[\"弊端较多\",{\"1\":{\"120\":1}}],[\"且修改新对象不会影响原对象\",{\"1\":{\"119\":1}}],[\"从类型声明就可以明确知道\",{\"1\":{\"230\":1}}],[\"从集合论的角度看\",{\"1\":{\"203\":1}}],[\"从提交历史回复删除的某个分支\",{\"1\":{\"175\":1}}],[\"从主线程中剥离\",{\"1\":{\"144\":1}}],[\"从\",{\"1\":{\"131\":1,\"295\":1}}],[\"从堆内存中开辟一个新的区域存放新对象\",{\"1\":{\"119\":1}}],[\"从而完成增量构建\",{\"1\":{\"285\":1}}],[\"从而克服了any类型的一大缺点\",{\"1\":{\"204\":1}}],[\"从而在不安装的情况下\",{\"1\":{\"199\":1}}],[\"从而推断代码有没有错误\",{\"1\":{\"192\":1}}],[\"从而实现跨页面的通信\",{\"1\":{\"156\":1}}],[\"从而提高页面的响应速度和用户体验\",{\"1\":{\"144\":1}}],[\"从而使您可以使用不同的请求\",{\"1\":{\"93\":1}}],[\"从而简化客户端的使用\",{\"1\":{\"68\":1}}],[\"深拷贝是将一个对象总内存中完整的拷贝出来一份\",{\"1\":{\"119\":1}}],[\"深拷贝\",{\"0\":{\"119\":1}}],[\"深浅拷贝\",{\"0\":{\"112\":1}}],[\"都是写好的tsconfig\",{\"1\":{\"262\":1}}],[\"都是object类型\",{\"1\":{\"215\":1}}],[\"都只包含\",{\"1\":{\"216\":1}}],[\"都有对应的包装对象\",{\"1\":{\"212\":1}}],[\"都会报错\",{\"1\":{\"204\":1}}],[\"都会生成一个通知\",{\"1\":{\"135\":1}}],[\"都没有足够的信息\",{\"1\":{\"203\":1}}],[\"都没法拷贝\",{\"1\":{\"120\":1}}],[\"都不会报错\",{\"1\":{\"203\":1}}],[\"都可以使用这个值\",{\"1\":{\"190\":1}}],[\"都变成了\",{\"1\":{\"118\":1}}],[\"都得到通知并自动更新\",{\"1\":{\"81\":1}}],[\"结构外层的位置去\",{\"1\":{\"310\":1}}],[\"结构型\",{\"0\":{\"52\":1}}],[\"结束对指定\",{\"1\":{\"140\":1}}],[\"结果就是person和person1的名字不一样\",{\"1\":{\"118\":1}}],[\"数值\",{\"1\":{\"190\":1}}],[\"数组成员为对象\",{\"1\":{\"303\":1}}],[\"数组的类型推断\",{\"0\":{\"227\":1}}],[\"数组\",{\"0\":{\"226\":1}}],[\"数组与元组\",{\"0\":{\"225\":1}}],[\"数组和函数\",{\"1\":{\"216\":1}}],[\"数组或\",{\"1\":{\"147\":1}}],[\"数组属于引用对象所以拷贝的是他在内存中的地址\",{\"1\":{\"118\":1}}],[\"数字\",{\"1\":{\"147\":1}}],[\"数据处理和解析\",{\"1\":{\"154\":1}}],[\"数据类型\",{\"0\":{\"113\":1}}],[\"数据\",{\"1\":{\"80\":2}}],[\"94kb\",{\"1\":{\"313\":1}}],[\"9\",{\"1\":{\"118\":2,\"121\":1}}],[\"示例\",{\"0\":{\"118\":1,\"121\":1,\"132\":1,\"137\":1,\"141\":1,\"153\":1,\"162\":1}}],[\"方法和\",{\"1\":{\"236\":1}}],[\"方法是在数组类型前面加上readonly关键字\",{\"1\":{\"228\":1}}],[\"方法其实是定义在包装对象上\",{\"1\":{\"212\":1}}],[\"方法会返回相同的\",{\"1\":{\"207\":1}}],[\"方法终止\",{\"1\":{\"151\":1}}],[\"方法将消息发送回主线程\",{\"1\":{\"149\":1}}],[\"方法向\",{\"1\":{\"147\":1}}],[\"方法\",{\"0\":{\"131\":1,\"136\":1,\"140\":1},\"1\":{\"117\":3,\"120\":1,\"131\":1,\"192\":1,\"212\":1}}],[\"方便维护和扩展\",{\"1\":{\"88\":1}}],[\"拷贝的就是内存地址\",{\"1\":{\"116\":1}}],[\"拷贝是就是基本类型是值\",{\"1\":{\"116\":1}}],[\"浅拷贝是创建一个新对象\",{\"1\":{\"116\":1}}],[\"浅拷贝\",{\"0\":{\"116\":1}}],[\"等都不存在\",{\"1\":{\"250\":1}}],[\"等同于\",{\"1\":{\"249\":1}}],[\"等同于readonly\",{\"1\":{\"247\":1}}],[\"等同于求t\",{\"1\":{\"241\":1}}],[\"等同于构造函数的returntype<type>\",{\"1\":{\"240\":1}}],[\"等同于const\",{\"1\":{\"207\":1}}],[\"等号右边的部分\",{\"1\":{\"238\":1}}],[\"等号右侧4\",{\"1\":{\"218\":1}}],[\"等号左侧的类型是数值5\",{\"1\":{\"218\":1}}],[\"等于同一个\",{\"1\":{\"207\":1}}],[\"等\",{\"1\":{\"115\":1}}],[\"细分的话有\",{\"1\":{\"115\":1}}],[\"引擎提供\",{\"1\":{\"254\":1}}],[\"引擎运行\",{\"1\":{\"193\":1}}],[\"引入了\",{\"1\":{\"309\":1}}],[\"引入了unknown类型\",{\"1\":{\"204\":1}}],[\"引入了独立的编译步骤\",{\"1\":{\"193\":1}}],[\"引入了一个更强大\",{\"1\":{\"191\":1}}],[\"引入这种静态类型特征\",{\"1\":{\"191\":1}}],[\"引入symbol的原因\",{\"1\":{\"114\":1}}],[\"引用类型统称为object类型\",{\"1\":{\"115\":1}}],[\"引用类型\",{\"0\":{\"115\":1}}],[\"保留jsx语法\",{\"1\":{\"289\":1}}],[\"保证编译后的代码行为正确\",{\"1\":{\"282\":1}}],[\"保证类型运算的完整性\",{\"1\":{\"205\":1}}],[\"保证代码安全\",{\"1\":{\"192\":1}}],[\"保证每个属性的名字都是独一无二的就好了\",{\"1\":{\"114\":1}}],[\"保持一致\",{\"1\":{\"177\":2}}],[\"保存了所有的版本信息\",{\"1\":{\"170\":1}}],[\"保存了下次将提交的文件列表信息\",{\"1\":{\"170\":1}}],[\"保存状态\",{\"1\":{\"98\":2}}],[\"保存和恢复对象的状态\",{\"1\":{\"96\":1}}],[\"模块tslib\",{\"1\":{\"299\":1}}],[\"模块算法\",{\"1\":{\"295\":2}}],[\"模块格式\",{\"1\":{\"282\":1}}],[\"模块时\",{\"1\":{\"282\":1}}],[\"模块之间的兼容性问题\",{\"1\":{\"282\":1}}],[\"模块只输出了函数getgift\",{\"1\":{\"244\":1}}],[\"模块\",{\"0\":{\"199\":1},\"1\":{\"199\":1}}],[\"模块声明\",{\"0\":{\"182\":1}}],[\"模式\",{\"1\":{\"114\":1}}],[\"模板方法\",{\"1\":{\"80\":1}}],[\"模板方法使得子类可以在不改变算法结构的情况下\",{\"1\":{\"78\":1}}],[\"模板方法模式是一种行为型设计模式\",{\"1\":{\"78\":1}}],[\"模板方法模式\",{\"0\":{\"78\":1}}],[\"比如数值123和字符串hello\",{\"1\":{\"191\":1}}],[\"比如构建流程\",{\"1\":{\"174\":1}}],[\"比如加载脚本和图片\",{\"1\":{\"160\":1}}],[\"比如\",{\"1\":{\"114\":1,\"192\":1,\"207\":1,\"262\":1,\"266\":1,\"288\":1,\"299\":1}}],[\"前面的partial<type>的定义也可以写成下面这样\",{\"1\":{\"249\":1}}],[\"前面说了\",{\"1\":{\"191\":1}}],[\"前执行当持续触发事件\",{\"1\":{\"126\":1}}],[\"前两位必须是0x\",{\"1\":{\"114\":1}}],[\"前端存储\",{\"0\":{\"34\":1}}],[\"十六进制\",{\"1\":{\"114\":1}}],[\"八进制第一位必须是0\",{\"1\":{\"114\":1}}],[\"八进制\",{\"1\":{\"114\":1}}],[\"红宝书上说引入undefined就是为了正式的区分空对象指针与未经初始化的变量\",{\"1\":{\"114\":1}}],[\"无需等待javascript的下载和执行\",{\"1\":{\"319\":1}}],[\"无需引入直接在\",{\"1\":{\"186\":1}}],[\"无论是大写的object类型\",{\"1\":{\"216\":1}}],[\"无法推断出它们的类型\",{\"1\":{\"203\":1}}],[\"无法提前知道变量的类型是什么\",{\"1\":{\"191\":1}}],[\"无\",{\"1\":{\"114\":3}}],[\"所谓\",{\"1\":{\"204\":1,\"212\":1}}],[\"所以第二行报错了\",{\"1\":{\"282\":1}}],[\"所以一般情况不需要使用该属性\",{\"1\":{\"269\":1}}],[\"所以修改成员会报错\",{\"1\":{\"250\":1}}],[\"所以就原样返回了\",{\"1\":{\"242\":1}}],[\"所以就不对any类型进行任何限制\",{\"1\":{\"203\":1}}],[\"所以会返回自身\",{\"1\":{\"241\":1}}],[\"所以大多数情况下\",{\"1\":{\"230\":1}}],[\"所以报错\",{\"1\":{\"228\":1}}],[\"所以报错了\",{\"1\":{\"192\":1,\"218\":1,\"246\":1}}],[\"所以子类型number\",{\"1\":{\"228\":1}}],[\"所以读取成员类型也可以写成下面这样\",{\"1\":{\"226\":1}}],[\"所以只能用在类型运算之中\",{\"1\":{\"222\":1}}],[\"所以使用object时常常用空对象代替\",{\"1\":{\"215\":1}}],[\"所以没有办法直接获得\",{\"1\":{\"213\":1}}],[\"所以可以将前者赋值给后者\",{\"1\":{\"207\":1}}],[\"所以可能出现多个\",{\"1\":{\"207\":1}}],[\"所以最后一行就报错了\",{\"1\":{\"207\":1}}],[\"所以类型可以省略不写\",{\"1\":{\"207\":1}}],[\"所以这个类型的变量是不能修改值的\",{\"1\":{\"207\":1}}],[\"所以写不ss出只包含单个\",{\"1\":{\"207\":1}}],[\"所以返回值类型可以写成never\",{\"1\":{\"205\":1}}],[\"所以该类型被称为never\",{\"1\":{\"205\":1}}],[\"所以它和any一样\",{\"1\":{\"204\":1}}],[\"所以它不存在类型推断为any的问题\",{\"1\":{\"203\":1}}],[\"所以对于那些类型不明显的变量\",{\"1\":{\"203\":1}}],[\"所以\",{\"1\":{\"191\":3,\"216\":1,\"217\":1,\"220\":1,\"253\":1}}],[\"所以都属于\",{\"1\":{\"190\":1}}],[\"所以在触发之前需要清除之前的定时器\",{\"1\":{\"124\":1}}],[\"所以timer变量需要保存在内存中\",{\"1\":{\"124\":1}}],[\"所以如果其中一个对象改变了这个地址\",{\"1\":{\"116\":1}}],[\"所以引用值可以是null而不会是undefined\",{\"1\":{\"114\":1}}],[\"所有runtime\",{\"1\":{\"313\":1}}],[\"所有可选成员必须在必选成员之后\",{\"1\":{\"230\":1}}],[\"所有可以转成对象的值\",{\"1\":{\"215\":1}}],[\"所有成员的类型必须相同\",{\"1\":{\"226\":1}}],[\"所有\",{\"1\":{\"189\":1}}],[\"所有的偏移量均可用\",{\"1\":{\"135\":1}}],[\"所有交互逻辑集中在中介者中\",{\"1\":{\"106\":1}}],[\"所有依赖于它的对象\",{\"1\":{\"81\":1}}],[\"在遇到import或者require加载模块的时候\",{\"1\":{\"334\":1}}],[\"在import或加载模块时预处理文件\",{\"1\":{\"334\":1}}],[\"在node\",{\"1\":{\"325\":1}}],[\"在默认情况下vue\",{\"1\":{\"317\":1}}],[\"在显示加载组件之前延迟\",{\"1\":{\"309\":1}}],[\"在集合论上\",{\"1\":{\"204\":1}}],[\"在于所有类型的值都可以分配给unknown类型\",{\"1\":{\"204\":1}}],[\"在语法上\",{\"1\":{\"191\":1}}],[\"在\",{\"1\":{\"131\":1,\"152\":1,\"199\":1,\"206\":1,\"212\":1,\"308\":1,\"312\":1}}],[\"在js中\",{\"1\":{\"121\":1}}],[\"在浅拷贝中\",{\"1\":{\"118\":2}}],[\"在任何一个引用变量值设置为undefined都是错误的\",{\"1\":{\"114\":1}}],[\"在页面禁用功能与布局\",{\"1\":{\"3\":1}}],[\"注释\",{\"1\":{\"174\":1}}],[\"注释之前的内容被视为文章摘要\",{\"1\":{\"25\":1}}],[\"注册失败\",{\"1\":{\"164\":1}}],[\"注册成功\",{\"1\":{\"164\":1}}],[\"注册\",{\"0\":{\"164\":1}}],[\"注册service\",{\"0\":{\"161\":1}}],[\"注意不是css修改\",{\"1\":{\"174\":1}}],[\"注意\",{\"1\":{\"114\":1,\"196\":1,\"207\":1,\"211\":1,\"216\":1,\"233\":1,\"251\":1,\"253\":1,\"282\":1,\"304\":1}}],[\"便于理解和维护\",{\"1\":{\"109\":1}}],[\"便于扩展和维护\",{\"1\":{\"82\":1,\"85\":1}}],[\"便于扩展\",{\"1\":{\"44\":1}}],[\"解决方法就是改写上面的语句\",{\"1\":{\"282\":1}}],[\"解释应该如何使用这些代码\",{\"1\":{\"192\":1}}],[\"解释器模式是一种行为型设计模式\",{\"1\":{\"108\":1}}],[\"解释器模式\",{\"0\":{\"108\":1}}],[\"解耦\",{\"1\":{\"44\":1,\"63\":1,\"82\":1,\"85\":1,\"91\":1,\"94\":1}}],[\"易于管理和扩展\",{\"1\":{\"106\":1}}],[\"易于扩展\",{\"1\":{\"100\":1}}],[\"包装对象\",{\"1\":{\"212\":1,\"213\":1}}],[\"包装对象类型与字面量类型\",{\"0\":{\"213\":1}}],[\"包装对象类型\",{\"0\":{\"212\":1}}],[\"包含了一切可能的类型\",{\"1\":{\"203\":1}}],[\"包含中介者的引用并通过中介者与其他同事交互\",{\"1\":{\"105\":1}}],[\"包括节点属性的变化\",{\"1\":{\"129\":1}}],[\"包括文件和二进制对象\",{\"1\":{\"35\":1}}],[\"同一段代码可能存在两种typeof运算符\",{\"1\":{\"222\":1}}],[\"同时重置暂存区\",{\"1\":{\"177\":1}}],[\"同时每个页面包含\",{\"1\":{\"6\":1}}],[\"同源策略\",{\"1\":{\"156\":1}}],[\"同事对象之间不直接通信\",{\"1\":{\"106\":1}}],[\"同事接口\",{\"1\":{\"105\":1,\"107\":1}}],[\"协调各个同事对象的交互\",{\"1\":{\"105\":1}}],[\"访问所有元素\",{\"1\":{\"104\":1}}],[\"访问者接口\",{\"1\":{\"102\":1,\"104\":1}}],[\"访问者模式使得可以对一组对象进行操作\",{\"1\":{\"102\":1}}],[\"访问者模式是一种行为型设计模式\",{\"1\":{\"102\":1}}],[\"访问者模式\",{\"0\":{\"102\":1}}],[\"委托请求给当前状态\",{\"1\":{\"101\":1}}],[\"状态接口\",{\"1\":{\"99\":1,\"101\":1}}],[\"状态模式将状态的行为封装在独立的状态类中\",{\"1\":{\"99\":1}}],[\"状态模式是一种行为型设计模式\",{\"1\":{\"99\":1}}],[\"状态模式\",{\"0\":{\"99\":1}}],[\"状态发生变化时\",{\"1\":{\"81\":1}}],[\"管理备忘录的对象\",{\"1\":{\"96\":1}}],[\"管理员\",{\"1\":{\"96\":1,\"98\":1}}],[\"管理享元对象的创建和共享\",{\"1\":{\"71\":1}}],[\"备忘录\",{\"1\":{\"96\":1,\"98\":1}}],[\"备忘录模式不暴露对象的内部状态\",{\"1\":{\"97\":1}}],[\"备忘录模式是一种行为型设计模式\",{\"1\":{\"96\":1}}],[\"备忘录模式\",{\"0\":{\"96\":1}}],[\"撤销操作\",{\"0\":{\"177\":1},\"1\":{\"95\":1}}],[\"关于提交信息的格式\",{\"1\":{\"174\":1}}],[\"关于这些扩展\",{\"1\":{\"13\":1}}],[\"关闭灯\",{\"1\":{\"95\":1}}],[\"打开exactoptionalpropertytypes以后\",{\"1\":{\"283\":1}}],[\"打开esmoduleinterop\",{\"1\":{\"282\":1}}],[\"打开esmoduleinterop以后\",{\"1\":{\"282\":1}}],[\"打开这个属性\",{\"1\":{\"270\":1,\"282\":1}}],[\"打开这个设置\",{\"1\":{\"266\":1}}],[\"打开编译选项strictnullchecks后\",{\"1\":{\"219\":1}}],[\"打开strictnullchecks以后\",{\"1\":{\"217\":1}}],[\"打开\",{\"1\":{\"217\":1,\"283\":1}}],[\"打开该选项\",{\"1\":{\"203\":1}}],[\"打开灯\",{\"1\":{\"95\":1}}],[\"打印按钮\",{\"1\":{\"6\":1}}],[\"可能发生参数数量与数组长度不匹配的报错\",{\"1\":{\"233\":1}}],[\"可能是任意类型\",{\"1\":{\"204\":1}}],[\"可停止观察\",{\"1\":{\"132\":1}}],[\"可撤销操作\",{\"1\":{\"94\":1}}],[\"可以为loader带来更多特性\",{\"1\":{\"336\":1}}],[\"可以为特定的语法构建解析和执行机制\",{\"1\":{\"108\":1}}],[\"可以把共同的配置写成tsconfig\",{\"1\":{\"302\":1}}],[\"可以把变量类型设为any\",{\"1\":{\"203\":1}}],[\"可以正确调用\",{\"1\":{\"253\":1}}],[\"可以当作数组\",{\"1\":{\"233\":1}}],[\"可以任意取名\",{\"1\":{\"230\":1}}],[\"可以写成下面这样\",{\"1\":{\"230\":1}}],[\"可以写在圆括号里面\",{\"1\":{\"226\":1}}],[\"可以表示不限成员数量的元组\",{\"1\":{\"230\":1}}],[\"可以用于所有使用父类型的场合\",{\"1\":{\"228\":1}}],[\"可以是无限数量的成员\",{\"1\":{\"226\":1}}],[\"可以参考下面的例子来理解\",{\"1\":{\"207\":1}}],[\"可以赋值给父类型readonly\",{\"1\":{\"228\":1}}],[\"可以赋值给任意其他类型\",{\"1\":{\"205\":1}}],[\"可以赋值为各种类型的值\",{\"1\":{\"204\":1}}],[\"可以视为严格版的any\",{\"1\":{\"204\":1}}],[\"可以顺利通过编译\",{\"1\":{\"203\":1}}],[\"可以按下\",{\"1\":{\"199\":1}}],[\"可以逐行输入代码运行\",{\"1\":{\"199\":1}}],[\"可以先全局安装它\",{\"1\":{\"199\":1}}],[\"可以直接监听对象的新增和删除属性\",{\"1\":{\"307\":1}}],[\"可以直接将never类型从联合类型中\",{\"1\":{\"238\":1}}],[\"可以直接运行\",{\"1\":{\"199\":1}}],[\"可以直接在\",{\"1\":{\"193\":1}}],[\"可以告诉开发者这个函数怎么用\",{\"1\":{\"190\":1}}],[\"可以这样理解\",{\"1\":{\"190\":1}}],[\"可以进行该类型的所有运算\",{\"1\":{\"190\":1}}],[\"可以看成是\",{\"1\":{\"189\":1}}],[\"可以遵循以下的规则\",{\"1\":{\"174\":1}}],[\"可以修改用户的请求\",{\"1\":{\"160\":1}}],[\"可以有效的缩小或扩大根的判定范围从而满足计算需要\",{\"1\":{\"135\":1}}],[\"可以通过组合不同的表达式来扩展文法\",{\"1\":{\"109\":1}}],[\"可以通过组合不同的实现和抽象来扩展功能\",{\"1\":{\"63\":1}}],[\"可以通过添加新状态类来扩展新的行为\",{\"1\":{\"100\":1}}],[\"可以实现操作的撤销和重做功能\",{\"1\":{\"94\":1}}],[\"可以实现不同的迭代器以支持不同的遍历方式\",{\"1\":{\"88\":1}}],[\"可以很容易地添加新命令\",{\"1\":{\"94\":1}}],[\"可以动态添加或移除订阅者\",{\"1\":{\"85\":1}}],[\"可以动态添加和修改处理链的结构\",{\"1\":{\"91\":1}}],[\"可以动态添加和删除组合中的对象\",{\"1\":{\"66\":1}}],[\"可以动态添加和撤销功能\",{\"1\":{\"57\":1}}],[\"可以控制算法的执行流程\",{\"1\":{\"79\":1}}],[\"可以将系统中的多个接口封装成一个统一的接口\",{\"1\":{\"68\":1}}],[\"可以包含叶子和其他组合\",{\"1\":{\"65\":1}}],[\"可以在此文件中声明模块\",{\"1\":{\"182\":1}}],[\"可以在多个页面或\",{\"1\":{\"156\":1}}],[\"可以在需要时恢复对象的状态\",{\"1\":{\"97\":1}}],[\"可以在运行时选择算法\",{\"1\":{\"76\":1}}],[\"可以在运行时改变对象的结构和状态\",{\"1\":{\"50\":1}}],[\"可以在不修改元素类的情况下添加新操作\",{\"1\":{\"103\":1}}],[\"可以在不修改真实对象的情况下增加额外的功能\",{\"1\":{\"60\":1}}],[\"可以在不影响彼此的情况下进行扩展\",{\"1\":{\"62\":1}}],[\"可以延迟真实对象的创建\",{\"1\":{\"60\":1}}],[\"可以根据文件结构将它们转换为不同的页面\",{\"1\":{\"9\":1}}],[\"但必须兼容string|number|symbol\",{\"1\":{\"242\":1}}],[\"但只能赋值给类的readonly\",{\"1\":{\"207\":1}}],[\"但其实是两个值类型\",{\"1\":{\"207\":1}}],[\"但不赋值也不指定类型\",{\"1\":{\"203\":1}}],[\"但是当文件小于设定的limit时可以返回一个data\",{\"1\":{\"337\":1}}],[\"但是传入的是\",{\"1\":{\"233\":1}}],[\"但是反过来就会报错\",{\"1\":{\"228\":1}}],[\"但是反过来就不行\",{\"1\":{\"207\":1}}],[\"但是成员数量是不确定的\",{\"1\":{\"226\":1}}],[\"但是返回的不是字符串\",{\"1\":{\"222\":1}}],[\"但是有时候\",{\"1\":{\"217\":1}}],[\"但是完全没有使用的理由\",{\"1\":{\"213\":1}}],[\"但是剩下三种可以\",{\"1\":{\"212\":1}}],[\"但是y的类型是\",{\"1\":{\"207\":1}}],[\"但是属于不同的值类型\",{\"1\":{\"207\":1}}],[\"但是无法表示某一个具体的\",{\"1\":{\"207\":1}}],[\"但是每一个symbol值都是独一无二的\",{\"1\":{\"206\":1}}],[\"但是它的使用有一些限制\",{\"1\":{\"204\":1}}],[\"但是它被赋值为x\",{\"1\":{\"203\":1}}],[\"但是不报错\",{\"1\":{\"203\":1}}],[\"但是把它当作函数调用\",{\"1\":{\"203\":1}}],[\"但是没有意义\",{\"1\":{\"192\":1}}],[\"但是这个属性是可以删掉的\",{\"1\":{\"191\":1}}],[\"但是后面可以改成字符串\",{\"1\":{\"191\":1}}],[\"但是\",{\"1\":{\"191\":1,\"193\":1,\"204\":1,\"205\":1,\"207\":1,\"208\":1,\"212\":1,\"213\":1,\"218\":1,\"228\":1}}],[\"但是可能会报错\",{\"1\":{\"189\":1}}],[\"但是hobby数组是一样的并且hobby\",{\"1\":{\"118\":1}}],[\"但工作区保持不变\",{\"1\":{\"177\":1}}],[\"但工作区不变\",{\"1\":{\"177\":1}}],[\"但又想为这个对象添加新的方法\",{\"1\":{\"114\":1}}],[\"但具体处理者在运行时不确定时\",{\"1\":{\"92\":1}}],[\"但实现细节有所不同\",{\"1\":{\"80\":1}}],[\"职责链模式可以将请求的发送者和接收者解耦\",{\"1\":{\"90\":1}}],[\"职责链模式是一种行为型设计模式\",{\"1\":{\"90\":1}}],[\"职责链模式\",{\"0\":{\"90\":1}}],[\"300\",{\"1\":{\"331\":1}}],[\"3000\",{\"1\":{\"309\":1}}],[\"3\",{\"1\":{\"89\":1,\"98\":1,\"118\":1,\"121\":1,\"203\":1,\"204\":1,\"226\":2,\"228\":2,\"229\":1,\"230\":1,\"232\":1,\"312\":1,\"314\":1}}],[\"聚合接口\",{\"1\":{\"87\":1,\"89\":1}}],[\"维护一个元素集合\",{\"1\":{\"102\":1}}],[\"维护遍历的状态\",{\"1\":{\"87\":1}}],[\"维护观察者的列表并在状态变化时通知观察者\",{\"1\":{\"81\":1}}],[\"迭代器与集合的实现分开\",{\"1\":{\"88\":1}}],[\"迭代器接口\",{\"1\":{\"87\":1,\"89\":1}}],[\"迭代器模式使得集合的遍历与集合的实现相分离\",{\"1\":{\"87\":1}}],[\"迭代器模式是一种行为型设计模式\",{\"1\":{\"87\":1}}],[\"迭代器模式\",{\"0\":{\"87\":1}}],[\"取反运算\",{\"1\":{\"204\":1}}],[\"取出储藏中对应的工作状态进行恢复\",{\"1\":{\"178\":1}}],[\"取出储藏中最后存入的工作状态进行恢复\",{\"1\":{\"178\":1}}],[\"取消合并\",{\"1\":{\"175\":1}}],[\"取消特定观察者目标上所有对\",{\"1\":{\"140\":1}}],[\"取消订阅\",{\"1\":{\"86\":1}}],[\"取值的时候需要经过反序列化\",{\"1\":{\"35\":1}}],[\"发现字符串没有find\",{\"1\":{\"192\":1}}],[\"发现类型不对\",{\"1\":{\"190\":1}}],[\"发送的数据可以是任何可序列化的对象\",{\"1\":{\"147\":1}}],[\"发送消息到主线程\",{\"0\":{\"149\":1}}],[\"发送消息到worker\",{\"0\":{\"147\":1}}],[\"发送消息\",{\"1\":{\"86\":1,\"107\":1,\"147\":1}}],[\"发起人\",{\"1\":{\"96\":1,\"98\":1}}],[\"发起请求的对象\",{\"1\":{\"90\":1}}],[\"发布者和订阅者之间没有直接依赖关系\",{\"1\":{\"85\":1}}],[\"发布者和订阅者之间通过一个中介\",{\"1\":{\"84\":1}}],[\"发布者\",{\"1\":{\"84\":1}}],[\"发布\",{\"1\":{\"84\":1}}],[\"发布订阅模式\",{\"0\":{\"84\":1}}],[\"或者any类型和unknown类型的变量\",{\"1\":{\"217\":1}}],[\"或者直接当作函数执行\",{\"1\":{\"204\":1}}],[\"或者直接向用户发出回应\",{\"1\":{\"160\":1}}],[\"或者当作对象读取任意属性\",{\"1\":{\"203\":1}}],[\"或者输入\",{\"1\":{\"199\":1}}],[\"或其他\",{\"1\":{\"155\":1}}],[\"或其值为null\",{\"1\":{\"135\":1}}],[\"或百分比\",{\"1\":{\"135\":1}}],[\"或\",{\"1\":{\"84\":1}}],[\"订阅者\",{\"1\":{\"84\":1}}],[\"订阅模式是一种消息通信模式\",{\"1\":{\"84\":1}}],[\"进行比较运算就是可以的\",{\"1\":{\"204\":1}}],[\"进行类型检查了\",{\"1\":{\"203\":1}}],[\"进行解耦\",{\"1\":{\"84\":1}}],[\"进行引用\",{\"1\":{\"28\":1}}],[\"动态类型有非常高的灵活性\",{\"1\":{\"193\":1}}],[\"动态类型与静态类型\",{\"0\":{\"191\":1}}],[\"动态订阅\",{\"1\":{\"82\":1}}],[\"动态地向其添加额外的功能\",{\"1\":{\"56\":1}}],[\"处理css\",{\"1\":{\"337\":2}}],[\"处理sass\",{\"1\":{\"337\":1}}],[\"处理less\",{\"1\":{\"337\":1}}],[\"处理所有可能的类型之后\",{\"1\":{\"205\":1}}],[\"处理请求并切换到状态\",{\"1\":{\"101\":3}}],[\"处理请求或将其传递给下一个处理者\",{\"1\":{\"90\":1}}],[\"处理执行请求的具体逻辑\",{\"1\":{\"93\":1}}],[\"处理主题状态变化的逻辑\",{\"1\":{\"81\":1}}],[\"处理\",{\"1\":{\"80\":2,\"92\":2}}],[\"控制流程\",{\"1\":{\"79\":1}}],[\"控制访问\",{\"1\":{\"60\":1}}],[\"支持组件的多个根节点\",{\"1\":{\"308\":1}}],[\"支持通配符\",{\"1\":{\"300\":1}}],[\"支持jsx转换\",{\"1\":{\"289\":1}}],[\"支持块级类型声明\",{\"1\":{\"223\":1}}],[\"支持\",{\"1\":{\"192\":1}}],[\"支持多种遍历方式\",{\"1\":{\"88\":1}}],[\"支持多对多的通信\",{\"1\":{\"85\":1}}],[\"支持为图片设置颜色模式和大小\",{\"1\":{\"20\":1}}],[\"支付\",{\"1\":{\"77\":1}}],[\"封装状态\",{\"1\":{\"100\":1}}],[\"封装性\",{\"1\":{\"76\":1,\"97\":1}}],[\"封装了复杂的子系统\",{\"1\":{\"68\":1}}],[\"增加了编程工作量\",{\"1\":{\"193\":1}}],[\"增加新的操作时\",{\"1\":{\"104\":1}}],[\"增加新的策略时不需要修改客户端代码\",{\"1\":{\"76\":1}}],[\"增强功能\",{\"1\":{\"60\":1}}],[\"策略接口\",{\"1\":{\"75\":1,\"77\":1}}],[\"策略模式使得算法的变化独立于使用算法的客户\",{\"1\":{\"75\":1}}],[\"策略模式是一种行为型设计模式\",{\"1\":{\"75\":1}}],[\"策略模式\",{\"0\":{\"75\":1}}],[\"行为型\",{\"0\":{\"74\":1}}],[\"复用已有的对象\",{\"1\":{\"73\":1}}],[\"降低了对象创建的开销\",{\"1\":{\"72\":1}}],[\"降低耦合\",{\"1\":{\"69\":1,\"106\":1}}],[\"节省程序员的时间\",{\"1\":{\"192\":1}}],[\"节约内存\",{\"1\":{\"72\":1}}],[\"节流\",{\"0\":{\"126\":1},\"1\":{\"37\":1}}],[\"享元工厂\",{\"1\":{\"71\":1,\"73\":1}}],[\"享元接口\",{\"1\":{\"71\":1,\"73\":1}}],[\"享元模式主要用于减少内存使用和提高性能\",{\"1\":{\"71\":1}}],[\"享元模式是一种结构型设计模式\",{\"1\":{\"71\":1}}],[\"享元模式\",{\"0\":{\"71\":1}}],[\"适合一个大项目由许多小项目构成的情况\",{\"1\":{\"303\":1}}],[\"适合用在描述then\",{\"1\":{\"236\":1}}],[\"适用于需要创建大量相似对象的场景\",{\"1\":{\"71\":1}}],[\"适配\",{\"1\":{\"193\":1}}],[\"适配器\",{\"1\":{\"55\":1}}],[\"适配器模式是一种结构型设计模式\",{\"1\":{\"53\":1}}],[\"适配器模式\",{\"0\":{\"53\":1}}],[\"适配者类\",{\"1\":{\"53\":1,\"55\":1}}],[\"适配者\",{\"1\":{\"53\":1}}],[\"隐藏了系统的复杂性\",{\"1\":{\"69\":1}}],[\"外观类\",{\"1\":{\"68\":1,\"70\":1}}],[\"外观模式是一种结构型设计模式\",{\"1\":{\"68\":1}}],[\"外观模式\",{\"0\":{\"68\":1}}],[\"绘制组合图形\",{\"1\":{\"67\":1}}],[\"持有命令对象并调用命令的执行方法\",{\"1\":{\"93\":1}}],[\"持有对策略对象的引用\",{\"1\":{\"75\":1}}],[\"持有子组件的引用\",{\"1\":{\"65\":1}}],[\"持有一个状态对象\",{\"1\":{\"99\":1}}],[\"持有一个真实主题的引用\",{\"1\":{\"59\":1}}],[\"持有一个组件的引用\",{\"1\":{\"56\":1}}],[\"叶子类\",{\"1\":{\"67\":1}}],[\"叶子\",{\"1\":{\"65\":1}}],[\"声明时必须同时赋值\",{\"1\":{\"203\":1}}],[\"声明了返回值的类型是string\",{\"1\":{\"196\":1}}],[\"声明了它的类型为string\",{\"1\":{\"196\":1}}],[\"声明了叶子和组合对象的共同接口\",{\"1\":{\"65\":1}}],[\"声明变量但没有初始化\",{\"1\":{\"114\":1}}],[\"声明一个克隆自身的方法\",{\"1\":{\"49\":1}}],[\"umd\",{\"1\":{\"295\":1}}],[\"uppercase<a>\",{\"1\":{\"255\":1}}],[\"uppercase<stringtype>将字符串类型的每个字符转为大写\",{\"1\":{\"255\":1}}],[\"update\",{\"1\":{\"83\":3,\"253\":2}}],[\"u\",{\"1\":{\"186\":1,\"238\":1,\"239\":1,\"251\":2,\"252\":2}}],[\"u>正好相反\",{\"1\":{\"239\":1}}],[\"u>就相当于删除兼容的类型\",{\"1\":{\"238\":1}}],[\"u>\",{\"1\":{\"186\":4,\"238\":1,\"239\":1}}],[\"url\",{\"1\":{\"162\":1,\"173\":1,\"186\":1,\"337\":2}}],[\"useuserstore\",{\"1\":{\"328\":1}}],[\"user\",{\"1\":{\"172\":2}}],[\"use\",{\"1\":{\"132\":1,\"265\":1,\"335\":1}}],[\"using\",{\"1\":{\"64\":2,\"77\":2}}],[\"unmounted\",{\"1\":{\"331\":1}}],[\"uncapitalize<a>\",{\"1\":{\"258\":1}}],[\"uncapitalize<stringtype>\",{\"1\":{\"258\":1}}],[\"union>的实现如下\",{\"1\":{\"239\":1}}],[\"union>用来从联合类型uniontype之中\",{\"1\":{\"239\":1}}],[\"union\",{\"1\":{\"219\":1}}],[\"unique\",{\"0\":{\"207\":1},\"1\":{\"207\":19,\"208\":3}}],[\"unit\",{\"1\":{\"186\":1}}],[\"unobserve\",{\"1\":{\"136\":1,\"140\":1,\"141\":1,\"330\":1}}],[\"undefined>\",{\"1\":{\"241\":4}}],[\"undefined和null只能赋值给自身\",{\"1\":{\"217\":1}}],[\"undefined和null就不能赋值给其他类型的变量\",{\"1\":{\"217\":1}}],[\"undefined和null既是值\",{\"1\":{\"217\":1}}],[\"undefined和null其实是两个特殊值\",{\"1\":{\"212\":1}}],[\"undefined和null的区别\",{\"1\":{\"114\":1}}],[\"undefined表示\",{\"1\":{\"114\":1}}],[\"undefined\",{\"0\":{\"217\":1},\"1\":{\"114\":1,\"186\":1,\"211\":1,\"215\":1,\"217\":5,\"222\":2,\"237\":1,\"267\":1,\"268\":1,\"283\":1}}],[\"undo\",{\"1\":{\"95\":4}}],[\"unsubscribe\",{\"1\":{\"86\":2}}],[\"unknown也可以视为所有其他类型\",{\"1\":{\"204\":1}}],[\"unknown可以看作是更安全的any\",{\"1\":{\"204\":1}}],[\"unknown类型变量才可以使用\",{\"1\":{\"204\":1}}],[\"unknown类型变量能够进行的运算是有限的\",{\"1\":{\"204\":1}}],[\"unknown类型的变量a经过typeof运算以后\",{\"1\":{\"204\":1}}],[\"unknown类型的变量a进行加法运算会报错\",{\"1\":{\"204\":1}}],[\"unknown类型的变量\",{\"1\":{\"204\":1}}],[\"unknown类型跟any类型的不同之处在于\",{\"1\":{\"204\":1}}],[\"unknown跟any的相似之处\",{\"1\":{\"204\":1}}],[\"unknown\",{\"0\":{\"204\":1},\"1\":{\"42\":1,\"186\":1,\"204\":8,\"237\":1,\"243\":1,\"244\":2,\"251\":1,\"252\":1}}],[\"减少错误\",{\"1\":{\"190\":1}}],[\"减少了依赖关系\",{\"1\":{\"106\":1}}],[\"减少了耦合\",{\"1\":{\"63\":1}}],[\"减少代码重复\",{\"1\":{\"79\":1}}],[\"减少内存占用\",{\"1\":{\"72\":1}}],[\"减少创建成本\",{\"1\":{\"50\":1}}],[\"继承了\",{\"1\":{\"211\":1}}],[\"继承了组件接口\",{\"1\":{\"56\":1}}],[\"继承自抽象类\",{\"1\":{\"62\":1}}],[\"桥接模式是一种结构型设计模式\",{\"1\":{\"62\":1}}],[\"桥接模式\",{\"0\":{\"62\":1}}],[\"图像将在第一次调用时加载\",{\"1\":{\"61\":1}}],[\"图片懒加载\",{\"0\":{\"330\":1},\"1\":{\"330\":1}}],[\"图片引入\",{\"1\":{\"28\":1}}],[\"图片增强\",{\"0\":{\"20\":1}}],[\"java\",{\"0\":{\"342\":1}}],[\"javascript\",{\"1\":{\"144\":1,\"189\":5,\"190\":1,\"191\":7,\"192\":5,\"193\":5,\"196\":1,\"203\":3,\"211\":2,\"212\":2,\"215\":1,\"216\":2,\"217\":1,\"222\":2,\"230\":1,\"254\":2},\"2\":{\"38\":1,\"111\":1,\"122\":1,\"128\":1,\"142\":1,\"165\":1,\"168\":1,\"340\":1}}],[\"john\",{\"1\":{\"219\":1}}],[\"jquery\",{\"1\":{\"120\":1}}],[\"js和\",{\"1\":{\"301\":1}}],[\"jsx设置如何处理\",{\"1\":{\"289\":1}}],[\"jsx\",{\"0\":{\"289\":1},\"1\":{\"289\":2,\"301\":1}}],[\"js文件\",{\"1\":{\"280\":1}}],[\"js\",{\"1\":{\"146\":1,\"153\":2,\"158\":1,\"161\":1,\"164\":1,\"189\":1,\"264\":2,\"270\":2,\"286\":2,\"287\":1,\"289\":2,\"295\":2,\"324\":1,\"325\":1}}],[\"js诞生的时候只设置了null作为\",{\"1\":{\"114\":1}}],[\"json的面来讲一个npm模块导出为loader\",{\"1\":{\"336\":1}}],[\"json的位置\",{\"1\":{\"261\":1}}],[\"json可以继承另一个tsconfig\",{\"1\":{\"302\":1}}],[\"json样本\",{\"1\":{\"262\":1}}],[\"json文件的配置\",{\"1\":{\"302\":1}}],[\"json文件可以不必手写\",{\"1\":{\"262\":1}}],[\"json文件主要供tsc编译器使用\",{\"1\":{\"261\":1}}],[\"json是\",{\"1\":{\"261\":1}}],[\"jsonprocessor\",{\"1\":{\"80\":2}}],[\"json\",{\"0\":{\"260\":1},\"1\":{\"80\":3,\"120\":2,\"147\":1,\"217\":1,\"261\":1,\"262\":1,\"269\":1,\"302\":1,\"303\":1}}],[\"jsondataprocessor\",{\"1\":{\"80\":2}}],[\"jumping\",{\"1\":{\"70\":1}}],[\"jump\",{\"1\":{\"70\":2}}],[\"jpg\",{\"1\":{\"61\":1}}],[\"||\",{\"1\":{\"110\":1,\"204\":1,\"331\":2}}],[\"|\",{\"1\":{\"61\":1,\"89\":2,\"92\":1,\"95\":1,\"114\":1,\"186\":10,\"205\":1,\"219\":10,\"226\":2,\"236\":2,\"237\":1,\"238\":11,\"239\":14,\"241\":7,\"242\":1,\"246\":1,\"248\":5,\"283\":1}}],[\"并返回css代码\",{\"1\":{\"337\":1}}],[\"并加上了自己的特征\",{\"1\":{\"228\":1}}],[\"并且能够执行任何操作\",{\"1\":{\"336\":1}}],[\"并且那些会修改源数组的方法push\",{\"1\":{\"250\":1}}],[\"并且只在当前代码块有效\",{\"1\":{\"223\":1}}],[\"并且还可以新增其他属性\",{\"1\":{\"191\":1}}],[\"并且应用到当前分支\",{\"1\":{\"177\":1}}],[\"并且其状态在运行时会改变时\",{\"1\":{\"101\":1}}],[\"并切换为这个分支\",{\"1\":{\"175\":1}}],[\"并包括指定文件的新变化关于提交信息的格式\",{\"1\":{\"174\":1}}],[\"并写提交注释\",{\"1\":{\"174\":1}}],[\"并行执行环境\",{\"1\":{\"144\":1}}],[\"并将其中的this参数删除\",{\"1\":{\"243\":1}}],[\"并将\",{\"1\":{\"193\":1}}],[\"并将它们返回到\",{\"1\":{\"131\":1}}],[\"并将一些步骤的实现延迟到子类中\",{\"1\":{\"78\":1}}],[\"并需要解释其句子时\",{\"1\":{\"110\":1}}],[\"并定义了该语言的解释器\",{\"1\":{\"108\":1}}],[\"并可以遍历这些元素\",{\"1\":{\"102\":1}}],[\"并持有下一个处理者的引用\",{\"1\":{\"90\":1}}],[\"并持有一个实现部分的引用\",{\"1\":{\"62\":1}}],[\"并转发消息\",{\"1\":{\"84\":1}}],[\"并使它们可以互相替换\",{\"1\":{\"75\":1}}],[\"并控制对其的访问\",{\"1\":{\"59\":1}}],[\"并在其状态改变时委托状态对象来处理请求\",{\"1\":{\"99\":1}}],[\"并在保持原有类接口的前提下\",{\"1\":{\"56\":1}}],[\"并在全局可以访问\",{\"1\":{\"41\":1}}],[\"真实主题\",{\"1\":{\"59\":1,\"61\":1}}],[\"通信方式同web\",{\"1\":{\"158\":1}}],[\"通常需要使用分支处理每一种类型\",{\"1\":{\"205\":1}}],[\"通常都应该优先考虑设为unknown类型\",{\"1\":{\"204\":1}}],[\"通常称为事件总线或消息代理\",{\"1\":{\"84\":1}}],[\"通常用于延迟加载\",{\"1\":{\"59\":1}}],[\"通知所有观察者\",{\"1\":{\"83\":1}}],[\"通过其回调函数开始接收通知\",{\"1\":{\"131\":1}}],[\"通过使用解释器模式\",{\"1\":{\"108\":1}}],[\"通过抽象类提供通用的算法结构\",{\"1\":{\"79\":1}}],[\"通过共享相同的对象\",{\"1\":{\"72\":1}}],[\"通过外观模式\",{\"1\":{\"68\":1}}],[\"通过将这些操作封装在访问者对象中\",{\"1\":{\"102\":1}}],[\"通过将抽象部分与实现部分分开\",{\"1\":{\"62\":1}}],[\"通过将功能分离到装饰器中\",{\"1\":{\"57\":1}}],[\"通过将一个类的接口转换成客户端所期望的另一种接口\",{\"1\":{\"53\":1}}],[\"通过目标接口与适配器交互\",{\"1\":{\"53\":1}}],[\"通过复制现有的对象来创建新对象\",{\"1\":{\"50\":1}}],[\"通过复制现有的对象来创建新的对象\",{\"1\":{\"49\":1}}],[\"通过\",{\"1\":{\"11\":1,\"14\":1,\"144\":1}}],[\"代表实例类型\",{\"1\":{\"240\":1}}],[\"代表实际的对象\",{\"1\":{\"59\":1}}],[\"代表操作数的类型\",{\"1\":{\"222\":1}}],[\"代表最基本的\",{\"1\":{\"212\":1}}],[\"代表文法中的非终结符\",{\"1\":{\"108\":1}}],[\"代表文法中的终结符\",{\"1\":{\"108\":1}}],[\"代码部分\",{\"1\":{\"222\":2}}],[\"代码块内部定义的别名\",{\"1\":{\"221\":1}}],[\"代码看看结果\",{\"1\":{\"199\":1}}],[\"代码最明显的特征\",{\"1\":{\"196\":1}}],[\"代码转成\",{\"1\":{\"193\":1}}],[\"代码也许就会原样发布\",{\"1\":{\"190\":1}}],[\"代码\",{\"1\":{\"190\":1,\"191\":1,\"192\":2,\"193\":2,\"199\":2}}],[\"代码格式修改\",{\"1\":{\"174\":1}}],[\"代码重构\",{\"1\":{\"174\":1}}],[\"代码复用\",{\"1\":{\"79\":1}}],[\"代码可读性强\",{\"1\":{\"47\":1}}],[\"代理可以在访问真实对象前后添加额外的处理逻辑\",{\"1\":{\"60\":1}}],[\"代理\",{\"1\":{\"59\":1,\"61\":1}}],[\"代理对象可以在客户端与真实对象之间起到中介作用\",{\"1\":{\"59\":1}}],[\"代理模式是一种结构型设计模式\",{\"1\":{\"59\":1}}],[\"代理模式\",{\"0\":{\"59\":1}}],[\"添加类型系统以后\",{\"1\":{\"193\":1}}],[\"添加类型系统\",{\"1\":{\"191\":1}}],[\"添加的最主要部分\",{\"1\":{\"189\":1}}],[\"添加糖描述\",{\"1\":{\"58\":1}}],[\"添加糖的成本\",{\"1\":{\"58\":1}}],[\"添加牛奶描述\",{\"1\":{\"58\":1}}],[\"添加牛奶的成本\",{\"1\":{\"58\":1}}],[\"添加新的功能\",{\"1\":{\"56\":1}}],[\"5kb\",{\"1\":{\"313\":2}}],[\"55\",{\"1\":{\"221\":1}}],[\"5是一个具体的数值\",{\"1\":{\"207\":1}}],[\"5\",{\"1\":{\"58\":2,\"64\":1,\"118\":1,\"121\":1,\"141\":2,\"218\":3,\"221\":1,\"223\":1,\"312\":1}}],[\"原因是函数add\",{\"1\":{\"233\":1}}],[\"原因是\",{\"1\":{\"222\":1}}],[\"原因就是x的类型是any\",{\"1\":{\"203\":1}}],[\"原始类型的值本身没有方法\",{\"1\":{\"212\":1}}],[\"原生的\",{\"1\":{\"193\":1}}],[\"原有类的职责更单一\",{\"1\":{\"57\":1}}],[\"原型接口\",{\"1\":{\"49\":1,\"51\":1}}],[\"原型模式是一种创建型设计模式\",{\"1\":{\"49\":1}}],[\"原型模式\",{\"0\":{\"49\":1}}],[\"装饰器基类\",{\"1\":{\"58\":1}}],[\"装饰器接口\",{\"1\":{\"56\":1}}],[\"装饰器模式是一种结构型设计模式\",{\"1\":{\"56\":1}}],[\"装饰器模式\",{\"0\":{\"56\":1}}],[\"定义变量准备在将来用于保存对象\",{\"1\":{\"114\":1}}],[\"定义为空值\",{\"1\":{\"114\":1}}],[\"定义解释操作的接口\",{\"1\":{\"108\":1}}],[\"定义同事对象的接口\",{\"1\":{\"105\":1}}],[\"定义接受访问者的方法\",{\"1\":{\"102\":1}}],[\"定义具体的元素数据\",{\"1\":{\"102\":1}}],[\"定义具体的操作\",{\"1\":{\"102\":1}}],[\"定义具体的状态行为\",{\"1\":{\"99\":1}}],[\"定义对每个具体元素类的访问操作\",{\"1\":{\"102\":1}}],[\"定义新的操作\",{\"1\":{\"102\":1}}],[\"定义与接收者之间的绑定\",{\"1\":{\"93\":1}}],[\"定义执行命令的接口\",{\"1\":{\"93\":1}}],[\"定义处理请求的接口\",{\"1\":{\"90\":1}}],[\"定义更新方法\",{\"1\":{\"81\":1}}],[\"定义添加\",{\"1\":{\"81\":1}}],[\"定义实现部分的接口\",{\"1\":{\"62\":1}}],[\"定义抽象部分的接口\",{\"1\":{\"62\":1}}],[\"定义了与各个同事对象的交互接口\",{\"1\":{\"105\":1}}],[\"定义了与状态相关的行为接口\",{\"1\":{\"99\":1}}],[\"定义了创建迭代器的方法\",{\"1\":{\"87\":1}}],[\"定义了访问和遍历集合的接口\",{\"1\":{\"87\":1}}],[\"定义了模板方法和一些抽象步骤\",{\"1\":{\"78\":1}}],[\"定义了所有支持的算法的公共接口\",{\"1\":{\"75\":1}}],[\"定义了享元对象的接口\",{\"1\":{\"71\":1}}],[\"定义了代理和真实对象的共同接口\",{\"1\":{\"59\":1}}],[\"定义了对象的接口\",{\"1\":{\"56\":1}}],[\"定义创建产品的抽象接口\",{\"1\":{\"46\":1}}],[\"将css添加到dom的内联样式标签style中\",{\"1\":{\"337\":1}}],[\"将由\",{\"1\":{\"312\":1}}],[\"将\",{\"1\":{\"289\":2}}],[\"将自动打开allowsyntheticdefaultimports\",{\"1\":{\"282\":1}}],[\"将以\",{\"1\":{\"269\":1}}],[\"将字符串的第一个字符转为小写\",{\"1\":{\"258\":1}}],[\"将所有属性变成只读的可选属性\",{\"1\":{\"247\":1}}],[\"将参数类型的所有属性变成可变属性\",{\"1\":{\"247\":1}}],[\"将参数类型type的所有属性变为必选属性\",{\"1\":{\"249\":1}}],[\"将参数类型type的所有属性变为只读属性\",{\"1\":{\"247\":1}}],[\"将参数类型type的所有属性变为可选属性\",{\"1\":{\"245\":1}}],[\"将数组\",{\"1\":{\"233\":1}}],[\"将typeof运算符移植到了类型运算\",{\"1\":{\"222\":1}}],[\"将timeout置空\",{\"1\":{\"126\":1}}],[\"将值分成8种类型\",{\"1\":{\"211\":1}}],[\"将这种类型称为\",{\"1\":{\"203\":1}}],[\"将快照永久性存储到git本地仓库\",{\"1\":{\"170\":1}}],[\"将操作集中在访问者中\",{\"1\":{\"103\":1}}],[\"将状态相关的行为封装在状态类中\",{\"1\":{\"100\":1}}],[\"将不同的算法封装在不同的策略类中\",{\"1\":{\"76\":1}}],[\"将每个算法封装起来\",{\"1\":{\"75\":1}}],[\"将适配的责任分离到适配器中\",{\"1\":{\"54\":1}}],[\"将你的个人介绍和档案放置在此处\",{\"1\":{\"0\":1}}],[\"单个值也是一种类型\",{\"1\":{\"218\":1}}],[\"单独运行ts\",{\"1\":{\"199\":1}}],[\"单单在开发阶段运行静态检查\",{\"1\":{\"192\":1}}],[\"单一职责原则\",{\"1\":{\"54\":1,\"57\":1}}],[\"单例模式\",{\"0\":{\"41\":1}}],[\"提取指定类型union\",{\"1\":{\"239\":1}}],[\"提交时显示所有diff\",{\"1\":{\"174\":1}}],[\"提交代码到本地仓库\",{\"1\":{\"174\":1}}],[\"提交某些文件到缓存区\",{\"1\":{\"174\":1}}],[\"提交全部文件修改到缓存区\",{\"1\":{\"174\":1}}],[\"提交更新\",{\"1\":{\"170\":1}}],[\"提示运算符+不能用于数值和布尔值的相加\",{\"1\":{\"192\":1}}],[\"提示\",{\"1\":{\"138\":1,\"147\":1,\"213\":1,\"217\":1,\"218\":1,\"219\":1,\"222\":1,\"228\":1,\"230\":1,\"247\":1,\"249\":1,\"262\":1,\"282\":1,\"317\":1}}],[\"提高系统的灵活性和可维护性\",{\"1\":{\"105\":1}}],[\"提高性能\",{\"1\":{\"72\":1}}],[\"提高了系统的灵活性\",{\"1\":{\"69\":1}}],[\"提高代码的灵活性和可复用性\",{\"1\":{\"54\":1}}],[\"提供了更强大的功能\",{\"1\":{\"307\":1}}],[\"提供了一个编译选项strictnullchecks\",{\"1\":{\"217\":1}}],[\"提供了一个编译选项noimplicitany\",{\"1\":{\"203\":1}}],[\"提供了一个简单的接口\",{\"1\":{\"69\":1}}],[\"提供了代码文档\",{\"1\":{\"192\":1}}],[\"提供语法提示功能\",{\"1\":{\"192\":1}}],[\"提供功能的具体实现\",{\"1\":{\"68\":1}}],[\"提供一个简单的接口\",{\"1\":{\"68\":1}}],[\"提供额外的功能\",{\"1\":{\"56\":1}}],[\"提供更加丰富的写作功能\",{\"1\":{\"14\":1}}],[\"具有提示作用\",{\"1\":{\"190\":1}}],[\"具有独立的全局作用域\",{\"1\":{\"155\":1}}],[\"具有与目标接口不兼容的接口\",{\"1\":{\"53\":1}}],[\"具体某个文件路径+全名\",{\"1\":{\"174\":1}}],[\"具体同事\",{\"1\":{\"105\":1,\"107\":2}}],[\"具体中介者\",{\"1\":{\"105\":1,\"107\":1}}],[\"具体元素\",{\"1\":{\"102\":1,\"104\":2}}],[\"具体访问者\",{\"1\":{\"102\":1,\"104\":1}}],[\"具体状态\",{\"1\":{\"99\":1,\"101\":2}}],[\"具体命令\",{\"1\":{\"93\":1,\"95\":1}}],[\"具体处理者\",{\"1\":{\"90\":1,\"92\":1}}],[\"具体聚合\",{\"1\":{\"87\":1,\"89\":1}}],[\"具体迭代器\",{\"1\":{\"87\":1,\"89\":1}}],[\"具体观察者\",{\"1\":{\"81\":1,\"83\":1}}],[\"具体主题\",{\"1\":{\"81\":1,\"83\":1}}],[\"具体类\",{\"1\":{\"78\":1,\"80\":1}}],[\"具体策略\",{\"1\":{\"75\":1,\"77\":1}}],[\"具体的共享对象\",{\"1\":{\"71\":1}}],[\"具体的实现类\",{\"1\":{\"68\":1}}],[\"具体享元\",{\"1\":{\"71\":1,\"73\":1}}],[\"具体实现类\",{\"1\":{\"62\":1,\"64\":1}}],[\"具体装饰器\",{\"1\":{\"56\":1,\"58\":1}}],[\"具体组件\",{\"1\":{\"56\":1,\"58\":1}}],[\"具体原型\",{\"1\":{\"49\":1,\"51\":1}}],[\"具体建造者\",{\"1\":{\"46\":1,\"48\":1}}],[\"具体工厂\",{\"1\":{\"45\":1}}],[\"具体产品\",{\"1\":{\"45\":1}}],[\"需要运算才知道结果\",{\"1\":{\"222\":1}}],[\"需要关闭某些变量的类型检查\",{\"1\":{\"203\":1}}],[\"需要用到很多外部模块\",{\"1\":{\"193\":1}}],[\"需要注意的是\",{\"1\":{\"146\":1}}],[\"需要观察什么变动\",{\"1\":{\"132\":1}}],[\"需要适配的类\",{\"1\":{\"53\":1}}],[\"需要构建的复杂对象\",{\"1\":{\"46\":1}}],[\"负责保存和恢复备忘录\",{\"1\":{\"96\":1}}],[\"负责创建备忘录和恢复状态的对象\",{\"1\":{\"96\":1}}],[\"负责管理发布者和订阅者之间的关系\",{\"1\":{\"84\":1}}],[\"负责接收消息的对象\",{\"1\":{\"84\":1}}],[\"负责发送消息的对象\",{\"1\":{\"84\":1}}],[\"负责调用策略的方法\",{\"1\":{\"75\":1}}],[\"负责将适配者的接口转换成目标接口\",{\"1\":{\"53\":1}}],[\"负责使用建造者接口来构建产品\",{\"1\":{\"46\":1}}],[\"灵活性\",{\"1\":{\"50\":1,\"57\":1,\"63\":1,\"66\":1,\"76\":1,\"85\":1,\"91\":1,\"97\":1,\"103\":1,\"109\":1}}],[\"客户端与子系统的依赖关系降低\",{\"1\":{\"69\":1}}],[\"客户端可以统一处理单个对象和组合对象\",{\"1\":{\"66\":1}}],[\"客户端所期待的接口\",{\"1\":{\"53\":1}}],[\"客户端代码\",{\"1\":{\"51\":1,\"55\":1}}],[\"客户端代码与具体产品类解耦\",{\"1\":{\"44\":1}}],[\"客户端\",{\"1\":{\"49\":1,\"53\":1,\"90\":1,\"93\":1}}],[\"返回剩下的属性\",{\"1\":{\"242\":1}}],[\"返回值取决于泛型类型\",{\"1\":{\"251\":1}}],[\"返回值是该构造函数的实例类型\",{\"1\":{\"240\":1}}],[\"返回值的类型就可以写成never\",{\"1\":{\"205\":1}}],[\"返回一个字符串\",{\"1\":{\"222\":1}}],[\"返回的是一个字符串\",{\"1\":{\"192\":1}}],[\"返回所有观察目标的\",{\"1\":{\"136\":1}}],[\"返回具体的迭代器实例\",{\"1\":{\"87\":1}}],[\"返回自身的副本\",{\"1\":{\"49\":1}}],[\"返回顶部按钮\",{\"1\":{\"3\":1,\"6\":1}}],[\"这一点在慢网速或者运行缓慢的设备上比较重要\",{\"1\":{\"319\":1}}],[\"这一点需要注意\",{\"1\":{\"244\":1}}],[\"这允许\",{\"1\":{\"312\":1}}],[\"这被称为\",{\"1\":{\"308\":1}}],[\"这使得组件的结构更加灵活\",{\"1\":{\"308\":1}}],[\"这使得\",{\"1\":{\"307\":1}}],[\"这使得用户可以在离线情况下使用网络应用\",{\"1\":{\"160\":1}}],[\"这四个工具类型都定义在\",{\"1\":{\"254\":1}}],[\"这里的thistype的作用是提示\",{\"1\":{\"253\":1}}],[\"这里有一个特殊情况\",{\"1\":{\"203\":1}}],[\"这是一个只读的值类型\",{\"1\":{\"233\":1}}],[\"这是为了保证这个属性是固定不变的\",{\"1\":{\"207\":1}}],[\"这导致如果函数调用时\",{\"1\":{\"233\":1}}],[\"这种用法的typeof返回的是\",{\"1\":{\"222\":1}}],[\"这种方式使得对象的创建更加灵活\",{\"1\":{\"49\":1}}],[\"这当然是不可能的\",{\"1\":{\"220\":1}}],[\"这并不是开发者想要的行为\",{\"1\":{\"217\":1}}],[\"这囊括了几乎所有的值\",{\"1\":{\"215\":1}}],[\"这两个函数不能当作构造函数使用\",{\"1\":{\"213\":1}}],[\"这行代码之所以可以运行\",{\"1\":{\"212\":1}}],[\"这可以保证不会跟其他属性名冲突\",{\"1\":{\"207\":1}}],[\"这也跟集合论有关\",{\"1\":{\"205\":1}}],[\"这也是它的值类型\",{\"1\":{\"207\":1}}],[\"这也是\",{\"1\":{\"192\":1}}],[\"这与any的行为一致\",{\"1\":{\"204\":1}}],[\"这时会依次展开为多个键\",{\"1\":{\"248\":1}}],[\"这时就可以通过parameters<t>和returntype<t>拿到这两个接口类型\",{\"1\":{\"244\":1}}],[\"这时static和readonly两个限定符缺一不可\",{\"1\":{\"207\":1}}],[\"这时\",{\"1\":{\"205\":1,\"219\":1,\"227\":1,\"233\":1}}],[\"这时并不会报错\",{\"1\":{\"203\":1}}],[\"这时即使打开了noimplicitany\",{\"1\":{\"203\":1}}],[\"这时上面的函数add\",{\"1\":{\"203\":1}}],[\"这时你为那些类型复杂的变量加上any\",{\"1\":{\"203\":1}}],[\"这显然是很糟糕的情况\",{\"1\":{\"203\":1}}],[\"这些缺点使得\",{\"1\":{\"193\":1}}],[\"这些页面必须是同源的\",{\"1\":{\"156\":1}}],[\"这增加了不少工作量\",{\"1\":{\"193\":1}}],[\"这就避免了污染问题\",{\"1\":{\"204\":1}}],[\"这就是不宜使用any类型的另一个主要原因\",{\"1\":{\"203\":1}}],[\"这就是\",{\"1\":{\"199\":1,\"204\":1}}],[\"这就是为什么大量\",{\"1\":{\"192\":1}}],[\"这就是es6\",{\"1\":{\"114\":1}}],[\"这就叫做代码的静态分析\",{\"1\":{\"192\":1}}],[\"这对于大型项目非常重要\",{\"1\":{\"192\":1}}],[\"这对于提前发现代码错误\",{\"1\":{\"191\":1}}],[\"这对于需要在多个页面之间共享数据或状态的应用场景非常有用\",{\"1\":{\"156\":1}}],[\"这样就会有更快\",{\"1\":{\"319\":1}}],[\"这样就从根本上防止属性名的冲突\",{\"1\":{\"114\":1}}],[\"这样便于维护和修改\",{\"1\":{\"302\":1}}],[\"这样设计的目的是\",{\"1\":{\"204\":1}}],[\"这样才能运行\",{\"1\":{\"193\":1}}],[\"这样有利于提早发现错误\",{\"1\":{\"190\":1}}],[\"这意味着\",{\"1\":{\"221\":1}}],[\"这意味着即使关闭了创建\",{\"1\":{\"156\":1}}],[\"这意味着边框盒减去内边距和边框的宽度就是内容盒\",{\"1\":{\"138\":1}}],[\"这意味着你可以在\",{\"1\":{\"29\":1}}],[\"这容易造成属性名的冲突\",{\"1\":{\"114\":1}}],[\"这个时候就需要配置对应的loader进行文件内容的解析\",{\"1\":{\"334\":1}}],[\"这个对象的this不包含属性y\",{\"1\":{\"253\":1}}],[\"这个对象有着原始对象属性值的一份精确拷贝\",{\"1\":{\"116\":1}}],[\"这个成员名是说明性的\",{\"1\":{\"230\":1}}],[\"这个例子里面的圆括号是必须的\",{\"1\":{\"226\":1}}],[\"这个属性还在不在\",{\"1\":{\"191\":1}}],[\"这个值具有该类型的所有特征\",{\"1\":{\"190\":1}}],[\"这个类型\",{\"1\":{\"190\":1}}],[\"这个是一个函数\",{\"1\":{\"124\":1}}],[\"这个变量的值就是undefined\",{\"1\":{\"114\":1}}],[\"这个模式通过创建一个装饰类来包裹原有的类\",{\"1\":{\"56\":1}}],[\"这有助于降低对象之间的耦合度\",{\"1\":{\"105\":1}}],[\"$el\",{\"1\":{\"186\":1}}],[\"$\",{\"1\":{\"48\":3,\"51\":2,\"61\":2,\"64\":2,\"70\":4,\"73\":2,\"77\":2,\"83\":1,\"86\":1,\"92\":1,\"98\":2,\"104\":2,\"107\":4,\"110\":1,\"199\":5,\"203\":1,\"221\":1}}],[\"$$\",{\"1\":{\"18\":2,\"58\":3}}],[\"`hello\",{\"1\":{\"221\":1}}],[\"`result\",{\"1\":{\"110\":1}}],[\"`received\",{\"1\":{\"86\":1}}],[\"`visited\",{\"1\":{\"104\":2}}],[\"`originator\",{\"1\":{\"98\":3}}],[\"`no\",{\"1\":{\"92\":1}}],[\"`paid\",{\"1\":{\"77\":2}}],[\"`prototype\",{\"1\":{\"51\":1}}],[\"`tree\",{\"1\":{\"73\":1}}],[\"`memory\",{\"1\":{\"70\":1}}],[\"`data\",{\"1\":{\"70\":1}}],[\"`drawing\",{\"1\":{\"64\":2}}],[\"`displaying\",{\"1\":{\"61\":1}}],[\"`loading\",{\"1\":{\"61\":1}}],[\"`$\",{\"1\":{\"58\":3,\"83\":1,\"141\":5}}],[\"`contentboxsize`\",{\"1\":{\"141\":1}}],[\"`colleague\",{\"1\":{\"107\":4}}],[\"`cloned\",{\"1\":{\"51\":1}}],[\"`car\",{\"1\":{\"48\":1}}],[\"`\",{\"1\":{\"48\":1,\"51\":2,\"58\":3,\"61\":2,\"64\":2,\"70\":2,\"73\":1,\"77\":2,\"83\":1,\"86\":1,\"92\":1,\"98\":2,\"104\":2,\"107\":4,\"110\":1,\"221\":1}}],[\"`1`\",{\"1\":{\"36\":1}}],[\"404\",{\"1\":{\"341\":1}}],[\"400\",{\"1\":{\"238\":2,\"239\":1}}],[\"42\",{\"1\":{\"204\":1}}],[\"4\",{\"1\":{\"48\":1,\"118\":1,\"121\":1,\"218\":2,\"295\":1}}],[\"分发文件到output目录并返回相对路径\",{\"1\":{\"337\":1}}],[\"分别返回any和never\",{\"1\":{\"240\":1}}],[\"分别返回unknown\",{\"1\":{\"237\":1}}],[\"分支更名\",{\"1\":{\"175\":1}}],[\"分支操作\",{\"0\":{\"175\":1}}],[\"分离关注点\",{\"1\":{\"88\":1}}],[\"分离复杂对象的构建和表示\",{\"1\":{\"47\":1}}],[\"分类为\",{\"1\":{\"27\":1}}],[\"指代任意字符\",{\"1\":{\"301\":1}}],[\"指代单个字符\",{\"1\":{\"301\":1}}],[\"指定任意目录层级\",{\"1\":{\"301\":1}}],[\"指定要排除在编译之外的文件或目录\",{\"1\":{\"300\":1}}],[\"指定要包含在编译中的文件或目录\",{\"1\":{\"300\":1}}],[\"指定\",{\"1\":{\"269\":1}}],[\"指定的键名keys必须是对象键名type里面已经存在的键名\",{\"1\":{\"246\":1}}],[\"指定删除的键名keys可以是对象类型type中不存在的属性\",{\"1\":{\"242\":1}}],[\"指的多个类型组成的一个新类型\",{\"1\":{\"220\":1}}],[\"指的是多个类型组成的一个新类型\",{\"1\":{\"219\":1}}],[\"指的是这些值在需要时\",{\"1\":{\"212\":1}}],[\"指的是一组具有相同特征的值\",{\"1\":{\"190\":1}}],[\"指出没有定义过这个属性\",{\"1\":{\"192\":1}}],[\"指出这个位置只能传入数值\",{\"1\":{\"190\":1}}],[\"指挥者\",{\"1\":{\"46\":1,\"48\":1}}],[\"指南\",{\"2\":{\"7\":1}}],[\"以上8种类型可以看作\",{\"1\":{\"211\":1}}],[\"以上述配置开始观察目标节点\",{\"1\":{\"132\":1}}],[\"以及类型运算的完整性\",{\"1\":{\"205\":1}}],[\"以及支持可撤销的操作\",{\"1\":{\"93\":1}}],[\"以至于后面就不再对函数add\",{\"1\":{\"203\":1}}],[\"以匹配内部要求\",{\"1\":{\"135\":1}}],[\"以构建和装配产品的各个部分\",{\"1\":{\"46\":1}}],[\"以便后续恢复\",{\"1\":{\"98\":1}}],[\"以便在主题状态变化时被调用\",{\"1\":{\"81\":1}}],[\"以便\",{\"1\":{\"9\":1}}],[\"产品\",{\"1\":{\"46\":1,\"48\":1}}],[\"使其变成必选属性\",{\"1\":{\"249\":1}}],[\"使其更适合多人合作的企业级项目\",{\"1\":{\"189\":1}}],[\"使\",{\"1\":{\"136\":3}}],[\"使文法和解释逻辑分开\",{\"1\":{\"109\":1}}],[\"使得\",{\"1\":{\"271\":1}}],[\"使得对象之间不直接通信\",{\"1\":{\"105\":1}}],[\"使得对象可以在不同状态下表现出不同的行为\",{\"1\":{\"99\":1}}],[\"使得请求的处理更加灵活\",{\"1\":{\"90\":1}}],[\"使得当一个对象\",{\"1\":{\"81\":1}}],[\"使得两者可以独立变化\",{\"1\":{\"62\":1}}],[\"使得不兼容的接口可以一起工作\",{\"1\":{\"54\":1}}],[\"使得原本由于接口不兼容而无法一起工作的类可以协同工作\",{\"1\":{\"53\":1}}],[\"使得构建过程更灵活\",{\"1\":{\"47\":1}}],[\"使同样的构建过程可以创建不同的表示\",{\"1\":{\"46\":1}}],[\"使用方式\",{\"0\":{\"335\":1}}],[\"使用方法\",{\"1\":{\"198\":1}}],[\"使用的是\",{\"1\":{\"307\":1}}],[\"使用了\",{\"1\":{\"307\":1}}],[\"使用import命令加载\",{\"1\":{\"282\":1}}],[\"使用这个类型工具时\",{\"1\":{\"253\":1}}],[\"使用这个值都会报错\",{\"1\":{\"190\":1}}],[\"使用扩展运算符传入函数参数\",{\"1\":{\"233\":1}}],[\"使用扩展运算符\",{\"1\":{\"230\":1}}],[\"使用t\",{\"1\":{\"229\":1}}],[\"使用另一个别名\",{\"1\":{\"221\":1}}],[\"使用符号\",{\"1\":{\"220\":1}}],[\"使用符号|表示\",{\"1\":{\"219\":1}}],[\"使用let和var命令声明变量\",{\"1\":{\"203\":1}}],[\"使用时\",{\"1\":{\"199\":1}}],[\"使用步骤\",{\"0\":{\"163\":1}}],[\"使用信用卡支付\",{\"1\":{\"77\":1}}],[\"使用光栅渲染器\",{\"1\":{\"64\":1}}],[\"使用向量渲染器\",{\"1\":{\"64\":1}}],[\"使用原型对象来创建新对象\",{\"1\":{\"49\":1}}],[\"使用场景为\",{\"1\":{\"114\":1}}],[\"使用场景\",{\"0\":{\"45\":1,\"48\":1,\"51\":1,\"55\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"70\":1,\"73\":1,\"77\":1,\"80\":1,\"83\":1,\"86\":1,\"89\":1,\"92\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1,\"154\":1,\"159\":1}}],[\"使用\",{\"0\":{\"36\":1},\"1\":{\"48\":1,\"51\":1,\"55\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"70\":1,\"73\":1,\"77\":2,\"80\":1,\"83\":1,\"86\":1,\"89\":1,\"92\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1,\"148\":1,\"149\":1,\"262\":1}}],[\"使用指南\",{\"1\":{\"27\":2},\"2\":{\"2\":1,\"4\":1,\"23\":1,\"30\":1,\"31\":1}}],[\"它是一个数组\",{\"1\":{\"304\":1}}],[\"它也支持使用与include属性相同的通配符\",{\"1\":{\"300\":1}}],[\"它一般以下三个值\",{\"1\":{\"289\":1}}],[\"它要求sourcemap或inlinesourcemap至少打开一个\",{\"1\":{\"287\":1}}],[\"它等同于在\",{\"1\":{\"270\":1}}],[\"它与partial<type>的作用正好相反\",{\"1\":{\"249\":1}}],[\"它与exclude<t\",{\"1\":{\"239\":1}}],[\"它与any含义相同\",{\"1\":{\"204\":1}}],[\"它跟其他类型组成联合类型时\",{\"1\":{\"238\":1}}],[\"它可以将一个组件内部的一部分模板\",{\"1\":{\"310\":1}}],[\"它可以是本地文件\",{\"1\":{\"302\":1}}],[\"它可以取以下四种值\",{\"1\":{\"295\":1}}],[\"它可以返回一些内置构造方法的参数类型\",{\"1\":{\"237\":1}}],[\"它可以赋值给其他任何类型的变量\",{\"1\":{\"203\":1}}],[\"它表示成员类型可以自由设置的数组\",{\"1\":{\"230\":1}}],[\"它表示单个的\",{\"1\":{\"207\":1}}],[\"它们的实现都是在底层调用\",{\"1\":{\"254\":1}}],[\"它们的值都是不一样的\",{\"1\":{\"207\":1}}],[\"它们没有使用场景\",{\"1\":{\"213\":1}}],[\"它们都是字符串\",{\"1\":{\"213\":1}}],[\"它们属于同一种类型\",{\"1\":{\"190\":1}}],[\"它类似字符串\",{\"1\":{\"206\":1}}],[\"它不能直接使用\",{\"1\":{\"204\":1}}],[\"它会提供一个\",{\"1\":{\"199\":1}}],[\"它的默认值与module属性有关\",{\"1\":{\"295\":1}}],[\"它的默认值与target属性有关\",{\"1\":{\"294\":1}}],[\"它的默认值是commonjs\",{\"1\":{\"294\":1}}],[\"它的值有三种可能\",{\"1\":{\"267\":1,\"268\":1}}],[\"它的值是一个布尔值\",{\"1\":{\"265\":1}}],[\"它的命令行参数\",{\"1\":{\"261\":1}}],[\"它的后面只能是一个数组或元组\",{\"1\":{\"230\":1}}],[\"它的操作数依然是一个值\",{\"1\":{\"222\":1}}],[\"它的目的并不是创造一种全新语言\",{\"1\":{\"189\":1}}],[\"它的最常见用途就是拦截和处理网络请求\",{\"1\":{\"160\":1}}],[\"它还可以在本地缓存资源文件\",{\"1\":{\"160\":1}}],[\"它提供了一个语言的文法表示\",{\"1\":{\"108\":1}}],[\"它提供一种方法来顺序访问一个集合对象中的元素\",{\"1\":{\"87\":1}}],[\"它提供一个接口\",{\"1\":{\"43\":1}}],[\"它将请求封装为对象\",{\"1\":{\"93\":1}}],[\"它将对象的构建与表示分离\",{\"1\":{\"46\":1}}],[\"它通过定义一个中介对象来封装一系列对象之间的交互\",{\"1\":{\"105\":1}}],[\"它通过将请求沿着处理链传递\",{\"1\":{\"90\":1}}],[\"它通过共享对象来有效地支持大量细粒度的对象\",{\"1\":{\"71\":1}}],[\"它定义了一种一对多的依赖关系\",{\"1\":{\"81\":1}}],[\"它定义了一个算法的骨架\",{\"1\":{\"78\":1}}],[\"它定义了一系列算法\",{\"1\":{\"75\":1}}],[\"它为复杂子系统提供一个简单的接口\",{\"1\":{\"68\":1}}],[\"它为其他对象提供一种代理以控制对这个对象的访问\",{\"1\":{\"59\":1}}],[\"它旨在将抽象与实现分离\",{\"1\":{\"62\":1}}],[\"它允许在多个浏览上下文\",{\"1\":{\"155\":1}}],[\"它允许在不改变对象结构的前提下\",{\"1\":{\"102\":1}}],[\"它允许在不改变对象自身的情况下\",{\"1\":{\"56\":1}}],[\"它允许在不暴露对象实现细节的情况下\",{\"1\":{\"96\":1}}],[\"它允许一个对象在其内部状态改变时改变其行为\",{\"1\":{\"99\":1}}],[\"它允许多个发布者发送消息\",{\"1\":{\"84\":1}}],[\"它允许将对象组合成树形结构以表示部分与整体的层次关系\",{\"1\":{\"65\":1}}],[\"它允许使用多个简单的对象一步步构建一个复杂的对象\",{\"1\":{\"46\":1}}],[\"gift\",{\"1\":{\"244\":2}}],[\"git\",{\"0\":{\"169\":1,\"171\":1,\"343\":1},\"1\":{\"172\":2,\"173\":2,\"174\":11,\"175\":14,\"176\":7,\"177\":7,\"178\":6},\"2\":{\"179\":1}}],[\"gender\",{\"1\":{\"219\":1}}],[\"getx\",{\"1\":{\"253\":3}}],[\"getgift>\",{\"1\":{\"244\":2}}],[\"getgift\",{\"1\":{\"244\":1}}],[\"getsum\",{\"1\":{\"228\":2}}],[\"getstate\",{\"1\":{\"98\":2}}],[\"getproductdata\",{\"1\":{\"162\":1}}],[\"getelementbyid\",{\"1\":{\"124\":1,\"126\":1,\"132\":1}}],[\"get\",{\"1\":{\"110\":2}}],[\"getmemento\",{\"1\":{\"98\":2}}],[\"gettreetype\",{\"1\":{\"73\":4}}],[\"getname\",{\"1\":{\"51\":3}}],[\"getinstance\",{\"1\":{\"41\":1}}],[\"getitem\",{\"1\":{\"36\":1,\"89\":2}}],[\"g\",{\"1\":{\"199\":1}}],[\"global\",{\"0\":{\"180\":1},\"1\":{\"172\":2,\"181\":1,\"186\":3}}],[\"greeting\",{\"1\":{\"221\":1}}],[\"green\",{\"1\":{\"73\":2,\"230\":1}}],[\"graphic\",{\"1\":{\"67\":12}}],[\"guifactory\",{\"1\":{\"45\":3}}],[\"抽象表达式\",{\"1\":{\"108\":1,\"110\":1}}],[\"抽象处理者\",{\"1\":{\"90\":1,\"92\":1}}],[\"抽象部分和实现部分可以独立变化\",{\"1\":{\"63\":1}}],[\"抽象类\",{\"1\":{\"62\":1,\"64\":1,\"78\":1,\"80\":1}}],[\"抽象工厂\",{\"1\":{\"45\":1}}],[\"抽象工厂模式是一种创建型设计模式\",{\"1\":{\"43\":1}}],[\"抽象工厂模式\",{\"0\":{\"43\":1}}],[\"抽象产品\",{\"1\":{\"45\":1}}],[\"而\",{\"1\":{\"307\":1,\"308\":1}}],[\"而this\",{\"1\":{\"253\":1}}],[\"而null和undefined不属于object\",{\"1\":{\"241\":1}}],[\"而有所不同\",{\"1\":{\"227\":1}}],[\"而date\",{\"1\":{\"222\":1}}],[\"而且都是字符串\",{\"1\":{\"222\":1}}],[\"而且\",{\"1\":{\"207\":1}}],[\"而且没有使用限制\",{\"1\":{\"191\":1}}],[\"而是通过外部引入辅助函数来解决\",{\"1\":{\"299\":1}}],[\"而是通过中介者进行交互\",{\"1\":{\"105\":1}}],[\"而是该值的\",{\"1\":{\"222\":1}}],[\"而是增强\",{\"1\":{\"189\":1}}],[\"而无需修改现有代码\",{\"1\":{\"94\":1,\"100\":1}}],[\"而无需指定它们具体的类\",{\"1\":{\"43\":1}}],[\"而多个订阅者可以接收这些消息\",{\"1\":{\"84\":1}}],[\"而不需要在后端模版系统和前端框架之间来回切换\",{\"1\":{\"320\":1}}],[\"而不需要像\",{\"1\":{\"307\":1}}],[\"而不需要修改这些对象的类\",{\"1\":{\"102\":1}}],[\"而不需要修改类的结构\",{\"1\":{\"57\":1}}],[\"而不是默认的生成位置\",{\"1\":{\"293\":1}}],[\"而不是import\",{\"1\":{\"266\":1}}],[\"而不是通过实例化类\",{\"1\":{\"49\":1}}],[\"而不暴露该对象的内部表示\",{\"1\":{\"87\":1}}],[\"而系统只消费其中某一族的产品\",{\"1\":{\"45\":1}}],[\"组成一个元组返回\",{\"1\":{\"244\":1}}],[\"组成一个元组类型返回\",{\"1\":{\"237\":1}}],[\"组成一个新的对象类型\",{\"1\":{\"246\":1}}],[\"组成一个新的对象类型返回\",{\"1\":{\"242\":1}}],[\"组成一个新的类型返回\",{\"1\":{\"238\":1}}],[\"组成一个新类型返回\",{\"1\":{\"239\":1,\"241\":1}}],[\"组织结构等\",{\"1\":{\"67\":1}}],[\"组合类\",{\"1\":{\"67\":1}}],[\"组合\",{\"1\":{\"65\":1}}],[\"组合模式使得客户端对单个对象和组合对象的使用具有一致性\",{\"1\":{\"65\":1}}],[\"组合模式是一种结构型设计模式\",{\"1\":{\"65\":1}}],[\"组合模式\",{\"0\":{\"65\":1}}],[\"组合和表示时\",{\"1\":{\"45\":1}}],[\"组件接口\",{\"1\":{\"56\":1,\"58\":1,\"65\":1,\"67\":1}}],[\"组件\",{\"0\":{\"22\":1,\"29\":1},\"1\":{\"29\":1,\"309\":1}}],[\"一些外部库可能需要特殊处理凯能在服务端渲染的应用中运行\",{\"1\":{\"323\":1}}],[\"一起拷贝到输出目录\",{\"1\":{\"264\":1}}],[\"一种写法是使用as\",{\"1\":{\"233\":1}}],[\"一种用在值相关的\",{\"1\":{\"222\":1}}],[\"一章\",{\"1\":{\"205\":1}}],[\"一定要显式声明类型\",{\"1\":{\"203\":1}}],[\"一定时间内只能触发一次\",{\"1\":{\"126\":1}}],[\"一定时间内没有再次触发事件\",{\"1\":{\"124\":1}}],[\"一律为在标识符后面添加\",{\"1\":{\"196\":1}}],[\"一旦确定某个值的类型\",{\"1\":{\"190\":1}}],[\"一切回到合并前的状态\",{\"1\":{\"175\":1}}],[\"一般来说\",{\"1\":{\"192\":1,\"204\":1}}],[\"一般都会利用类型信息\",{\"1\":{\"192\":1}}],[\"一般在git仓库目录中\",{\"1\":{\"170\":1}}],[\"一般用于某一个元素出现在视口中\",{\"1\":{\"133\":1}}],[\"一般用于全局状态的共享和缓存\",{\"1\":{\"41\":1}}],[\"一个项目到本地\",{\"1\":{\"170\":1}}],[\"一个包含阈值的列表\",{\"1\":{\"135\":1}}],[\"一个系统有多个产品族\",{\"1\":{\"45\":1}}],[\"一致性\",{\"1\":{\"44\":1}}],[\"优点\",{\"0\":{\"44\":1,\"47\":1,\"50\":1,\"54\":1,\"57\":1,\"60\":1,\"63\":1,\"66\":1,\"69\":1,\"72\":1,\"76\":1,\"79\":1,\"82\":1,\"85\":1,\"88\":1,\"91\":1,\"94\":1,\"97\":1,\"100\":1,\"103\":1,\"106\":1,\"109\":1,\"318\":1}}],[\"创建worker\",{\"0\":{\"146\":1,\"158\":1}}],[\"创建一个观察器实例并传入回调函数\",{\"1\":{\"132\":1}}],[\"创建具体命令对象并指定接收者\",{\"1\":{\"93\":1}}],[\"创建不同的对象\",{\"1\":{\"42\":1}}],[\"创建型\",{\"0\":{\"40\":1}}],[\"设计了symbol的一个子类型unique\",{\"1\":{\"207\":1}}],[\"设计模式\",{\"2\":{\"111\":1}}],[\"设计模式及场景\",{\"0\":{\"39\":1}}],[\"设置中介者\",{\"1\":{\"107\":1}}],[\"设置某个数据仓库\",{\"1\":{\"36\":1}}],[\"<div\",{\"1\":{\"312\":1}}],[\"<async\",{\"1\":{\"309\":1}}],[\"<suspense>\",{\"1\":{\"309\":1}}],[\"<reference\",{\"1\":{\"290\":1}}],[\"<remote>\",{\"1\":{\"176\":5}}],[\"<teleport\",{\"1\":{\"310\":1,\"311\":1,\"312\":1}}],[\"<template\",{\"1\":{\"309\":2}}],[\"<t\",{\"1\":{\"251\":1}}],[\"<储藏的名称>\",{\"1\":{\"178\":2}}],[\"<commit>\",{\"1\":{\"177\":1}}],[\"<file>\",{\"1\":{\"177\":3}}],[\"<branch>\",{\"1\":{\"176\":2}}],[\"<远程库>\",{\"1\":{\"175\":1}}],[\"<新分支名>\",{\"1\":{\"175\":1}}],[\"<新分支>\",{\"1\":{\"175\":1}}],[\"<新的分支>\",{\"1\":{\"175\":3}}],[\"<原分支>\",{\"1\":{\"175\":1}}],[\"<提交的id>\",{\"1\":{\"175\":1}}],[\"<分支名>\",{\"1\":{\"175\":5}}],[\"<=\",{\"1\":{\"137\":1}}],[\"<\",{\"1\":{\"37\":1,\"89\":1,\"221\":1,\"309\":3,\"311\":1,\"312\":2}}],[\"drop\",{\"1\":{\"178\":1}}],[\"drawing\",{\"1\":{\"67\":3}}],[\"draw\",{\"1\":{\"64\":4,\"67\":6}}],[\"d\",{\"0\":{\"180\":1},\"1\":{\"175\":1,\"186\":2,\"199\":1,\"239\":1,\"254\":1,\"272\":1,\"273\":1,\"274\":1,\"280\":1,\"301\":1}}],[\"db\",{\"1\":{\"162\":2}}],[\"docs\",{\"1\":{\"174\":1}}],[\"document\",{\"1\":{\"124\":1,\"126\":1,\"132\":1,\"137\":1,\"141\":5}}],[\"dom\",{\"1\":{\"131\":1,\"290\":1,\"310\":1}}],[\"dark\",{\"1\":{\"73\":1,\"186\":1}}],[\"datareceived\",{\"1\":{\"86\":4}}],[\"dataprocessor\",{\"1\":{\"80\":3}}],[\"data\",{\"1\":{\"70\":3,\"80\":5,\"83\":3,\"86\":5,\"110\":3,\"147\":1,\"148\":1,\"149\":1,\"153\":2,\"162\":1}}],[\"database\",{\"1\":{\"36\":1}}],[\"dataview\",{\"1\":{\"35\":1}}],[\"date\",{\"1\":{\"35\":1,\"37\":1,\"115\":1,\"121\":2,\"222\":1}}],[\"diagnostics\",{\"0\":{\"275\":1}}],[\"directive\",{\"0\":{\"327\":1},\"1\":{\"328\":1,\"329\":1,\"330\":1,\"331\":1}}],[\"director\",{\"1\":{\"46\":1,\"48\":2}}],[\"dir\",{\"1\":{\"261\":1}}],[\"diff\",{\"1\":{\"174\":2}}],[\"div>\",{\"1\":{\"312\":1}}],[\"div\",{\"1\":{\"141\":1,\"289\":2,\"312\":2}}],[\"divelem\",{\"1\":{\"141\":6}}],[\"disabled=\",{\"1\":{\"311\":1}}],[\"disablesizelimit\",{\"0\":{\"276\":1}}],[\"dist\",{\"1\":{\"300\":1}}],[\"dist等\",{\"1\":{\"300\":1}}],[\"disconnect\",{\"1\":{\"131\":1,\"132\":1,\"136\":1,\"140\":1}}],[\"display\",{\"1\":{\"61\":6,\"73\":5}}],[\"defer\",{\"1\":{\"312\":2}}],[\"defineasynccomponent\",{\"1\":{\"309\":3}}],[\"defineproperty\",{\"1\":{\"307\":1}}],[\"default>\",{\"1\":{\"309\":1}}],[\"default\",{\"1\":{\"42\":1}}],[\"debug\",{\"1\":{\"293\":1}}],[\"debouncedhandler\",{\"1\":{\"331\":3}}],[\"debouncefunc\",{\"1\":{\"124\":2}}],[\"debounce\",{\"1\":{\"37\":1,\"124\":2,\"331\":1}}],[\"deeppartial<t\",{\"1\":{\"186\":1}}],[\"deeppartial<t>\",{\"1\":{\"186\":1}}],[\"deepclone\",{\"1\":{\"121\":3}}],[\"declarationmap设置生成\",{\"1\":{\"274\":1}}],[\"declarationmap\",{\"0\":{\"274\":1},\"1\":{\"274\":1}}],[\"declarationdir设置生成的\",{\"1\":{\"273\":1}}],[\"declarationdir\",{\"0\":{\"273\":1},\"1\":{\"273\":1}}],[\"declaration设置编译时是否为每个脚本生成类型声明文件\",{\"1\":{\"272\":1}}],[\"declaration\",{\"0\":{\"272\":1},\"1\":{\"273\":1,\"274\":1}}],[\"declare\",{\"1\":{\"181\":1,\"182\":1,\"185\":1,\"186\":1}}],[\"decorator\",{\"1\":{\"56\":1}}],[\"delete\",{\"1\":{\"175\":1,\"191\":2,\"307\":1}}],[\"delay\",{\"1\":{\"37\":5,\"124\":2,\"309\":1,\"331\":2}}],[\"detach\",{\"1\":{\"83\":2}}],[\"description\",{\"1\":{\"58\":10,\"328\":1}}],[\"手写防抖和节流\",{\"0\":{\"37\":1}}],[\"npx会在线调用\",{\"1\":{\"199\":1}}],[\"npx\",{\"1\":{\"199\":2}}],[\"npm\",{\"1\":{\"199\":2,\"262\":1,\"299\":1}}],[\"n\",{\"1\":{\"190\":2,\"204\":2,\"250\":1}}],[\"native\",{\"1\":{\"289\":1,\"296\":2}}],[\"navigator\",{\"1\":{\"161\":2,\"164\":1}}],[\"namednums\",{\"1\":{\"230\":3}}],[\"names\",{\"1\":{\"226\":4}}],[\"namespace\",{\"1\":{\"185\":1}}],[\"name属于基本属性\",{\"1\":{\"118\":1}}],[\"namehere\",{\"1\":{\"36\":1}}],[\"name\",{\"1\":{\"36\":2,\"51\":8,\"83\":5,\"118\":2,\"121\":2,\"172\":2,\"173\":1,\"219\":3,\"226\":2,\"244\":2,\"247\":3,\"253\":1}}],[\"never类型是任何其他类型所共有的\",{\"1\":{\"205\":1}}],[\"never类型\",{\"1\":{\"205\":1}}],[\"never类型的一个重要特点是\",{\"1\":{\"205\":1}}],[\"never类型的使用场景\",{\"1\":{\"205\":1}}],[\"never\",{\"0\":{\"205\":1},\"1\":{\"186\":2,\"205\":3,\"237\":2,\"238\":1,\"239\":2,\"240\":1,\"241\":1,\"244\":2,\"251\":1,\"252\":1}}],[\"nexthandler\",{\"1\":{\"92\":4}}],[\"next\",{\"1\":{\"89\":3}}],[\"newline设置换行符为crlf\",{\"1\":{\"297\":1}}],[\"newline\",{\"0\":{\"297\":1}}],[\"newschannel\",{\"1\":{\"83\":3}}],[\"news\",{\"1\":{\"83\":7}}],[\"newsagency\",{\"1\":{\"83\":6}}],[\"new\",{\"1\":{\"41\":1,\"42\":3,\"45\":4,\"48\":3,\"51\":2,\"55\":2,\"58\":3,\"61\":2,\"64\":4,\"67\":3,\"70\":4,\"73\":2,\"77\":3,\"80\":2,\"83\":3,\"86\":1,\"89\":2,\"92\":2,\"95\":4,\"98\":3,\"101\":4,\"104\":4,\"107\":3,\"110\":4,\"121\":3,\"130\":1,\"132\":1,\"134\":1,\"137\":2,\"139\":1,\"141\":1,\"146\":1,\"153\":1,\"158\":1,\"205\":1,\"213\":2,\"237\":2,\"240\":2,\"309\":1,\"328\":1,\"330\":1}}],[\"noemithelpers设置在编译结果文件不插入\",{\"1\":{\"299\":1}}],[\"noemithelpers\",{\"0\":{\"299\":1}}],[\"noemit设置是否产生编译结果\",{\"1\":{\"298\":1}}],[\"noemit\",{\"0\":{\"298\":1}}],[\"no\",{\"1\":{\"211\":3,\"213\":1,\"214\":1}}],[\"noimplicitany\",{\"1\":{\"203\":1}}],[\"nonnullable<null\",{\"1\":{\"241\":1}}],[\"nonnullable<number\",{\"1\":{\"241\":1}}],[\"nonnullable<boolean>\",{\"1\":{\"241\":1}}],[\"nonnullable<string\",{\"1\":{\"241\":3}}],[\"nonnullable<type>的实现如下\",{\"1\":{\"241\":1}}],[\"nonnullable<type>用来从联合类型type删除null类型和undefined类型\",{\"1\":{\"241\":1}}],[\"nonnullable<t>\",{\"1\":{\"186\":1,\"241\":1}}],[\"nonterminalexpression\",{\"1\":{\"108\":1}}],[\"node环境\",{\"1\":{\"322\":1}}],[\"node16或nodenext\",{\"1\":{\"295\":1}}],[\"node16\",{\"1\":{\"262\":1}}],[\"node命令\",{\"1\":{\"199\":1}}],[\"node\",{\"0\":{\"199\":1,\"324\":1},\"1\":{\"132\":1,\"199\":10,\"295\":3,\"300\":1}}],[\"notification\",{\"1\":{\"135\":1}}],[\"notify\",{\"1\":{\"83\":3}}],[\"not\",{\"1\":{\"86\":1,\"341\":1}}],[\"now\",{\"1\":{\"36\":1,\"37\":1}}],[\"num\",{\"1\":{\"196\":2,\"197\":2}}],[\"number|string\",{\"1\":{\"248\":1}}],[\"number>\",{\"1\":{\"244\":1,\"248\":2}}],[\"number是5的父类型\",{\"1\":{\"218\":1}}],[\"numbers\",{\"1\":{\"211\":3,\"213\":1,\"214\":1}}],[\"number\",{\"1\":{\"48\":4,\"58\":5,\"64\":5,\"70\":3,\"77\":4,\"89\":3,\"98\":1,\"114\":1,\"124\":1,\"126\":1,\"186\":2,\"190\":3,\"196\":1,\"197\":1,\"203\":1,\"204\":2,\"205\":3,\"211\":1,\"212\":2,\"213\":2,\"215\":1,\"216\":1,\"217\":2,\"218\":2,\"219\":1,\"220\":3,\"221\":1,\"222\":5,\"223\":1,\"226\":3,\"227\":2,\"228\":6,\"229\":1,\"230\":11,\"231\":2,\"232\":2,\"233\":6,\"236\":2,\"237\":2,\"238\":1,\"239\":1,\"241\":2,\"242\":8,\"243\":1,\"244\":6,\"245\":4,\"246\":8,\"247\":5,\"248\":5,\"249\":4,\"250\":2,\"251\":5,\"252\":2,\"253\":3}}],[\"null>\",{\"1\":{\"241\":1}}],[\"nullable<t>\",{\"1\":{\"186\":2}}],[\"null是一个对象\",{\"1\":{\"121\":1}}],[\"null\",{\"0\":{\"217\":1},\"1\":{\"61\":2,\"89\":3,\"92\":2,\"95\":2,\"107\":2,\"114\":1,\"121\":1,\"126\":1,\"186\":4,\"211\":1,\"215\":1,\"217\":4,\"219\":2,\"238\":2,\"239\":1,\"241\":1}}],[\"es2015\",{\"1\":{\"294\":1,\"295\":1}}],[\"es2021\",{\"1\":{\"290\":1}}],[\"es6\",{\"1\":{\"282\":2,\"307\":1}}],[\"esmoduleinterop修复了一些\",{\"1\":{\"282\":1}}],[\"esmoduleinterop\",{\"0\":{\"282\":1}}],[\"es5\",{\"1\":{\"114\":1}}],[\"ecmascript\",{\"1\":{\"265\":1,\"295\":1}}],[\"effect\",{\"1\":{\"186\":1}}],[\"emitdeclarationonly设置编译后只生成\",{\"1\":{\"280\":1}}],[\"emitdeclarationonly\",{\"0\":{\"280\":1}}],[\"emitdecoratormetadata\",{\"0\":{\"278\":1}}],[\"emitbom设置是否在编译结果的文件头添加字节顺序标志\",{\"1\":{\"277\":1}}],[\"emitbom\",{\"0\":{\"277\":1}}],[\"emittype\",{\"1\":{\"186\":1}}],[\"email\",{\"1\":{\"172\":2}}],[\"empty\",{\"1\":{\"36\":1}}],[\"e\",{\"1\":{\"124\":2,\"212\":1}}],[\"env\",{\"1\":{\"186\":1}}],[\"entry\",{\"1\":{\"141\":7,\"330\":2}}],[\"entries\",{\"1\":{\"137\":2,\"141\":2,\"330\":2}}],[\"entend\",{\"1\":{\"120\":1}}],[\"engine\",{\"1\":{\"48\":7}}],[\"el\",{\"1\":{\"328\":3,\"329\":2,\"330\":4,\"331\":6}}],[\"elref<t\",{\"1\":{\"186\":1}}],[\"elements\",{\"1\":{\"104\":3}}],[\"element1\",{\"1\":{\"104\":3}}],[\"element\",{\"1\":{\"102\":1,\"104\":12,\"138\":1,\"140\":3}}],[\"else\",{\"1\":{\"37\":1,\"41\":1,\"92\":3,\"107\":1,\"132\":1,\"141\":2,\"205\":2,\"223\":1,\"328\":1}}],[\"eventtype\",{\"1\":{\"331\":4}}],[\"eventtarget\",{\"1\":{\"186\":1}}],[\"event\",{\"1\":{\"86\":11,\"148\":2,\"153\":4,\"162\":4,\"186\":2}}],[\"eventbus\",{\"1\":{\"84\":1,\"86\":7}}],[\"exactoptionalpropertytypes设置可选属性不能赋值为undefined\",{\"1\":{\"283\":1}}],[\"exactoptionalpropertytypes\",{\"0\":{\"283\":1},\"1\":{\"283\":1}}],[\"experimentaldecorators\",{\"0\":{\"279\":1}}],[\"export\",{\"1\":{\"244\":1,\"335\":1}}],[\"expr2\",{\"1\":{\"110\":5}}],[\"expr1\",{\"1\":{\"110\":5}}],[\"expression\",{\"1\":{\"108\":1,\"110\":9}}],[\"extendeddiagnostics\",{\"0\":{\"281\":1}}],[\"extends属性用来指定所要继承的配置文件\",{\"1\":{\"302\":1}}],[\"extends\",{\"0\":{\"302\":1},\"1\":{\"58\":2,\"64\":1,\"80\":2,\"92\":2,\"107\":2,\"186\":6,\"237\":2,\"238\":1,\"239\":1,\"240\":2,\"242\":1,\"243\":2,\"244\":2,\"246\":1,\"248\":1,\"251\":4,\"252\":1}}],[\"extract<t\",{\"1\":{\"239\":1}}],[\"extract<200\",{\"1\":{\"239\":1}}],[\"extract<string\",{\"1\":{\"239\":2}}],[\"extract<\",{\"1\":{\"239\":4}}],[\"extract<uniontype\",{\"1\":{\"239\":2}}],[\"exit\",{\"1\":{\"199\":1}}],[\"exclude属性是一个数组\",{\"1\":{\"300\":1}}],[\"exclude\",{\"0\":{\"300\":1},\"1\":{\"300\":2}}],[\"excludedmembers>的实现如下\",{\"1\":{\"238\":1}}],[\"excludedmembers>用来从联合类型uniontype里面\",{\"1\":{\"238\":1}}],[\"exclude<t\",{\"1\":{\"238\":1}}],[\"exclude<number\",{\"1\":{\"238\":1}}],[\"exclude<200\",{\"1\":{\"238\":1}}],[\"exclude<string\",{\"1\":{\"238\":2}}],[\"exclude<\",{\"1\":{\"238\":3}}],[\"exclude<uniontype\",{\"1\":{\"238\":2}}],[\"exclude<keyof\",{\"1\":{\"186\":1,\"242\":1}}],[\"exclusive<t\",{\"1\":{\"186\":1}}],[\"executing\",{\"1\":{\"70\":1}}],[\"execute\",{\"1\":{\"70\":2,\"95\":4}}],[\"err\",{\"1\":{\"36\":8,\"164\":1}}],[\"errorcomponent\",{\"1\":{\"309\":2}}],[\"error\",{\"1\":{\"35\":2,\"42\":1,\"150\":4,\"153\":3,\"164\":1,\"205\":2,\"240\":1,\"253\":2,\"328\":1}}],[\"0px\",{\"1\":{\"135\":4}}],[\"0\",{\"1\":{\"36\":1,\"37\":1,\"48\":1,\"58\":1,\"70\":2,\"89\":1,\"118\":2,\"121\":1,\"135\":1,\"137\":3,\"141\":1,\"192\":1,\"204\":2,\"221\":1,\"222\":1,\"226\":1,\"228\":7,\"240\":2,\"244\":1,\"250\":1,\"328\":2}}],[\"如git\",{\"1\":{\"170\":1}}],[\"如多个窗口\",{\"1\":{\"155\":1}}],[\"如数据处理\",{\"1\":{\"144\":1}}],[\"如果文件较多\",{\"1\":{\"304\":1}}],[\"如果其中有一个文件不存在\",{\"1\":{\"304\":1}}],[\"如果打开了allowjs\",{\"1\":{\"301\":1}}],[\"如果module为node16或nodenext\",{\"1\":{\"295\":1}}],[\"如果module为amd\",{\"1\":{\"295\":1}}],[\"如果module属性为node16或nodenext\",{\"1\":{\"282\":1}}],[\"如果target是es3或es5\",{\"1\":{\"294\":1}}],[\"如果将上面的代码编译成\",{\"1\":{\"282\":1}}],[\"如果一个项目有多个配置\",{\"1\":{\"302\":1}}],[\"如果一个目录里面有tsconfig\",{\"1\":{\"261\":1}}],[\"如果一个变量可能有多种类型\",{\"1\":{\"205\":1}}],[\"如果类型不是函数\",{\"1\":{\"251\":1}}],[\"如果类型参数是any或never两个特殊值\",{\"1\":{\"240\":1}}],[\"如果类型参数不是构造方法\",{\"1\":{\"240\":1}}],[\"如果泛型不带有限制条件\",{\"1\":{\"251\":1}}],[\"如果参数type是联合类型\",{\"1\":{\"248\":1}}],[\"如果参数类型是泛型函数\",{\"1\":{\"251\":1}}],[\"如果参数类型type不是带有参数的函数形式\",{\"1\":{\"244\":1}}],[\"如果参数类型union不包含在联合类型uniontype之中\",{\"1\":{\"239\":1}}],[\"如果参数类型不是构造方法\",{\"1\":{\"237\":1}}],[\"如果函数没有this参数\",{\"1\":{\"252\":1}}],[\"如果函数没有\",{\"1\":{\"243\":1}}],[\"如果它的类型参数不是\",{\"1\":{\"236\":1}}],[\"如果初始值不是空数组\",{\"1\":{\"227\":1}}],[\"如果数组变量没有声明类型\",{\"1\":{\"227\":1}}],[\"如果数组成员的类型比较复杂\",{\"1\":{\"226\":1}}],[\"如果某个变量确实可能包含空值\",{\"1\":{\"219\":1}}],[\"如果代码里面没有注明类型\",{\"1\":{\"218\":1}}],[\"如果等于null就表示值为空\",{\"1\":{\"217\":1}}],[\"如果赋值为另一个\",{\"1\":{\"208\":2}}],[\"如果变量的初始值是空数组\",{\"1\":{\"227\":1}}],[\"如果变量声明时没有给出类型\",{\"1\":{\"208\":1}}],[\"如果变量foo更改为其他类型的值\",{\"1\":{\"197\":1}}],[\"如果要把某一个特定的\",{\"1\":{\"207\":1}}],[\"如果要写成与变量a同一个unique\",{\"1\":{\"207\":1}}],[\"如果无法推断出类型\",{\"1\":{\"203\":1}}],[\"如果只是想简单运行\",{\"1\":{\"199\":1}}],[\"如果执行\",{\"1\":{\"199\":1}}],[\"如果不指定文件后缀名\",{\"1\":{\"301\":1}}],[\"如果不生成\",{\"1\":{\"298\":1}}],[\"如果不确定元组成员的类型和数量\",{\"1\":{\"230\":1}}],[\"如果不赋值\",{\"1\":{\"203\":1}}],[\"如果不安装\",{\"1\":{\"199\":1}}],[\"如果不一致\",{\"1\":{\"196\":1}}],[\"如果没有可选成员和扩展运算符\",{\"1\":{\"232\":1}}],[\"如果没有\",{\"1\":{\"197\":1}}],[\"如果还有配套的单元测试\",{\"1\":{\"192\":1}}],[\"如果是的就返回never类型\",{\"1\":{\"238\":1}}],[\"如果是\",{\"1\":{\"192\":1}}],[\"如果两个值具有某种共同的特征\",{\"1\":{\"190\":1}}],[\"如果你使用的第三方库没有类型定义\",{\"1\":{\"182\":1}}],[\"如果你是一个新手\",{\"1\":{\"10\":1}}],[\"如果\",{\"1\":{\"137\":1}}],[\"如果构造器未传入值\",{\"1\":{\"135\":1}}],[\"如果构造函数未传入\",{\"1\":{\"135\":1}}],[\"如果在设定的事件内又出发了一次\",{\"1\":{\"124\":1}}],[\"如果属性是引用类型\",{\"1\":{\"116\":1}}],[\"如果属性是基本类型\",{\"1\":{\"116\":1}}],[\"如果有一种机制\",{\"1\":{\"114\":1}}],[\"如文件系统\",{\"1\":{\"67\":1}}],[\"如日志记录\",{\"1\":{\"60\":1}}],[\"如下输出\",{\"1\":{\"36\":1}}],[\"不像完全静态的spa那样可以直接部署在任意的静态文件服务器上\",{\"1\":{\"324\":1}}],[\"不像any那样自由\",{\"1\":{\"204\":1}}],[\"不支持文件匹配\",{\"1\":{\"304\":1}}],[\"不含路径分隔符\",{\"1\":{\"301\":1}}],[\"不生成\",{\"1\":{\"280\":1}}],[\"不允许修改\",{\"1\":{\"231\":1}}],[\"不允许随意增删\",{\"1\":{\"191\":1}}],[\"不使用大写类型object\",{\"1\":{\"216\":1}}],[\"不使用new去创建实例\",{\"1\":{\"42\":1}}],[\"不希望包含原始类型\",{\"1\":{\"216\":1}}],[\"不包括原始类型的值\",{\"1\":{\"216\":1}}],[\"不包含任何值\",{\"1\":{\"205\":1}}],[\"不可再分的值\",{\"1\":{\"212\":1}}],[\"不可能返回值的函数\",{\"1\":{\"205\":1}}],[\"不是元组\",{\"1\":{\"233\":1}}],[\"不是\",{\"1\":{\"211\":1}}],[\"不是固定不变的值\",{\"1\":{\"207\":1}}],[\"不过我们知道\",{\"1\":{\"207\":1}}],[\"不过使用时难免还是会有一些兼容性问题\",{\"1\":{\"193\":1}}],[\"不能当作函数调用\",{\"1\":{\"282\":1}}],[\"不能用在值运算\",{\"1\":{\"222\":1}}],[\"不能用let声明\",{\"1\":{\"207\":1}}],[\"不能作为构造函数使用\",{\"1\":{\"212\":1}}],[\"不能是\",{\"1\":{\"207\":1}}],[\"不能使用严格相等运算符进行比较\",{\"1\":{\"207\":1}}],[\"不能直接调用unknown类型变量的方法和属性\",{\"1\":{\"204\":1}}],[\"不能直接赋值给其他类型的变量\",{\"1\":{\"204\":1}}],[\"不能传入字符串\",{\"1\":{\"190\":1}}],[\"不对其进行类型检查\",{\"1\":{\"203\":1}}],[\"不报错上面示例中\",{\"1\":{\"203\":1}}],[\"不报错\",{\"1\":{\"203\":7,\"205\":3,\"282\":1}}],[\"不失为一个便捷的方法\",{\"1\":{\"199\":1}}],[\"不一定适合那些小型的\",{\"1\":{\"193\":1}}],[\"不应该将数值a与布尔值b相加\",{\"1\":{\"192\":1}}],[\"不小心把message拼错了\",{\"1\":{\"192\":1}}],[\"不必运行代码\",{\"1\":{\"192\":1}}],[\"不具有很强的约束性\",{\"1\":{\"191\":1}}],[\"不会检查类型对不对\",{\"1\":{\"190\":1}}],[\"不会删除储藏\",{\"1\":{\"178\":1}}],[\"不会触发\",{\"1\":{\"86\":1}}],[\"不合并\",{\"1\":{\"176\":1}}],[\"不用联系服务器\",{\"1\":{\"160\":1}}],[\"不同类型的值肯定是不相等的\",{\"1\":{\"207\":1}}],[\"不同\",{\"1\":{\"152\":1,\"155\":1}}],[\"不同于\",{\"1\":{\"36\":1}}],[\"不需要序列化\",{\"1\":{\"35\":1}}],[\"当遇到下面的语句\",{\"1\":{\"269\":1}}],[\"当监听对象的任何阈值被越过时\",{\"1\":{\"135\":1}}],[\"当观察到变动时执行的回调函数\",{\"1\":{\"132\":1}}],[\"当一个系统中对象之间存在复杂的交互关系时\",{\"1\":{\"107\":1}}],[\"当一个对象的行为依赖于其状态\",{\"1\":{\"101\":1}}],[\"当一个对象的状态改变需要通知其他对象时\",{\"1\":{\"83\":1}}],[\"当有多个对象可以处理请求\",{\"1\":{\"92\":1}}],[\"当有多个类的算法结构相同时\",{\"1\":{\"80\":1}}],[\"当有多个算法可以完成同一任务时\",{\"1\":{\"77\":1}}],[\"当对象的状态可以被分为内部状态和外部状态时\",{\"1\":{\"73\":1}}],[\"当对象的创建成本较高时\",{\"1\":{\"51\":1}}],[\"当应用程序需要大量的相似对象时\",{\"1\":{\"73\":1}}],[\"当系统有多个复杂的子系统时\",{\"1\":{\"70\":1}}],[\"当系统需要独立于产品的创建\",{\"1\":{\"45\":1}}],[\"当希望通过一个中介对象来简化对象间的通信时\",{\"1\":{\"107\":1}}],[\"当希望使用队列或日志来请求操作时\",{\"1\":{\"95\":1}}],[\"当希望使用的类的接口与现有代码不兼容时\",{\"1\":{\"55\":1}}],[\"当希望以不同的方式处理请求时\",{\"1\":{\"92\":1}}],[\"当希望提供多种遍历方式时\",{\"1\":{\"89\":1}}],[\"当希望在系统中实现松耦合的消息传递时\",{\"1\":{\"86\":1}}],[\"当希望在运行时动态选择算法时\",{\"1\":{\"77\":1}}],[\"当希望实现广播通信时\",{\"1\":{\"83\":1}}],[\"当希望为一个复杂的系统提供一个简单的接口时\",{\"1\":{\"70\":1}}],[\"当希望客户端可以统一处理单个对象和组合对象时\",{\"1\":{\"67\":1}}],[\"当希望避免在同一个类中出现多个变化时\",{\"1\":{\"64\":1}}],[\"当希望能够组合多个功能时\",{\"1\":{\"58\":1}}],[\"当需要设计一个简单的语言或表达式计算器时\",{\"1\":{\"110\":1}}],[\"当需要定义一种语言的文法\",{\"1\":{\"110\":1}}],[\"当需要对一组对象进行多种不同操作时\",{\"1\":{\"104\":1}}],[\"当需要对对象的操作进行额外的处理时\",{\"1\":{\"61\":1}}],[\"当需要对对象的访问进行控制时\",{\"1\":{\"61\":1}}],[\"当需要实现撤销和重做功能时\",{\"1\":{\"98\":1}}],[\"当需要实现事件驱动的架构时\",{\"1\":{\"86\":1}}],[\"当需要支持撤销和重做操作时\",{\"1\":{\"95\":1}}],[\"当需要将请求参数化时\",{\"1\":{\"95\":1}}],[\"当需要访问集合的元素但不想暴露集合的内部结构时\",{\"1\":{\"89\":1}}],[\"当需要控制算法的执行顺序时\",{\"1\":{\"80\":1}}],[\"当需要表示树形结构时\",{\"1\":{\"67\":1}}],[\"当需要在不改变对象结构的情况下\",{\"1\":{\"104\":1}}],[\"当需要在多个状态之间切换时\",{\"1\":{\"101\":1}}],[\"当需要在对象状态变化时保存状态\",{\"1\":{\"98\":1}}],[\"当需要在抽象和实现之间有多个变化时\",{\"1\":{\"64\":1}}],[\"当需要在运行时为对象添加功能时\",{\"1\":{\"58\":1}}],[\"当需要使用多个不同接口的类时\",{\"1\":{\"55\":1}}],[\"当需要通过复制现有对象来实现新对象时\",{\"1\":{\"51\":1}}],[\"当构建过程需要多步操作时\",{\"1\":{\"48\":1}}],[\"当构建一个复杂对象的算法应该独立于该对象的组成部分时\",{\"1\":{\"48\":1}}],[\"当数据库被全部删除后\",{\"1\":{\"36\":1}}],[\"当值被移除后\",{\"1\":{\"36\":1}}],[\"当出错时\",{\"1\":{\"36\":4}}],[\"当离线仓库中的值被载入时\",{\"1\":{\"36\":1}}],[\"ces\",{\"0\":{\"339\":1}}],[\"css\",{\"1\":{\"335\":1,\"336\":1,\"337\":1}}],[\"csss$\",{\"1\":{\"335\":1}}],[\"csvprocessor\",{\"1\":{\"80\":2}}],[\"csv\",{\"1\":{\"80\":3}}],[\"csvdataprocessor\",{\"1\":{\"80\":2}}],[\"c>\",{\"1\":{\"240\":1}}],[\"ctrl\",{\"1\":{\"199\":1}}],[\"cdn\",{\"1\":{\"186\":1}}],[\"cdots\",{\"1\":{\"18\":1}}],[\"custommethod\",{\"1\":{\"184\":1}}],[\"currenttime\",{\"1\":{\"37\":4}}],[\"c\",{\"1\":{\"92\":1,\"207\":2,\"230\":2,\"236\":1,\"238\":4,\"239\":3,\"240\":3,\"250\":1}}],[\"charat\",{\"1\":{\"212\":2}}],[\"changeevent\",{\"1\":{\"186\":1}}],[\"change\",{\"1\":{\"141\":1}}],[\"changed\",{\"1\":{\"141\":1}}],[\"channel2\",{\"1\":{\"83\":2}}],[\"channel\",{\"1\":{\"83\":2}}],[\"channel1\",{\"1\":{\"83\":2}}],[\"chore\",{\"1\":{\"174\":1}}],[\"checkpermission\",{\"1\":{\"328\":1}}],[\"check命令\",{\"1\":{\"270\":1}}],[\"checkjs设置对\",{\"1\":{\"270\":1}}],[\"checkjs\",{\"0\":{\"270\":1}}],[\"checked\",{\"1\":{\"141\":1}}],[\"checkbox\",{\"1\":{\"141\":4}}],[\"checkout\",{\"1\":{\"77\":3,\"175\":4,\"177\":3}}],[\"childlist\",{\"1\":{\"132\":2}}],[\"child\",{\"1\":{\"67\":2,\"132\":1}}],[\"children\",{\"1\":{\"67\":5,\"186\":1}}],[\"credit\",{\"1\":{\"77\":1}}],[\"creditcardpayment\",{\"1\":{\"77\":2}}],[\"createelement\",{\"1\":{\"289\":2}}],[\"createobjectstore\",{\"1\":{\"162\":1}}],[\"createiterator\",{\"1\":{\"89\":3}}],[\"createinstance\",{\"1\":{\"36\":2}}],[\"createtextbox\",{\"1\":{\"45\":3}}],[\"createbutton\",{\"1\":{\"45\":3}}],[\"createwidget\",{\"1\":{\"42\":2}}],[\"cpu\",{\"1\":{\"70\":11}}],[\"circle2\",{\"1\":{\"64\":2}}],[\"circle1\",{\"1\":{\"64\":2}}],[\"circle\",{\"1\":{\"64\":5,\"67\":5}}],[\"count\",{\"1\":{\"162\":1}}],[\"com\",{\"1\":{\"293\":1}}],[\"commonjs\",{\"1\":{\"282\":3,\"295\":1}}],[\"commit\",{\"1\":{\"174\":3,\"177\":2}}],[\"command\",{\"1\":{\"93\":1,\"95\":13}}],[\"compileroptions\",{\"0\":{\"263\":1},\"1\":{\"217\":1,\"264\":1,\"269\":1,\"273\":1,\"274\":1,\"289\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"296\":1}}],[\"compression\",{\"1\":{\"186\":1}}],[\"computer\",{\"1\":{\"70\":4}}],[\"compositionapi\",{\"1\":{\"313\":1}}],[\"composite打开某些设置\",{\"1\":{\"271\":1}}],[\"compositegraphic\",{\"1\":{\"67\":2}}],[\"composite\",{\"0\":{\"271\":1},\"1\":{\"65\":1,\"67\":5}}],[\"componentelref<t\",{\"1\":{\"186\":1}}],[\"componentelref<t>\",{\"1\":{\"186\":1}}],[\"componentref<t\",{\"1\":{\"186\":1}}],[\"component\",{\"1\":{\"56\":1,\"65\":1,\"309\":3}}],[\"colne\",{\"1\":{\"173\":1}}],[\"colleagueb\",{\"1\":{\"107\":10}}],[\"colleaguea\",{\"1\":{\"107\":10}}],[\"colleague\",{\"1\":{\"105\":1,\"107\":9}}],[\"collection\",{\"1\":{\"89\":6}}],[\"color\",{\"1\":{\"73\":4,\"221\":4,\"230\":2}}],[\"code\",{\"1\":{\"70\":1}}],[\"costs\",{\"1\":{\"58\":3}}],[\"cost\",{\"1\":{\"58\":10}}],[\"coffeedecorator\",{\"1\":{\"58\":3}}],[\"coffee\",{\"1\":{\"58\":26}}],[\"contentrect\",{\"1\":{\"141\":2}}],[\"content\",{\"1\":{\"141\":1}}],[\"contentboxsize\",{\"1\":{\"141\":7}}],[\"context\",{\"1\":{\"75\":1,\"99\":1,\"101\":14,\"108\":1,\"110\":15}}],[\"config\",{\"1\":{\"132\":2,\"172\":2}}],[\"concat\",{\"1\":{\"117\":1}}],[\"concretemediator\",{\"1\":{\"105\":1,\"107\":2}}],[\"concreteelementb\",{\"1\":{\"104\":5}}],[\"concreteelementa\",{\"1\":{\"104\":5}}],[\"concreteelement\",{\"1\":{\"102\":1}}],[\"concretevisitor\",{\"1\":{\"102\":1,\"104\":2}}],[\"concretehandlerb\",{\"1\":{\"92\":2}}],[\"concretehandlera\",{\"1\":{\"92\":2}}],[\"concretehandler\",{\"1\":{\"90\":1}}],[\"concreteaggregate<number>\",{\"1\":{\"89\":1}}],[\"concreteaggregate<t>\",{\"1\":{\"89\":3}}],[\"concreteaggregate\",{\"1\":{\"87\":1}}],[\"concreteiterator<t>\",{\"1\":{\"89\":2}}],[\"concreteiterator\",{\"1\":{\"87\":1}}],[\"concreteimplementor\",{\"1\":{\"62\":1}}],[\"concreteobserver\",{\"1\":{\"81\":1}}],[\"concretestateb\",{\"1\":{\"101\":2}}],[\"concretestatea\",{\"1\":{\"101\":3}}],[\"concretestate\",{\"1\":{\"99\":1}}],[\"concretestrategy\",{\"1\":{\"75\":1}}],[\"concretesubject\",{\"1\":{\"81\":1}}],[\"concretecolleagueb\",{\"1\":{\"107\":4}}],[\"concretecolleaguea\",{\"1\":{\"107\":4}}],[\"concretecolleague\",{\"1\":{\"105\":1}}],[\"concretecommand\",{\"1\":{\"93\":1}}],[\"concretecomponent\",{\"1\":{\"56\":1}}],[\"concreteclass\",{\"1\":{\"78\":1}}],[\"concretetreetype\",{\"1\":{\"73\":2}}],[\"concreteflyweight\",{\"1\":{\"71\":1}}],[\"concretedecorator\",{\"1\":{\"56\":1}}],[\"concreteprototype\",{\"1\":{\"49\":1,\"51\":3}}],[\"concretebuilder\",{\"1\":{\"46\":1}}],[\"const断言\",{\"1\":{\"233\":1}}],[\"const命令声明的变量\",{\"1\":{\"208\":2}}],[\"const命令声明的x是不能改变值的\",{\"1\":{\"203\":1}}],[\"const命令为变量赋值\",{\"1\":{\"207\":1}}],[\"const命令没有这个问题\",{\"1\":{\"203\":1}}],[\"constructcar\",{\"1\":{\"48\":2}}],[\"constructorparameters<\",{\"1\":{\"237\":1}}],[\"constructorparameters<type>的实现如下\",{\"1\":{\"237\":1}}],[\"constructorparameters<type>提取构造方法type的参数类型\",{\"1\":{\"237\":1}}],[\"constructorparameters<never>\",{\"1\":{\"237\":1}}],[\"constructorparameters<new\",{\"1\":{\"237\":2}}],[\"constructorparameters<any>\",{\"1\":{\"237\":1}}],[\"constructorparameters<function>\",{\"1\":{\"237\":1}}],[\"constructorparameters<functionconstructor>\",{\"1\":{\"237\":1}}],[\"constructorparameters<string>\",{\"1\":{\"237\":1}}],[\"constructorparameters<regexpconstructor>\",{\"1\":{\"237\":1}}],[\"constructorparameters<errorconstructor>\",{\"1\":{\"237\":1}}],[\"constructor\",{\"1\":{\"48\":2,\"51\":1,\"55\":1,\"58\":1,\"61\":2,\"64\":2,\"70\":1,\"73\":1,\"83\":1,\"89\":1,\"95\":2,\"98\":1,\"101\":1,\"107\":2,\"110\":2,\"121\":1}}],[\"const\",{\"0\":{\"228\":1},\"1\":{\"37\":1,\"42\":1,\"48\":3,\"51\":2,\"55\":2,\"61\":1,\"64\":4,\"67\":5,\"70\":1,\"73\":4,\"77\":1,\"80\":2,\"83\":5,\"86\":3,\"89\":2,\"92\":2,\"95\":4,\"98\":2,\"101\":1,\"104\":3,\"107\":3,\"110\":2,\"130\":1,\"132\":4,\"134\":1,\"137\":1,\"139\":1,\"141\":8,\"146\":1,\"153\":1,\"158\":1,\"181\":1,\"192\":3,\"199\":1,\"203\":1,\"207\":17,\"208\":3,\"213\":4,\"217\":1,\"218\":4,\"222\":1,\"227\":2,\"228\":6,\"230\":4,\"233\":4,\"247\":1,\"250\":1,\"309\":2,\"328\":4,\"329\":1,\"330\":2,\"331\":7}}],[\"console\",{\"1\":{\"36\":8,\"42\":2,\"48\":1,\"51\":2,\"55\":1,\"58\":3,\"61\":2,\"64\":2,\"67\":3,\"70\":4,\"73\":2,\"77\":2,\"80\":5,\"83\":1,\"86\":1,\"89\":1,\"92\":3,\"95\":2,\"98\":3,\"101\":2,\"104\":2,\"107\":4,\"110\":1,\"118\":2,\"121\":2,\"124\":1,\"126\":1,\"132\":2,\"137\":1,\"141\":1,\"148\":1,\"150\":1,\"153\":3,\"164\":2,\"192\":1}}],[\"capitalize<a>\",{\"1\":{\"257\":1}}],[\"capitalize<stringtype>将字符串的第一个字符转为大写\",{\"1\":{\"257\":1}}],[\"callback\",{\"1\":{\"86\":4,\"126\":2,\"130\":1,\"132\":2,\"134\":1,\"139\":1}}],[\"caretaker\",{\"1\":{\"96\":1,\"98\":6}}],[\"cart\",{\"1\":{\"77\":5}}],[\"card\",{\"1\":{\"77\":1}}],[\"cardirector\",{\"1\":{\"48\":2}}],[\"carbuilder\",{\"1\":{\"48\":4}}],[\"car\",{\"1\":{\"48\":13}}],[\"case\",{\"1\":{\"42\":2}}],[\"catch\",{\"1\":{\"36\":4,\"164\":1}}],[\"click\",{\"1\":{\"331\":2}}],[\"clientcode\",{\"1\":{\"51\":2,\"55\":2,\"58\":2,\"61\":2,\"64\":2,\"67\":2,\"70\":2,\"73\":2,\"77\":2,\"80\":2,\"83\":2,\"86\":2,\"89\":2,\"92\":2,\"95\":2,\"98\":2,\"101\":2,\"104\":2,\"107\":2,\"110\":2}}],[\"client\",{\"1\":{\"49\":1,\"53\":1,\"90\":1,\"93\":1}}],[\"cloneobj\",{\"1\":{\"121\":3}}],[\"clonedeep\",{\"1\":{\"120\":1}}],[\"clone\",{\"1\":{\"51\":5,\"117\":1,\"170\":1}}],[\"classic\",{\"1\":{\"295\":1}}],[\"class\",{\"1\":{\"41\":1,\"42\":3,\"45\":6,\"48\":3,\"51\":1,\"55\":2,\"58\":4,\"61\":2,\"64\":4,\"67\":3,\"70\":4,\"73\":2,\"77\":3,\"80\":3,\"83\":2,\"86\":1,\"89\":2,\"92\":3,\"95\":4,\"98\":3,\"101\":3,\"104\":4,\"107\":4,\"110\":3,\"207\":2,\"240\":2}}],[\"cleartimeout\",{\"1\":{\"37\":2,\"124\":1}}],[\"clear\",{\"1\":{\"36\":1,\"178\":1}}],[\"cleared\",{\"1\":{\"36\":1}}],[\"此外它再增加了一些自己的语法\",{\"1\":{\"189\":1}}],[\"此文件跟同级目录的\",{\"1\":{\"186\":1}}],[\"此文字有脚注\",{\"1\":{\"16\":1}}],[\"此属性返回的值可能与调用构造函数时指定的值不同\",{\"1\":{\"135\":1}}],[\"此处代码运行\",{\"1\":{\"36\":7}}],[\"v3\",{\"1\":{\"204\":2,\"205\":1}}],[\"v2\",{\"1\":{\"204\":3,\"205\":1}}],[\"v1\",{\"1\":{\"204\":3,\"205\":1}}],[\"vscode\",{\"1\":{\"192\":1}}],[\"vitecompression\",{\"1\":{\"186\":1}}],[\"vite\",{\"1\":{\"186\":8}}],[\"viteenv\",{\"1\":{\"186\":2}}],[\"visitconcreteelementb\",{\"1\":{\"104\":3}}],[\"visitconcreteelementa\",{\"1\":{\"104\":3}}],[\"visitor\",{\"1\":{\"102\":1,\"104\":15}}],[\"v\",{\"1\":{\"174\":1,\"176\":1,\"204\":3,\"223\":2}}],[\"vector\",{\"1\":{\"64\":1}}],[\"vectorrenderer\",{\"1\":{\"64\":4}}],[\"void>\",{\"1\":{\"244\":2,\"251\":1}}],[\"void\",{\"1\":{\"61\":4,\"64\":5,\"67\":6,\"70\":5,\"73\":2,\"77\":5,\"80\":8,\"83\":9,\"86\":3,\"89\":1,\"92\":3,\"95\":11,\"98\":3,\"101\":5,\"104\":9,\"107\":7,\"110\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":1,\"238\":2,\"239\":2,\"251\":1,\"253\":1}}],[\"v8\",{\"1\":{\"48\":1}}],[\"var\",{\"1\":{\"36\":2,\"118\":4,\"121\":4,\"124\":2,\"181\":1,\"203\":1,\"229\":1}}],[\"values\",{\"1\":{\"250\":5}}],[\"value2\",{\"1\":{\"36\":1}}],[\"value\",{\"1\":{\"36\":5,\"110\":2,\"124\":3,\"141\":1,\"186\":4,\"212\":1,\"328\":1,\"330\":1,\"331\":1}}],[\"vueclickhandler\",{\"1\":{\"331\":2}}],[\"vue常用指令\",{\"0\":{\"327\":1}}],[\"vue也支持将组件在服务器端直接渲染成html\",{\"1\":{\"317\":1}}],[\"vue2为31\",{\"1\":{\"313\":1}}],[\"vue2\",{\"1\":{\"307\":2,\"308\":1,\"313\":1}}],[\"vue3\",{\"0\":{\"306\":1,\"346\":1},\"1\":{\"307\":2,\"308\":2,\"309\":1},\"2\":{\"316\":1,\"326\":1,\"332\":1}}],[\"vueproptype<t>\",{\"1\":{\"186\":1}}],[\"vuepress\",{\"0\":{\"13\":1},\"1\":{\"9\":2,\"11\":2,\"12\":1,\"13\":2,\"14\":1,\"28\":1}}],[\"vue\",{\"1\":{\"29\":2,\"186\":1,\"307\":2,\"309\":2,\"312\":2}}],[\"庞大的存储量\",{\"1\":{\"35\":1}}],[\"仅支持部分\",{\"1\":{\"35\":1}}],[\"omitthisparameter<t>\",{\"1\":{\"243\":1}}],[\"omitthisparameter<t>给出了函数tohex\",{\"1\":{\"243\":1}}],[\"omitthisparameter<type>的实现如下\",{\"1\":{\"243\":1}}],[\"omitthisparameter<type>从函数类型中移除\",{\"1\":{\"243\":1}}],[\"omitthisparameter<typeof\",{\"1\":{\"243\":1}}],[\"omit<t\",{\"1\":{\"242\":1}}],[\"omit<type\",{\"1\":{\"242\":3}}],[\"omit<a\",{\"1\":{\"242\":4}}],[\"omega^i\",{\"1\":{\"18\":1}}],[\"omega^r\",{\"1\":{\"18\":1}}],[\"omega\",{\"1\":{\"18\":4}}],[\"option\",{\"1\":{\"186\":1}}],[\"options\",{\"1\":{\"134\":1,\"335\":1}}],[\"open\",{\"1\":{\"162\":1}}],[\"operationb\",{\"1\":{\"104\":2}}],[\"operationa\",{\"1\":{\"104\":2}}],[\"origin\",{\"1\":{\"175\":1}}],[\"originator\",{\"1\":{\"96\":1,\"98\":9}}],[\"originalhandler\",{\"1\":{\"331\":6}}],[\"original\",{\"1\":{\"51\":1}}],[\"orphan\",{\"1\":{\"175\":1}}],[\"or\",{\"1\":{\"132\":1}}],[\"orexpression\",{\"1\":{\"110\":2}}],[\"onerror\",{\"1\":{\"150\":2,\"153\":1}}],[\"onmessage\",{\"1\":{\"148\":2,\"153\":2}}],[\"onclick\",{\"1\":{\"126\":1}}],[\"on\",{\"1\":{\"95\":1}}],[\"observe\",{\"1\":{\"131\":2,\"132\":1,\"136\":1,\"137\":1,\"140\":1,\"141\":2,\"330\":1}}],[\"observers\",{\"1\":{\"83\":5}}],[\"observer\",{\"0\":{\"129\":1},\"1\":{\"81\":1,\"83\":16,\"130\":1,\"132\":4,\"134\":1,\"139\":1,\"330\":3}}],[\"obj\",{\"1\":{\"118\":4,\"121\":13,\"192\":2,\"215\":10,\"216\":7,\"217\":2,\"220\":2,\"253\":2,\"283\":2}}],[\"object的交叉类型\",{\"1\":{\"241\":1}}],[\"object>\",{\"1\":{\"237\":2,\"240\":1}}],[\"object属于复合类型\",{\"1\":{\"212\":1}}],[\"objectstructure\",{\"1\":{\"102\":1,\"104\":6}}],[\"object\",{\"0\":{\"214\":2,\"215\":1,\"216\":1},\"1\":{\"35\":1,\"73\":1,\"115\":1,\"117\":1,\"121\":1,\"211\":1,\"212\":1,\"213\":2,\"215\":2,\"216\":1,\"217\":1,\"222\":1,\"240\":3,\"307\":1}}],[\"oak\",{\"1\":{\"73\":2}}],[\"off\",{\"1\":{\"95\":1}}],[\"of\",{\"1\":{\"67\":1,\"83\":1,\"86\":1,\"104\":1,\"132\":1,\"141\":1}}],[\"othername\",{\"1\":{\"36\":1}}],[\"otherstore\",{\"1\":{\"36\":2}}],[\"binding\",{\"1\":{\"328\":2,\"330\":2,\"331\":5}}],[\"bigint\",{\"1\":{\"211\":1,\"212\":2,\"213\":4,\"222\":1}}],[\"blue\",{\"1\":{\"221\":2,\"230\":1}}],[\"blank\",{\"1\":{\"186\":1}}],[\"b表示\",{\"1\":{\"220\":1}}],[\"babel\",{\"1\":{\"288\":1,\"337\":1}}],[\"bar\",{\"1\":{\"191\":2,\"220\":3}}],[\"baseurl为当前目录\",{\"1\":{\"269\":1}}],[\"baseurl的值为字符串\",{\"1\":{\"269\":1}}],[\"baseurl\",{\"0\":{\"269\":1},\"1\":{\"269\":1}}],[\"base\",{\"1\":{\"186\":1,\"302\":1}}],[\"bom\",{\"1\":{\"277\":1}}],[\"bottom\",{\"1\":{\"205\":1}}],[\"body\",{\"1\":{\"141\":1,\"310\":1}}],[\"boot\",{\"1\":{\"70\":1}}],[\"boolean>\",{\"1\":{\"238\":1,\"239\":1}}],[\"boolean\",{\"1\":{\"35\":1,\"89\":2,\"110\":6,\"114\":1,\"186\":1,\"204\":1,\"205\":1,\"211\":1,\"212\":2,\"213\":2,\"222\":1,\"230\":4,\"236\":1,\"241\":1,\"251\":1}}],[\"b\",{\"1\":{\"92\":5,\"101\":5,\"104\":1,\"107\":4,\"110\":2,\"175\":1,\"192\":2,\"207\":9,\"213\":1,\"220\":2,\"222\":2,\"230\":4,\"236\":1,\"238\":4,\"239\":5,\"240\":1,\"244\":4,\"248\":3,\"250\":1,\"251\":2,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"283\":1,\"304\":1}}],[\"branch\",{\"1\":{\"175\":7}}],[\"broker\",{\"1\":{\"84\":1}}],[\"brown\",{\"1\":{\"73\":1}}],[\"breaking\",{\"1\":{\"83\":1}}],[\"build\",{\"1\":{\"48\":3}}],[\"builder\",{\"1\":{\"46\":1,\"48\":7}}],[\"button\",{\"1\":{\"42\":8,\"45\":8,\"126\":1}}],[\"been\",{\"1\":{\"132\":1}}],[\"be\",{\"1\":{\"26\":1,\"86\":1}}],[\"aaa\",{\"0\":{\"348\":1}}],[\"autoprefixer\",{\"1\":{\"337\":1}}],[\"alwaysstrict确保脚本以\",{\"1\":{\"265\":1}}],[\"alwaysstrict\",{\"0\":{\"265\":1}}],[\"allowunusedlabels设置是否允许存在未使用的标签\",{\"1\":{\"268\":1}}],[\"allowunusedlabels\",{\"0\":{\"268\":1}}],[\"allowunreachablecode设置是否允许存在不可能执行到的代码\",{\"1\":{\"267\":1}}],[\"allowunreachablecode\",{\"0\":{\"267\":1}}],[\"allowsyntheticdefaultimports允许import命令默认加载没有default输出的模块\",{\"1\":{\"266\":1}}],[\"allowsyntheticdefaultimports\",{\"0\":{\"266\":1}}],[\"allowjs允许\",{\"1\":{\"264\":1}}],[\"allowjs\",{\"0\":{\"264\":1},\"1\":{\"264\":1}}],[\"all\",{\"1\":{\"176\":1}}],[\"awaited<boolean\",{\"1\":{\"236\":1}}],[\"awaited<promise<promise<number>>>\",{\"1\":{\"236\":1}}],[\"awaited<promise<string>>\",{\"1\":{\"236\":1}}],[\"awaited<type>会返回\",{\"1\":{\"236\":1}}],[\"awaited<type>用来取出\",{\"1\":{\"236\":1}}],[\"await\",{\"1\":{\"236\":1}}],[\"a2\",{\"1\":{\"228\":3}}],[\"a1\",{\"1\":{\"228\":4}}],[\"age\",{\"1\":{\"217\":6,\"221\":3,\"222\":2,\"230\":1,\"247\":1}}],[\"aggregate<t>\",{\"1\":{\"89\":2}}],[\"aggregate\",{\"1\":{\"87\":1,\"89\":5}}],[\"abcabc\",{\"1\":{\"199\":1}}],[\"abc\",{\"1\":{\"199\":1,\"219\":1,\"227\":2}}],[\"abort\",{\"1\":{\"175\":1}}],[\"abstractclass\",{\"1\":{\"78\":1}}],[\"abstraction\",{\"1\":{\"62\":1}}],[\"abstract\",{\"1\":{\"58\":3,\"64\":2,\"80\":3,\"92\":1,\"107\":2,\"237\":2,\"240\":2}}],[\"amend\",{\"1\":{\"174\":1}}],[\"amount\",{\"1\":{\"77\":7}}],[\"app\",{\"1\":{\"186\":1,\"203\":1,\"217\":1}}],[\"apply\",{\"1\":{\"37\":3,\"178\":1}}],[\"api\",{\"0\":{\"145\":1,\"157\":1}}],[\"accept\",{\"1\":{\"104\":6}}],[\"after\",{\"1\":{\"98\":1}}],[\"attribute\",{\"1\":{\"132\":1}}],[\"attributename\",{\"1\":{\"132\":1}}],[\"attributes\",{\"1\":{\"132\":2}}],[\"attach\",{\"1\":{\"83\":4}}],[\"at\",{\"1\":{\"70\":1}}],[\"addone\",{\"1\":{\"190\":2}}],[\"address\",{\"1\":{\"172\":1}}],[\"added\",{\"1\":{\"132\":1}}],[\"addeventlistener\",{\"1\":{\"124\":1,\"141\":2,\"161\":1,\"162\":1,\"331\":1}}],[\"addmemento\",{\"1\":{\"98\":3}}],[\"add\",{\"1\":{\"67\":3,\"89\":4,\"104\":3,\"174\":2,\"203\":2,\"233\":4}}],[\"adaptee\",{\"1\":{\"53\":1,\"55\":12}}],[\"adapter\",{\"1\":{\"53\":1,\"55\":4}}],[\"any和unknown\",{\"1\":{\"205\":1}}],[\"any类型和never类型是两个特殊值\",{\"1\":{\"237\":1}}],[\"any类型除了关闭类型检查\",{\"1\":{\"203\":1}}],[\"any类型可以看成是所有其他类型的全集\",{\"1\":{\"203\":1}}],[\"any类型主要适用以下两个场合\",{\"1\":{\"203\":1}}],[\"any类型\",{\"0\":{\"202\":1}}],[\"any>\",{\"1\":{\"186\":3,\"242\":1,\"244\":1}}],[\"anyfunction<t>\",{\"1\":{\"186\":1}}],[\"any\",{\"1\":{\"86\":2,\"186\":10,\"203\":4,\"227\":1,\"230\":1,\"237\":3,\"238\":1,\"239\":1,\"240\":5,\"244\":2,\"251\":7,\"252\":1}}],[\"and\",{\"1\":{\"48\":1,\"73\":1}}],[\"an\",{\"1\":{\"42\":1,\"141\":1}}],[\"a\",{\"1\":{\"41\":5,\"42\":2,\"64\":2,\"67\":2,\"92\":5,\"101\":4,\"104\":1,\"107\":4,\"110\":2,\"132\":1,\"141\":1,\"175\":1,\"192\":2,\"204\":6,\"207\":13,\"213\":1,\"215\":2,\"216\":2,\"220\":2,\"222\":7,\"230\":5,\"236\":1,\"238\":4,\"239\":9,\"240\":1,\"242\":2,\"243\":2,\"244\":4,\"245\":1,\"246\":2,\"247\":1,\"248\":7,\"249\":1,\"250\":1,\"251\":2,\"255\":1,\"256\":1,\"257\":1,\"258\":1,\"283\":2,\"304\":1}}],[\"articlelist\",{\"1\":{\"309\":1}}],[\"arr1\",{\"1\":{\"226\":2}}],[\"arr\",{\"1\":{\"226\":2,\"227\":8,\"228\":8,\"233\":6}}],[\"array<number\",{\"1\":{\"226\":1}}],[\"array<number>\",{\"1\":{\"226\":1}}],[\"array<t>\",{\"1\":{\"184\":1}}],[\"arrayable<t>\",{\"1\":{\"186\":1}}],[\"arraybuffer\",{\"1\":{\"35\":1}}],[\"array\",{\"1\":{\"35\":1,\"36\":1,\"115\":1,\"117\":2,\"131\":1,\"141\":2,\"251\":1}}],[\"arg\",{\"1\":{\"186\":2,\"244\":2,\"331\":2}}],[\"args\",{\"1\":{\"37\":5,\"186\":2,\"237\":2,\"240\":2,\"243\":2,\"244\":2,\"251\":2,\"252\":1,\"331\":2}}],[\"are\",{\"1\":{\"73\":1}}],[\"asyncpopup\",{\"1\":{\"309\":1}}],[\"asynccomp\",{\"1\":{\"309\":1}}],[\"assign\",{\"1\":{\"117\":1}}],[\"as\",{\"1\":{\"26\":1,\"141\":1,\"228\":1,\"233\":1,\"266\":1,\"282\":2,\"296\":1}}],[\"存储操作\",{\"0\":{\"178\":1}}],[\"存储解释所需的全局信息\",{\"1\":{\"108\":1}}],[\"存储对象的内部状态的类\",{\"1\":{\"96\":1}}],[\"存储量小\",{\"1\":{\"35\":1}}],[\"存取方便\",{\"1\":{\"35\":1}}],[\"存取不方便\",{\"1\":{\"35\":1}}],[\"存入的内容会经过序列化\",{\"1\":{\"35\":1}}],[\"存在以下比较明显的缺点\",{\"1\":{\"35\":1}}],[\"ssr速度提高2\",{\"1\":{\"314\":1}}],[\"src\",{\"1\":{\"300\":1,\"301\":1,\"330\":1}}],[\"system或es6\",{\"1\":{\"295\":1}}],[\"symbol值类型\",{\"1\":{\"207\":1}}],[\"symbol类型也可以用作类\",{\"1\":{\"207\":1}}],[\"symbol类型的变量\",{\"1\":{\"207\":1}}],[\"symbol类型包含所有的\",{\"1\":{\"207\":1}}],[\"symbol表示单个值\",{\"1\":{\"207\":1}}],[\"symbol\",{\"0\":{\"206\":1,\"207\":1},\"1\":{\"114\":1,\"206\":7,\"207\":51,\"208\":15,\"211\":1,\"212\":2,\"213\":5,\"222\":2,\"248\":1}}],[\"sourcemaps\",{\"1\":{\"293\":1}}],[\"sourcemap\",{\"1\":{\"286\":1,\"293\":2}}],[\"source\",{\"1\":{\"274\":1}}],[\"something\",{\"1\":{\"253\":1}}],[\"some\",{\"1\":{\"132\":1,\"328\":1}}],[\"somekey\",{\"1\":{\"36\":2}}],[\"s4\",{\"1\":{\"213\":1}}],[\"s3\",{\"1\":{\"213\":1}}],[\"s2\",{\"1\":{\"213\":1}}],[\"s1\",{\"1\":{\"213\":1}}],[\"s\",{\"1\":{\"204\":3,\"228\":1,\"230\":1,\"244\":2,\"251\":1}}],[\"script\",{\"0\":{\"342\":1,\"345\":1},\"1\":{\"199\":2}}],[\"scrollerfooter\",{\"1\":{\"137\":1}}],[\"sw\",{\"1\":{\"164\":1}}],[\"switch\",{\"1\":{\"42\":1}}],[\"slider\",{\"1\":{\"141\":3}}],[\"slice\",{\"1\":{\"117\":1}}],[\"svgelement\",{\"1\":{\"138\":1}}],[\"sxj\",{\"1\":{\"118\":1,\"121\":1}}],[\"sass\",{\"1\":{\"334\":1,\"335\":1,\"337\":1}}],[\"saving\",{\"1\":{\"98\":1}}],[\"savestate\",{\"1\":{\"98\":3}}],[\"saved\",{\"1\":{\"80\":1}}],[\"savedata\",{\"1\":{\"80\":2}}],[\"same\",{\"1\":{\"73\":1}}],[\"sharedworkerglobalscope\",{\"1\":{\"155\":1}}],[\"sharedworker\",{\"1\":{\"155\":1,\"156\":5,\"158\":1}}],[\"shared\",{\"0\":{\"155\":1}}],[\"shallowcopy\",{\"1\":{\"118\":2}}],[\"shape\",{\"1\":{\"64\":2}}],[\"shoppingcart\",{\"1\":{\"77\":2}}],[\"similar\",{\"1\":{\"186\":1}}],[\"simple\",{\"1\":{\"58\":1}}],[\"simplecoffee\",{\"1\":{\"58\":2}}],[\"single\",{\"1\":{\"141\":1}}],[\"size\",{\"1\":{\"70\":3,\"89\":2,\"141\":1}}],[\"square\",{\"1\":{\"67\":5}}],[\"suspense>\",{\"1\":{\"309\":1}}],[\"suspense\",{\"0\":{\"309\":1},\"1\":{\"309\":1}}],[\"subtree\",{\"1\":{\"132\":1}}],[\"subscribe\",{\"1\":{\"86\":2}}],[\"subscribers\",{\"1\":{\"86\":9}}],[\"subscriber\",{\"1\":{\"84\":1,\"86\":4}}],[\"subsystem\",{\"1\":{\"68\":1}}],[\"subject\",{\"1\":{\"59\":1,\"81\":1,\"83\":2}}],[\"superset\",{\"1\":{\"189\":1}}],[\"super\",{\"1\":{\"64\":1,\"92\":2}}],[\"sugar\",{\"1\":{\"58\":1}}],[\"sugardecorator\",{\"1\":{\"58\":2}}],[\"sum\",{\"1\":{\"18\":1}}],[\"splice\",{\"1\":{\"67\":1,\"83\":1,\"250\":2}}],[\"specific\",{\"1\":{\"55\":1}}],[\"specificrequest\",{\"1\":{\"55\":2}}],[\"specifications\",{\"1\":{\"48\":2}}],[\"sportscarbuilder\",{\"1\":{\"48\":2}}],[\"style\",{\"1\":{\"141\":6,\"174\":1,\"335\":1,\"336\":1,\"337\":1}}],[\"strict\",{\"1\":{\"265\":1}}],[\"strictnullchecks\",{\"1\":{\"217\":3}}],[\"string|regexp\",{\"1\":{\"237\":1}}],[\"string|number\",{\"1\":{\"227\":1,\"241\":1}}],[\"string>\",{\"1\":{\"226\":1,\"244\":1,\"248\":1,\"251\":1}}],[\"stringify\",{\"1\":{\"120\":1}}],[\"string\",{\"1\":{\"35\":1,\"45\":6,\"48\":4,\"51\":3,\"55\":3,\"58\":5,\"61\":4,\"70\":2,\"73\":6,\"83\":6,\"86\":4,\"92\":3,\"98\":5,\"104\":2,\"107\":7,\"110\":5,\"114\":1,\"181\":1,\"185\":1,\"186\":18,\"196\":3,\"197\":1,\"199\":1,\"204\":1,\"205\":3,\"207\":2,\"211\":1,\"212\":2,\"213\":9,\"218\":2,\"219\":2,\"220\":3,\"222\":1,\"223\":1,\"226\":5,\"230\":9,\"231\":2,\"236\":1,\"237\":7,\"238\":3,\"239\":2,\"241\":2,\"243\":1,\"244\":8,\"247\":1,\"248\":1,\"251\":4,\"253\":2}}],[\"strategy\",{\"1\":{\"75\":1,\"77\":2}}],[\"stash\",{\"1\":{\"178\":6}}],[\"staged\",{\"1\":{\"174\":1}}],[\"status\",{\"1\":{\"174\":1}}],[\"state\",{\"1\":{\"98\":20,\"99\":1,\"101\":16}}],[\"static属性\",{\"1\":{\"207\":1}}],[\"static\",{\"1\":{\"41\":1,\"42\":1,\"207\":1}}],[\"start\",{\"1\":{\"70\":2,\"147\":1}}],[\"store\",{\"1\":{\"36\":2,\"162\":1}}],[\"storage\",{\"1\":{\"35\":1}}],[\"seo\",{\"0\":{\"321\":1}}],[\"server\",{\"1\":{\"309\":1}}],[\"serviceworker\",{\"1\":{\"161\":2,\"164\":1}}],[\"service\",{\"0\":{\"160\":1},\"1\":{\"160\":3,\"161\":1}}],[\"secretsanta\",{\"1\":{\"244\":3}}],[\"secretname\",{\"1\":{\"244\":4}}],[\"self\",{\"1\":{\"148\":1,\"149\":1,\"152\":1,\"153\":2,\"162\":1,\"186\":1}}],[\"sending\",{\"1\":{\"107\":2}}],[\"send\",{\"1\":{\"107\":8}}],[\"seats\",{\"1\":{\"48\":7}}],[\"setinterval>\",{\"1\":{\"186\":1}}],[\"setitem\",{\"1\":{\"36\":3}}],[\"setting\",{\"1\":{\"98\":1,\"219\":1}}],[\"settimeout>\",{\"1\":{\"186\":1}}],[\"settimeout\",{\"1\":{\"37\":2,\"124\":1,\"126\":1}}],[\"setstate\",{\"1\":{\"98\":4,\"101\":3}}],[\"setseats\",{\"1\":{\"48\":3}}],[\"setcommand\",{\"1\":{\"95\":3}}],[\"setnext\",{\"1\":{\"92\":2}}],[\"setnews\",{\"1\":{\"83\":2}}],[\"setpaymentstrategy\",{\"1\":{\"77\":3}}],[\"setengine\",{\"1\":{\"48\":3}}],[\"set\",{\"1\":{\"35\":1,\"110\":3,\"307\":1}}],[\"sessionstorage\",{\"1\":{\"35\":1}}],[\"wrong\",{\"1\":{\"253\":1}}],[\"wrapper\",{\"1\":{\"212\":1}}],[\"writable<t>\",{\"1\":{\"186\":1}}],[\"worker\",{\"0\":{\"143\":1,\"144\":1,\"148\":1,\"149\":1,\"152\":1,\"155\":1,\"160\":1,\"161\":1},\"1\":{\"144\":2,\"146\":4,\"147\":3,\"148\":1,\"149\":1,\"150\":3,\"151\":2,\"152\":1,\"153\":11,\"155\":4,\"158\":3,\"160\":4,\"161\":1,\"247\":2}}],[\"world\",{\"1\":{\"86\":1,\"192\":1,\"204\":1,\"207\":2,\"218\":1,\"220\":1,\"221\":3,\"269\":1}}],[\"was\",{\"1\":{\"132\":1}}],[\"waituntil\",{\"1\":{\"162\":1}}],[\"wait\",{\"1\":{\"126\":2}}],[\"wyj\",{\"1\":{\"118\":1,\"121\":1}}],[\"wheelevent\",{\"1\":{\"186\":1}}],[\"wheels\",{\"1\":{\"48\":3}}],[\"while\",{\"1\":{\"89\":1}}],[\"width\",{\"1\":{\"141\":4}}],[\"widget\",{\"1\":{\"42\":1}}],[\"widgetfactory\",{\"1\":{\"42\":2}}],[\"without<u\",{\"1\":{\"186\":1}}],[\"without<t\",{\"1\":{\"186\":2}}],[\"with\",{\"1\":{\"48\":1,\"64\":2,\"70\":1}}],[\"window\",{\"1\":{\"152\":1,\"161\":1,\"183\":1}}],[\"windows\",{\"1\":{\"45\":2,\"297\":1}}],[\"winfactory\",{\"1\":{\"45\":1}}],[\"wintextbox\",{\"1\":{\"45\":2}}],[\"winbutton\",{\"1\":{\"45\":2}}],[\"will\",{\"1\":{\"26\":1,\"86\":1}}],[\"webpack\",{\"0\":{\"347\":1},\"2\":{\"338\":1}}],[\"webpack则无能为力\",{\"1\":{\"334\":1}}],[\"webpack只支持对js和json文件打包\",{\"1\":{\"334\":1}}],[\"website\",{\"1\":{\"293\":1}}],[\"webstorage\",{\"1\":{\"35\":1}}],[\"web\",{\"0\":{\"144\":1},\"1\":{\"35\":1,\"144\":2,\"155\":1}}],[\"学习文档\",{\"2\":{\"33\":1}}],[\"个人学习文档\",{\"0\":{\"32\":1}}],[\"每个组件只能有一个根节点\",{\"1\":{\"308\":1}}],[\"每个声明为unique\",{\"1\":{\"207\":1}}],[\"每个运算符都有严格的类型约束\",{\"1\":{\"192\":1}}],[\"每个变量\",{\"1\":{\"192\":1}}],[\"每个\",{\"1\":{\"29\":1}}],[\"plugin\",{\"1\":{\"336\":1}}],[\"playground\",{\"0\":{\"198\":1},\"1\":{\"198\":1}}],[\"pkg2\",{\"1\":{\"303\":1}}],[\"pkg1\",{\"1\":{\"303\":1}}],[\"p可以指定tsconfig\",{\"1\":{\"261\":1}}],[\"pick<a\",{\"1\":{\"246\":4}}],[\"pick<type\",{\"1\":{\"246\":3}}],[\"pick<t\",{\"1\":{\"242\":1,\"246\":1}}],[\"pine\",{\"1\":{\"73\":1}}],[\"point\",{\"1\":{\"232\":2}}],[\"port\",{\"1\":{\"186\":1}}],[\"pop\",{\"1\":{\"178\":1,\"250\":2}}],[\"postcss\",{\"1\":{\"337\":1}}],[\"postmessage\",{\"1\":{\"147\":1,\"149\":2,\"153\":2}}],[\"position\",{\"1\":{\"70\":6}}],[\"png等这些类型的文件的时候\",{\"1\":{\"334\":1}}],[\"png\",{\"1\":{\"170\":1,\"334\":1}}],[\"p\",{\"1\":{\"141\":1,\"186\":7,\"237\":2,\"244\":2,\"245\":2,\"246\":2,\"247\":6,\"248\":1,\"249\":4,\"261\":1}}],[\"permissionroles\",{\"1\":{\"328\":4}}],[\"permission\",{\"0\":{\"328\":1},\"1\":{\"328\":1}}],[\"person1\",{\"1\":{\"118\":4,\"121\":4}}],[\"person\",{\"1\":{\"118\":3,\"121\":3,\"247\":1}}],[\"pelem\",{\"1\":{\"141\":3}}],[\"px`\",{\"1\":{\"141\":1}}],[\"px\",{\"1\":{\"135\":1}}],[\"pull\",{\"1\":{\"174\":2,\"176\":1}}],[\"put\",{\"1\":{\"162\":1}}],[\"publish\",{\"1\":{\"86\":3}}],[\"publisher\",{\"1\":{\"84\":1}}],[\"public\",{\"1\":{\"28\":1,\"48\":4,\"51\":2,\"55\":2,\"58\":8,\"61\":2,\"64\":3,\"67\":5,\"70\":6,\"73\":2,\"77\":4,\"80\":1,\"83\":5,\"86\":3,\"89\":6,\"92\":4,\"95\":9,\"98\":6,\"101\":4,\"104\":8,\"107\":6,\"110\":4,\"186\":1}}],[\"push\",{\"1\":{\"67\":1,\"83\":1,\"86\":1,\"89\":1,\"98\":1,\"104\":1,\"175\":1,\"176\":3,\"227\":3,\"228\":2,\"250\":1}}],[\"preserve\",{\"1\":{\"289\":2}}],[\"pressundo\",{\"1\":{\"95\":2}}],[\"pressbutton\",{\"1\":{\"95\":3}}],[\"primitive\",{\"1\":{\"212\":1}}],[\"private\",{\"1\":{\"48\":2,\"51\":1,\"55\":1,\"61\":4,\"64\":1,\"67\":1,\"70\":3,\"73\":2,\"77\":1,\"83\":3,\"86\":1,\"89\":3,\"95\":3,\"98\":3,\"101\":1,\"104\":1,\"107\":2,\"110\":4}}],[\"promise<number>>\",{\"1\":{\"236\":1}}],[\"promise<r>\",{\"1\":{\"186\":1}}],[\"promise\",{\"1\":{\"236\":3,\"309\":1}}],[\"promisefn<t\",{\"1\":{\"186\":1}}],[\"property\",{\"1\":{\"186\":2}}],[\"proptype<t>\",{\"1\":{\"186\":1}}],[\"prop\",{\"1\":{\"185\":1,\"186\":1,\"312\":1}}],[\"project或\",{\"1\":{\"261\":1}}],[\"project\",{\"0\":{\"344\":1},\"1\":{\"173\":1}}],[\"processing\",{\"1\":{\"80\":2,\"92\":2}}],[\"processdata\",{\"1\":{\"80\":4}}],[\"process\",{\"1\":{\"80\":3}}],[\"proxyimage\",{\"1\":{\"61\":2}}],[\"proxy\",{\"0\":{\"307\":1},\"1\":{\"59\":1,\"307\":2}}],[\"protected\",{\"1\":{\"58\":1,\"64\":1,\"80\":7,\"92\":1,\"107\":1}}],[\"prototype\",{\"1\":{\"49\":1,\"51\":7,\"117\":2}}],[\"products\",{\"1\":{\"162\":1}}],[\"productstore\",{\"1\":{\"162\":2}}],[\"productcount\",{\"1\":{\"162\":1}}],[\"productid\",{\"1\":{\"162\":4}}],[\"product\",{\"1\":{\"46\":1,\"162\":1}}],[\"path\",{\"1\":{\"186\":2,\"303\":2}}],[\"pattern\",{\"1\":{\"83\":1,\"237\":1}}],[\"parentnode\",{\"1\":{\"328\":1}}],[\"parat\",{\"1\":{\"244\":1}}],[\"parameters<t\",{\"1\":{\"244\":1}}],[\"parameters<typeof\",{\"1\":{\"244\":1}}],[\"parameters<type>的实现如下\",{\"1\":{\"244\":1}}],[\"parameters<type>的返回值会包括函数的参数名\",{\"1\":{\"244\":1}}],[\"parameters<type>主要用于从外部模块提供的函数类型中\",{\"1\":{\"244\":1}}],[\"parameters<type>从函数类型type里面提取参数类型\",{\"1\":{\"244\":1}}],[\"parameters<never>\",{\"1\":{\"244\":1}}],[\"parameters<any>\",{\"1\":{\"244\":1}}],[\"parameters<function>\",{\"1\":{\"244\":1}}],[\"parameters<string>\",{\"1\":{\"244\":1}}],[\"parameters<<t>\",{\"1\":{\"244\":1}}],[\"parameters<\",{\"1\":{\"244\":4}}],[\"parseint\",{\"1\":{\"222\":1}}],[\"parse\",{\"1\":{\"120\":1}}],[\"partial<t>\",{\"1\":{\"245\":1,\"249\":1}}],[\"partial<type>的实现如下\",{\"1\":{\"245\":1}}],[\"partial<type>返回一个新类型\",{\"1\":{\"245\":1}}],[\"partial<a>\",{\"1\":{\"245\":1}}],[\"partial\",{\"1\":{\"18\":1}}],[\"partial^r\",{\"1\":{\"18\":1}}],[\"paypal\",{\"1\":{\"77\":2}}],[\"paypalpayment\",{\"1\":{\"77\":2}}],[\"pay\",{\"1\":{\"77\":4}}],[\"paymentstrategy\",{\"1\":{\"77\":8}}],[\"page\",{\"1\":{\"26\":1}}],[\"标签为\",{\"1\":{\"27\":1}}],[\"标题会被视为页面标题\",{\"1\":{\"26\":1}}],[\"标题和页面信息\",{\"1\":{\"6\":1}}],[\"日志记录等场景\",{\"1\":{\"59\":1}}],[\"日\",{\"1\":{\"27\":1}}],[\"月\",{\"1\":{\"27\":1}}],[\"年\",{\"1\":{\"27\":1}}],[\"的数据反应\",{\"1\":{\"319\":1}}],[\"的职责是在浏览器中生成和操作dom\",{\"1\":{\"317\":1}}],[\"的目标解析\",{\"1\":{\"312\":1}}],[\"的响应式系统更加高效和灵活\",{\"1\":{\"307\":1}}],[\"的提升\",{\"0\":{\"306\":1}}],[\"的位置作为基准目录\",{\"1\":{\"269\":1}}],[\"的非空值都属于object的子类型\",{\"1\":{\"241\":1}}],[\"的返回值类型\",{\"1\":{\"236\":2}}],[\"的形式\",{\"1\":{\"229\":1}}],[\"的行为是\",{\"1\":{\"217\":1}}],[\"的特殊性\",{\"0\":{\"217\":1}}],[\"的8种类型之中\",{\"1\":{\"212\":1}}],[\"的基本类型\",{\"1\":{\"211\":1}}],[\"的属性值\",{\"1\":{\"207\":1}}],[\"的类型\",{\"1\":{\"243\":1}}],[\"的类型是\",{\"1\":{\"218\":3}}],[\"的类型设计\",{\"1\":{\"211\":1}}],[\"的类型使用symbol表示\",{\"1\":{\"206\":1}}],[\"的类型系统是动态的\",{\"1\":{\"191\":1}}],[\"的类型系统非常弱\",{\"1\":{\"191\":1}}],[\"的运行结果\",{\"1\":{\"205\":1}}],[\"的概念\",{\"1\":{\"205\":1}}],[\"的顶层类型\",{\"1\":{\"204\":1}}],[\"的全集\",{\"1\":{\"204\":1}}],[\"的参数不能是一个值的运算式\",{\"1\":{\"222\":1}}],[\"的参数变量x和y\",{\"1\":{\"203\":1}}],[\"的参数num的类型是number\",{\"1\":{\"196\":1}}],[\"的意义\",{\"1\":{\"203\":1}}],[\"的命令行\",{\"1\":{\"199\":1}}],[\"的原因\",{\"1\":{\"192\":1}}],[\"的原始值\",{\"1\":{\"114\":1}}],[\"的作用\",{\"1\":{\"191\":1}}],[\"的主要功能是为\",{\"1\":{\"191\":1}}],[\"的超集\",{\"1\":{\"189\":1}}],[\"的功能\",{\"1\":{\"189\":1}}],[\"的页面\",{\"1\":{\"156\":1}}],[\"的生命周期独立于页面\",{\"1\":{\"156\":1}}],[\"的监听\",{\"1\":{\"140\":3}}],[\"的通知队列中删除所有待处理的通知\",{\"1\":{\"131\":1}}],[\"的对象类型也有大写object和小写object两种\",{\"1\":{\"214\":1}}],[\"的对象属性名都是字符串\",{\"1\":{\"114\":1}}],[\"的对象\",{\"1\":{\"114\":1}}],[\"的值\",{\"1\":{\"114\":1,\"205\":1}}],[\"的值不会影响到另一个数据仓库\",{\"1\":{\"36\":1}}],[\"的请求\",{\"1\":{\"92\":2}}],[\"的存储量最大也只有5m\",{\"1\":{\"35\":1}}],[\"的\",{\"1\":{\"26\":1,\"27\":1,\"117\":1,\"120\":1,\"199\":1,\"262\":1,\"295\":2}}],[\"helperfunctions\",{\"1\":{\"253\":1}}],[\"helperthisvalue\",{\"1\":{\"253\":1}}],[\"hello\",{\"1\":{\"86\":1,\"107\":2,\"147\":1,\"149\":1,\"190\":1,\"191\":2,\"192\":5,\"203\":3,\"204\":3,\"207\":2,\"212\":1,\"213\":6,\"218\":2,\"220\":1,\"223\":1,\"253\":1,\"255\":2,\"256\":2,\"257\":2,\"258\":2}}],[\"https\",{\"1\":{\"218\":3,\"293\":1}}],[\"html\",{\"1\":{\"337\":1}}],[\"htmlinputelement\",{\"1\":{\"186\":1}}],[\"htmldivelement>\",{\"1\":{\"186\":3}}],[\"htmlelement\",{\"1\":{\"186\":3}}],[\"hi\",{\"1\":{\"215\":1,\"216\":1}}],[\"hide\",{\"1\":{\"186\":1}}],[\"history\",{\"1\":{\"186\":1}}],[\"home\",{\"1\":{\"186\":1}}],[\"hobby\",{\"1\":{\"118\":2,\"121\":2}}],[\"hope\",{\"1\":{\"27\":1}}],[\"hard\",{\"1\":{\"177\":1}}],[\"harddrive\",{\"1\":{\"70\":6}}],[\"handel\",{\"1\":{\"126\":2}}],[\"handling\",{\"1\":{\"101\":2}}],[\"handle\",{\"1\":{\"101\":4}}],[\"handlerb\",{\"1\":{\"92\":2}}],[\"handlera\",{\"1\":{\"92\":5}}],[\"handlerequest\",{\"1\":{\"92\":9}}],[\"handler\",{\"1\":{\"90\":1,\"92\":12}}],[\"haspermission\",{\"1\":{\"328\":2}}],[\"has\",{\"1\":{\"132\":1}}],[\"hasownproperty\",{\"1\":{\"118\":1,\"121\":1}}],[\"hasnext\",{\"1\":{\"89\":4}}],[\"h1elem\",{\"1\":{\"141\":3}}],[\"h1\",{\"1\":{\"26\":2,\"141\":1}}],[\"h2o\",{\"1\":{\"21\":1}}],[\"flags\",{\"1\":{\"237\":1}}],[\"flyweightfactory\",{\"1\":{\"71\":1}}],[\"flyweight\",{\"1\":{\"71\":1}}],[\"f\",{\"1\":{\"205\":4,\"232\":1}}],[\"fn\",{\"1\":{\"205\":1}}],[\"fn<t\",{\"1\":{\"186\":1}}],[\"female\",{\"1\":{\"219\":1}}],[\"feat\",{\"1\":{\"174\":1}}],[\"fetch\",{\"1\":{\"162\":1,\"176\":2}}],[\"found\",{\"1\":{\"341\":1}}],[\"focus\",{\"1\":{\"329\":2}}],[\"foo是可选属性\",{\"1\":{\"283\":1}}],[\"foo\",{\"1\":{\"191\":4,\"196\":1,\"197\":1,\"203\":3,\"204\":2,\"207\":4,\"215\":1,\"216\":1,\"218\":2,\"220\":3,\"222\":1,\"283\":3,\"296\":5}}],[\"fontsize\",{\"1\":{\"141\":4}}],[\"foreach\",{\"1\":{\"330\":1}}],[\"format\",{\"1\":{\"186\":1}}],[\"fordatatype<t\",{\"1\":{\"186\":1}}],[\"fordatatype<t>\",{\"1\":{\"186\":1}}],[\"forceconsistentcasinginfilenames设置文件名是否为大小写敏感\",{\"1\":{\"284\":1}}],[\"forceconsistentcasinginfilenames\",{\"0\":{\"284\":1}}],[\"force\",{\"1\":{\"176\":1}}],[\"for\",{\"1\":{\"67\":1,\"83\":1,\"86\":1,\"92\":1,\"104\":1,\"118\":1,\"121\":1,\"132\":3,\"141\":1,\"207\":3}}],[\"fallback>\",{\"1\":{\"309\":1}}],[\"false\",{\"1\":{\"110\":1,\"206\":1,\"219\":1,\"267\":1,\"268\":1}}],[\"factory\",{\"1\":{\"73\":4}}],[\"facade\",{\"1\":{\"68\":1}}],[\"find\",{\"1\":{\"192\":1}}],[\"fix\",{\"1\":{\"174\":1}}],[\"firefox\",{\"1\":{\"141\":1}}],[\"first\",{\"1\":{\"26\":1,\"244\":1}}],[\"filter\",{\"1\":{\"86\":1}}],[\"files属性指定编译的文件列表\",{\"1\":{\"304\":1}}],[\"files\",{\"0\":{\"304\":1},\"1\":{\"304\":1}}],[\"file2\",{\"1\":{\"174\":1}}],[\"file1\",{\"1\":{\"174\":1}}],[\"file\",{\"1\":{\"80\":2,\"337\":1}}],[\"filename\",{\"1\":{\"61\":11}}],[\"func\",{\"1\":{\"37\":5}}],[\"function>\",{\"1\":{\"238\":2,\"239\":1}}],[\"function\",{\"1\":{\"36\":8,\"37\":4,\"51\":1,\"55\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"70\":1,\"73\":1,\"77\":1,\"80\":1,\"83\":1,\"86\":4,\"89\":1,\"92\":1,\"95\":1,\"98\":1,\"101\":1,\"104\":1,\"107\":1,\"110\":1,\"115\":1,\"118\":1,\"121\":1,\"124\":4,\"126\":5,\"132\":1,\"148\":1,\"150\":1,\"153\":3,\"161\":1,\"185\":1,\"190\":1,\"192\":1,\"196\":1,\"197\":1,\"203\":1,\"205\":2,\"222\":1,\"228\":1,\"232\":1,\"233\":2,\"240\":1,\"243\":1,\"244\":1,\"252\":1,\"253\":2}}],[\"fragments\",{\"0\":{\"308\":1},\"1\":{\"308\":1}}],[\"frac\",{\"1\":{\"18\":4}}],[\"freezing\",{\"1\":{\"70\":1}}],[\"freeze\",{\"1\":{\"70\":2}}],[\"from\",{\"1\":{\"55\":1,\"70\":1,\"80\":2,\"98\":1,\"148\":1,\"266\":2,\"282\":2,\"296\":1,\"309\":2}}],[\"frontmatter\",{\"1\":{\"3\":1,\"6\":1,\"11\":4,\"26\":1,\"27\":1,\"146\":1}}],[\"mutable<t>\",{\"1\":{\"247\":1}}],[\"mutation\",{\"1\":{\"132\":4}}],[\"mutationslist\",{\"1\":{\"132\":2}}],[\"mutationrecord对象的新\",{\"1\":{\"131\":1}}],[\"mutationobserver\",{\"1\":{\"130\":1,\"131\":3,\"132\":1}}],[\"mutationobserver用于监听dom对象的变更\",{\"1\":{\"129\":1}}],[\"multi\",{\"1\":{\"229\":1}}],[\"m\",{\"1\":{\"174\":1,\"175\":1}}],[\"mounted\",{\"1\":{\"328\":1,\"329\":1,\"330\":1,\"331\":1}}],[\"moment里面的moment是一个对象\",{\"1\":{\"282\":1}}],[\"moment\",{\"1\":{\"282\":6}}],[\"modules\",{\"1\":{\"300\":2,\"335\":1}}],[\"modulesuffixes指定模块的后缀名\",{\"1\":{\"296\":1}}],[\"modulesuffixes\",{\"0\":{\"296\":1},\"1\":{\"296\":1}}],[\"moduleresolution确定模块路径的算法\",{\"1\":{\"295\":1}}],[\"moduleresolution\",{\"0\":{\"295\":1}}],[\"module指定编译产物的模块格式\",{\"1\":{\"294\":1}}],[\"module\",{\"0\":{\"294\":1},\"1\":{\"182\":2,\"335\":2}}],[\"modified\",{\"1\":{\"132\":1}}],[\"more\",{\"1\":{\"25\":1}}],[\"minify\",{\"1\":{\"337\":1}}],[\"mixin\",{\"1\":{\"114\":1}}],[\"milk\",{\"1\":{\"58\":1}}],[\"milkdecorator\",{\"1\":{\"58\":2}}],[\"messege\",{\"1\":{\"192\":1}}],[\"message\",{\"1\":{\"84\":1,\"86\":2,\"107\":15,\"148\":1,\"150\":1,\"153\":1,\"192\":1,\"237\":1}}],[\"merge\",{\"1\":{\"175\":2}}],[\"mediator\",{\"1\":{\"105\":1,\"107\":15}}],[\"mementos\",{\"1\":{\"98\":3}}],[\"memento`\",{\"1\":{\"98\":1}}],[\"memento\",{\"1\":{\"96\":1,\"98\":12}}],[\"memory\",{\"1\":{\"70\":6}}],[\"myobj\",{\"1\":{\"283\":2}}],[\"myage\",{\"1\":{\"222\":1}}],[\"myfunction\",{\"1\":{\"185\":1}}],[\"myinterface\",{\"1\":{\"185\":1}}],[\"mynamespace\",{\"1\":{\"185\":1}}],[\"mycustommethod\",{\"1\":{\"183\":1}}],[\"my\",{\"1\":{\"36\":1,\"181\":1,\"182\":1,\"293\":1}}],[\"male\",{\"1\":{\"219\":1}}],[\"main\",{\"1\":{\"148\":1,\"149\":1}}],[\"max\",{\"1\":{\"141\":4}}],[\"math\",{\"1\":{\"141\":4,\"221\":1,\"251\":1}}],[\"macfactory\",{\"1\":{\"45\":1}}],[\"mactextbox\",{\"1\":{\"45\":2}}],[\"mac\",{\"1\":{\"45\":2}}],[\"macbutton\",{\"1\":{\"45\":2}}],[\"maproot指定\",{\"1\":{\"293\":1}}],[\"maproot\",{\"0\":{\"293\":1},\"1\":{\"293\":1}}],[\"map文件\",{\"1\":{\"286\":1}}],[\"map\",{\"1\":{\"35\":1,\"274\":1}}],[\"markdown\",{\"0\":{\"9\":1,\"10\":1,\"11\":1,\"12\":1},\"1\":{\"9\":2,\"10\":3,\"11\":1,\"12\":3,\"13\":2,\"14\":1,\"26\":3,\"27\":1,\"28\":2,\"29\":2},\"2\":{\"24\":1}}],[\"ms\",{\"1\":{\"27\":1}}],[\"上面代码中\",{\"1\":{\"238\":1,\"241\":1,\"247\":1,\"249\":1}}],[\"上面这种写法也可以\",{\"1\":{\"233\":1}}],[\"上面这五种原始类型的值\",{\"1\":{\"212\":1}}],[\"上面命令使用了noimplicitany编译选项进行编译\",{\"1\":{\"203\":1}}],[\"上面命令中\",{\"1\":{\"199\":1}}],[\"上面命令运行了\",{\"1\":{\"199\":1}}],[\"上面示例会报错\",{\"1\":{\"222\":1,\"233\":1}}],[\"上面示例是合法的\",{\"1\":{\"192\":1}}],[\"上面示例中\",{\"1\":{\"190\":2,\"191\":1,\"192\":2,\"196\":2,\"197\":1,\"199\":2,\"203\":6,\"204\":6,\"205\":3,\"207\":4,\"213\":1,\"218\":1,\"220\":1,\"228\":1,\"236\":1,\"240\":2,\"242\":2,\"243\":1,\"244\":2,\"246\":2,\"247\":1,\"248\":2,\"250\":1,\"253\":2,\"269\":1,\"282\":1,\"283\":1}}],[\"上面的设置使得\",{\"1\":{\"296\":1}}],[\"上面的代码在\",{\"1\":{\"191\":1}}],[\"上面的例二\",{\"1\":{\"191\":1}}],[\"上面的例一\",{\"1\":{\"191\":1}}],[\"上传本地指定分支到远程仓库\",{\"1\":{\"176\":1}}],[\"上下文\",{\"1\":{\"75\":1,\"77\":1,\"99\":1,\"101\":1,\"108\":1,\"110\":1}}],[\"上下角标\",{\"0\":{\"21\":1}}],[\"上一篇\",{\"1\":{\"3\":1}}],[\"22\",{\"1\":{\"313\":1}}],[\"255\",{\"1\":{\"230\":3}}],[\"25\",{\"1\":{\"229\":1}}],[\"23\",{\"1\":{\"229\":1}}],[\"24\",{\"1\":{\"217\":2,\"229\":1}}],[\"201>\",{\"1\":{\"238\":1,\"239\":1}}],[\"200ms\",{\"1\":{\"309\":1}}],[\"2000\",{\"1\":{\"126\":1}}],[\"200\",{\"1\":{\"77\":1,\"141\":2,\"238\":1,\"239\":2}}],[\"2020\",{\"1\":{\"27\":1}}],[\"2\",{\"1\":{\"19\":1,\"36\":1,\"48\":1,\"83\":1,\"89\":1,\"98\":2,\"118\":1,\"121\":1,\"191\":2,\"203\":1,\"215\":1,\"216\":1,\"226\":2,\"228\":3,\"229\":1,\"230\":3,\"233\":4}}],[\"rules中使用loader字段直接引用一个模块\",{\"1\":{\"336\":1}}],[\"rules\",{\"1\":{\"335\":1}}],[\"role\",{\"1\":{\"328\":2}}],[\"roles\",{\"1\":{\"328\":2}}],[\"router\",{\"1\":{\"186\":1}}],[\"rootmargin\",{\"1\":{\"135\":1}}],[\"root\",{\"1\":{\"135\":2}}],[\"random>\",{\"1\":{\"251\":1}}],[\"random\",{\"1\":{\"221\":1}}],[\"range\",{\"1\":{\"141\":1}}],[\"rainbowcolor\",{\"1\":{\"219\":1}}],[\"rather\",{\"1\":{\"141\":1}}],[\"raster\",{\"1\":{\"64\":1}}],[\"rasterrenderer\",{\"1\":{\"64\":4}}],[\"radius\",{\"1\":{\"64\":12}}],[\"reject\",{\"1\":{\"309\":1}}],[\"required<t>\",{\"1\":{\"249\":1}}],[\"required<type>的实现如下\",{\"1\":{\"249\":1}}],[\"required<type>返回一个新类型\",{\"1\":{\"249\":1}}],[\"required<a>\",{\"1\":{\"249\":1}}],[\"request\",{\"1\":{\"55\":4,\"92\":12,\"101\":6,\"162\":1}}],[\"red\",{\"1\":{\"221\":2,\"230\":1}}],[\"repl\",{\"1\":{\"199\":4}}],[\"revert\",{\"1\":{\"177\":1}}],[\"references属性是一个数组\",{\"1\":{\"303\":1}}],[\"references\",{\"0\":{\"303\":1},\"1\":{\"303\":1}}],[\"reftype<t>\",{\"1\":{\"186\":1}}],[\"refactor\",{\"1\":{\"174\":1}}],[\"refinedabstraction\",{\"1\":{\"62\":1}}],[\"rem`\",{\"1\":{\"141\":4}}],[\"remote\",{\"1\":{\"95\":6,\"176\":1}}],[\"remotecontrol\",{\"1\":{\"95\":2}}],[\"removeeventlistener\",{\"1\":{\"331\":1}}],[\"removechild\",{\"1\":{\"328\":1}}],[\"removed\",{\"1\":{\"132\":1}}],[\"remove\",{\"1\":{\"67\":1}}],[\"removeitem\",{\"1\":{\"36\":1}}],[\"recommended和\",{\"1\":{\"262\":1}}],[\"record<k\",{\"1\":{\"248\":1}}],[\"record<keys\",{\"1\":{\"248\":3}}],[\"record<\",{\"1\":{\"248\":3}}],[\"record<string\",{\"1\":{\"186\":1}}],[\"recordable<t\",{\"1\":{\"186\":1}}],[\"rect\",{\"1\":{\"141\":1}}],[\"receive\",{\"1\":{\"107\":5}}],[\"receiver\",{\"1\":{\"93\":1}}],[\"received\",{\"1\":{\"83\":1,\"107\":2}}],[\"resolve\",{\"1\":{\"309\":2}}],[\"reset\",{\"1\":{\"177\":3}}],[\"response\",{\"1\":{\"149\":1}}],[\"resizeobserver接口监视\",{\"1\":{\"138\":1}}],[\"resizeobserver\",{\"0\":{\"138\":1},\"1\":{\"139\":1,\"140\":3,\"141\":5}}],[\"result\",{\"1\":{\"110\":1,\"192\":1}}],[\"restoring\",{\"1\":{\"98\":1}}],[\"restorestate\",{\"1\":{\"98\":2}}],[\"react\",{\"1\":{\"266\":4,\"289\":2}}],[\"readonlyarray<t>\",{\"1\":{\"250\":1}}],[\"readonlyarray<type>的实现如下\",{\"1\":{\"250\":1}}],[\"readonlyarray<type>用来生成一个只读数组类型\",{\"1\":{\"250\":1}}],[\"readonlyarray<string>\",{\"1\":{\"250\":1}}],[\"readonlyarray<number>\",{\"1\":{\"228\":1}}],[\"readonly表示去除属性的只读标志\",{\"1\":{\"247\":1}}],[\"readonly<partial<person>>\",{\"1\":{\"247\":1}}],[\"readonly<t>\",{\"1\":{\"247\":2}}],[\"readonly<type>可以与partial<type>结合使用\",{\"1\":{\"247\":1}}],[\"readonly<type>的实现也可以写成下面这样\",{\"1\":{\"247\":1}}],[\"readonly<type>的实现如下\",{\"1\":{\"247\":1}}],[\"readonly<type>不会改变这一点\",{\"1\":{\"247\":1}}],[\"readonly<type>返回一个新类型\",{\"1\":{\"247\":1}}],[\"readonly<a>\",{\"1\":{\"247\":1}}],[\"readonly<\",{\"1\":{\"231\":1}}],[\"readonly<number\",{\"1\":{\"228\":1}}],[\"readonlyrecordable<t\",{\"1\":{\"186\":1}}],[\"readonly\",{\"1\":{\"186\":2,\"207\":1,\"228\":3,\"231\":1,\"247\":4,\"250\":2}}],[\"reading\",{\"1\":{\"80\":2}}],[\"readdata\",{\"1\":{\"80\":4}}],[\"read\",{\"1\":{\"70\":2}}],[\"realimage\",{\"1\":{\"61\":7}}],[\"realsubject\",{\"1\":{\"59\":1}}],[\"rendercircle\",{\"1\":{\"64\":4}}],[\"renderer\",{\"1\":{\"64\":15}}],[\"rendering\",{\"1\":{\"42\":3}}],[\"render\",{\"1\":{\"42\":3,\"45\":6}}],[\"returntype<never>\",{\"1\":{\"251\":1}}],[\"returntype<any>\",{\"1\":{\"251\":1}}],[\"returntype<function>\",{\"1\":{\"251\":1}}],[\"returntype<boolean>\",{\"1\":{\"251\":1}}],[\"returntype<<t>\",{\"1\":{\"251\":1}}],[\"returntype<\",{\"1\":{\"251\":6}}],[\"returntype<type>的实现如下\",{\"1\":{\"251\":1}}],[\"returntype<type>提取函数类型type的返回值类型\",{\"1\":{\"251\":1}}],[\"returntype<typeof\",{\"1\":{\"186\":2,\"244\":1,\"251\":2}}],[\"returnt\",{\"1\":{\"244\":1}}],[\"return\",{\"1\":{\"37\":2,\"41\":2,\"42\":2,\"45\":8,\"48\":5,\"51\":2,\"55\":2,\"58\":6,\"70\":1,\"73\":1,\"86\":2,\"89\":6,\"92\":1,\"98\":3,\"104\":2,\"110\":3,\"118\":1,\"121\":5,\"124\":1,\"126\":1,\"137\":1,\"190\":1,\"192\":1,\"196\":1,\"197\":1,\"203\":1,\"243\":1,\"252\":1,\"253\":1,\"309\":1}}],[\"register\",{\"1\":{\"161\":1,\"164\":1}}],[\"regexp\",{\"1\":{\"35\":1,\"115\":1,\"121\":2,\"240\":1}}],[\"regarded\",{\"1\":{\"26\":1}}],[\"r\",{\"1\":{\"18\":3,\"175\":1,\"186\":3,\"204\":1,\"240\":2,\"243\":2,\"251\":2}}],[\"right\",{\"1\":{\"18\":3}}],[\"^\",{\"1\":{\"18\":1}}],[\"^i\",{\"1\":{\"18\":1}}],[\"^r\",{\"1\":{\"18\":2}}],[\"ios\",{\"1\":{\"296\":2}}],[\"icon\",{\"1\":{\"186\":1}}],[\"ie\",{\"1\":{\"132\":1}}],[\"id=\",{\"1\":{\"312\":1}}],[\"ide\",{\"1\":{\"192\":2}}],[\"id\",{\"1\":{\"132\":1,\"162\":2}}],[\"import\",{\"1\":{\"282\":3,\"309\":2}}],[\"importmetaenv\",{\"1\":{\"186\":1}}],[\"implemented\",{\"1\":{\"83\":1}}],[\"implementor\",{\"1\":{\"62\":1}}],[\"implements\",{\"1\":{\"45\":6,\"48\":1,\"51\":1,\"55\":1,\"58\":2,\"61\":2,\"64\":2,\"67\":3,\"73\":1,\"77\":2,\"83\":2,\"89\":2,\"95\":2,\"101\":2,\"104\":3,\"107\":1,\"110\":2,\"141\":1}}],[\"img标签使用\",{\"1\":{\"330\":1}}],[\"img\",{\"1\":{\"170\":1,\"334\":1}}],[\"image\",{\"1\":{\"61\":8}}],[\"iframe\",{\"1\":{\"155\":1,\"156\":1}}],[\"if\",{\"1\":{\"37\":1,\"41\":1,\"61\":1,\"67\":1,\"73\":1,\"83\":1,\"86\":3,\"89\":1,\"92\":3,\"95\":2,\"107\":2,\"118\":1,\"121\":5,\"126\":1,\"132\":2,\"137\":1,\"141\":2,\"161\":1,\"162\":1,\"204\":2,\"205\":2,\"221\":1,\"222\":1,\"223\":1,\"232\":1,\"328\":2,\"330\":1,\"331\":1}}],[\"isintersecting\",{\"1\":{\"330\":1}}],[\"ismobile\",{\"1\":{\"311\":1}}],[\"isolatedmodules设置如果当前\",{\"1\":{\"288\":1}}],[\"isolatedmodules\",{\"0\":{\"288\":1}}],[\"isarray>\",{\"1\":{\"251\":1}}],[\"isarray\",{\"1\":{\"141\":1,\"328\":1}}],[\"is\",{\"1\":{\"36\":2,\"70\":3,\"95\":2}}],[\"inlinesources设置将原始的\",{\"1\":{\"287\":1}}],[\"inlinesources\",{\"0\":{\"287\":1}}],[\"inlinesourcemap设置将\",{\"1\":{\"286\":1}}],[\"inlinesourcemap\",{\"0\":{\"286\":1}}],[\"inlinesize\",{\"1\":{\"141\":2}}],[\"include属性支持三种通配符\",{\"1\":{\"301\":1}}],[\"include属性指定所要编译的文件列表\",{\"1\":{\"301\":1}}],[\"include\",{\"0\":{\"301\":1},\"1\":{\"300\":2,\"301\":1}}],[\"includes\",{\"1\":{\"162\":1,\"328\":1}}],[\"incremental让\",{\"1\":{\"285\":1}}],[\"incremental\",{\"0\":{\"285\":1}}],[\"infinity\",{\"1\":{\"309\":1}}],[\"infer\",{\"1\":{\"237\":1,\"240\":1,\"243\":2,\"244\":1,\"251\":1,\"252\":1}}],[\"info\",{\"1\":{\"164\":1}}],[\"install\",{\"1\":{\"199\":1}}],[\"instancetype<\",{\"1\":{\"240\":1}}],[\"instancetype<never>\",{\"1\":{\"240\":1}}],[\"instancetype<new\",{\"1\":{\"240\":1}}],[\"instancetype<any>\",{\"1\":{\"240\":1}}],[\"instancetype<function>\",{\"1\":{\"240\":1}}],[\"instancetype<functionconstructor>\",{\"1\":{\"240\":1}}],[\"instancetype<string>\",{\"1\":{\"240\":1}}],[\"instancetype<type>的实现如下\",{\"1\":{\"240\":1}}],[\"instancetype<type>提取构造函数的返回值的类型\",{\"1\":{\"240\":1}}],[\"instancetype<typeof\",{\"1\":{\"240\":1}}],[\"instancetype<t>的返回值就是这些构造函数的实例类型\",{\"1\":{\"240\":1}}],[\"instancetype<t>的参数都是\",{\"1\":{\"240\":1}}],[\"instancetype<regexpconstructor>\",{\"1\":{\"240\":1}}],[\"instancetype<errorconstructor>\",{\"1\":{\"240\":1}}],[\"instanceof\",{\"1\":{\"121\":2}}],[\"instance\",{\"1\":{\"41\":3}}],[\"init参数自动生成\",{\"1\":{\"262\":1}}],[\"init\",{\"1\":{\"173\":1,\"174\":1}}],[\"intervalhandle\",{\"1\":{\"186\":1}}],[\"intersection\",{\"1\":{\"220\":1}}],[\"intersectionratio\",{\"1\":{\"137\":2}}],[\"intersectionobserverentry\",{\"1\":{\"136\":1}}],[\"intersectionobserver提供一种异步观察目标元素与其祖先元素或者顶级文档视口交叉状态\",{\"1\":{\"133\":1}}],[\"intersectionobserver\",{\"0\":{\"133\":1},\"1\":{\"134\":1,\"135\":3,\"136\":7,\"137\":3,\"330\":1}}],[\"interpret\",{\"1\":{\"110\":6}}],[\"interface\",{\"1\":{\"45\":3,\"48\":1,\"51\":1,\"55\":1,\"58\":1,\"61\":1,\"64\":1,\"67\":1,\"73\":1,\"77\":1,\"83\":2,\"89\":2,\"95\":1,\"101\":1,\"104\":2,\"107\":1,\"110\":1,\"183\":1,\"184\":1,\"185\":1,\"186\":7,\"207\":1,\"242\":2,\"244\":2,\"245\":1,\"246\":2,\"247\":2,\"249\":1,\"250\":1,\"253\":1,\"283\":1}}],[\"invoker\",{\"1\":{\"93\":1}}],[\"indexable<t\",{\"1\":{\"186\":1}}],[\"index++\",{\"1\":{\"89\":1}}],[\"indexof\",{\"1\":{\"67\":1,\"83\":1}}],[\"index\",{\"1\":{\"67\":3,\"83\":3,\"89\":4,\"98\":2}}],[\"indexeddb\",{\"0\":{\"35\":1},\"1\":{\"35\":2,\"162\":1}}],[\"input\",{\"1\":{\"42\":4,\"124\":3,\"141\":3}}],[\"in\",{\"1\":{\"26\":1,\"101\":2,\"118\":1,\"121\":1,\"161\":1,\"186\":4,\"245\":1,\"246\":1,\"247\":3,\"248\":1,\"249\":2}}],[\"i\",{\"1\":{\"18\":1,\"29\":1,\"118\":4,\"121\":4}}],[\"i+1\",{\"1\":{\"18\":1}}],[\"i=1\",{\"1\":{\"18\":1}}],[\"item\",{\"1\":{\"89\":2}}],[\"items\",{\"1\":{\"89\":4,\"137\":1}}],[\"iterator<t>\",{\"1\":{\"89\":4}}],[\"iterator\",{\"1\":{\"87\":1,\"89\":3}}],[\"it\",{\"1\":{\"12\":2}}],[\"+readonly\",{\"1\":{\"247\":1}}],[\"+readonly就表示增加只读标志\",{\"1\":{\"247\":1}}],[\"++productcount\",{\"1\":{\"162\":1}}],[\"+\",{\"1\":{\"18\":1,\"29\":1,\"58\":4,\"132\":2,\"190\":1,\"192\":1,\"196\":1,\"199\":2,\"203\":1,\"204\":3,\"215\":1,\"216\":1,\"218\":3,\"249\":1,\"253\":1,\"313\":1}}],[\"y会报错\",{\"1\":{\"253\":1}}],[\"y是可选属性\",{\"1\":{\"247\":1}}],[\"y\",{\"1\":{\"18\":2,\"191\":6,\"203\":7,\"206\":2,\"207\":3,\"208\":2,\"217\":1,\"218\":5,\"233\":2,\"237\":2,\"240\":1,\"242\":6,\"245\":2,\"246\":6,\"247\":2,\"249\":2,\"253\":1}}],[\"y^\",{\"1\":{\"18\":2}}],[\"lazyload\",{\"1\":{\"330\":1}}],[\"late\",{\"1\":{\"312\":2}}],[\"last\",{\"1\":{\"244\":1}}],[\"lastexectime\",{\"1\":{\"37\":4}}],[\"label\",{\"1\":{\"186\":3}}],[\"linux\",{\"1\":{\"297\":1}}],[\"line\",{\"1\":{\"211\":3,\"213\":1,\"214\":1}}],[\"lib=\",{\"1\":{\"290\":1}}],[\"lib值是一个数组\",{\"1\":{\"290\":1}}],[\"lib\",{\"0\":{\"290\":1},\"1\":{\"290\":1}}],[\"listfiles设置编译时在终端显示\",{\"1\":{\"292\":1}}],[\"listfiles\",{\"0\":{\"292\":1},\"1\":{\"292\":1}}],[\"listemittedfiles设置编译时在终端显示\",{\"1\":{\"291\":1}}],[\"listemittedfiles\",{\"0\":{\"291\":1},\"1\":{\"291\":1}}],[\"list\",{\"1\":{\"178\":1}}],[\"light\",{\"1\":{\"95\":23,\"186\":1}}],[\"less\",{\"1\":{\"337\":1}}],[\"length\",{\"1\":{\"89\":1,\"204\":1,\"232\":1,\"250\":1,\"328\":1}}],[\"leaf\",{\"1\":{\"65\":1}}],[\"let命令声明的变量\",{\"1\":{\"208\":2}}],[\"let\",{\"1\":{\"37\":3,\"58\":1,\"124\":1,\"126\":1,\"132\":1,\"162\":3,\"192\":1,\"196\":1,\"197\":1,\"203\":6,\"204\":8,\"205\":4,\"206\":2,\"207\":1,\"208\":3,\"213\":2,\"215\":2,\"216\":1,\"217\":4,\"218\":3,\"219\":5,\"220\":2,\"221\":1,\"222\":2,\"223\":2,\"226\":4,\"228\":2,\"230\":2,\"253\":2,\"283\":1}}],[\"left\",{\"1\":{\"18\":3}}],[\"lowercase<a>\",{\"1\":{\"256\":1}}],[\"lowercase<stringtype>将字符串的每个字符转为小写\",{\"1\":{\"256\":1}}],[\"loops\",{\"1\":{\"132\":1}}],[\"lodashdebounce\",{\"1\":{\"331\":1}}],[\"lodash\",{\"1\":{\"117\":1,\"120\":1}}],[\"loader类似\",{\"1\":{\"337\":1}}],[\"loader能够产生额外的任意文件\",{\"1\":{\"336\":1}}],[\"loader运行在nodejs中\",{\"1\":{\"336\":1}}],[\"loader可以是同步的\",{\"1\":{\"336\":1}}],[\"loader用于对模块源代码进行转换\",{\"1\":{\"334\":1}}],[\"loader\",{\"0\":{\"333\":1},\"1\":{\"309\":1,\"335\":6,\"336\":3,\"337\":10}}],[\"loaded\",{\"1\":{\"137\":1,\"309\":1}}],[\"loaditems\",{\"1\":{\"137\":1}}],[\"loadingcomponent\",{\"1\":{\"309\":2}}],[\"loading\",{\"1\":{\"70\":1,\"309\":1}}],[\"loadimagefromdisk\",{\"1\":{\"61\":2}}],[\"load\",{\"1\":{\"70\":2,\"161\":1,\"309\":1}}],[\"localforage\",{\"1\":{\"36\":6}}],[\"localstorage\",{\"1\":{\"35\":1,\"36\":1}}],[\"logerror\",{\"1\":{\"253\":3}}],[\"logged\",{\"1\":{\"86\":1}}],[\"logdata\",{\"1\":{\"86\":3}}],[\"log\",{\"1\":{\"18\":2,\"36\":8,\"42\":2,\"48\":1,\"51\":2,\"55\":1,\"58\":3,\"61\":2,\"64\":2,\"67\":3,\"70\":4,\"73\":2,\"77\":2,\"80\":5,\"83\":1,\"86\":1,\"89\":1,\"92\":3,\"95\":2,\"98\":3,\"101\":2,\"104\":2,\"107\":4,\"110\":1,\"118\":2,\"121\":2,\"124\":1,\"126\":1,\"132\":2,\"137\":1,\"141\":1,\"148\":1,\"153\":2,\"192\":1}}],[\"===\",{\"1\":{\"73\":1,\"92\":2,\"107\":2,\"121\":1,\"132\":2,\"204\":3,\"205\":2,\"206\":1,\"207\":2,\"222\":1,\"232\":1}}],[\"==\",{\"1\":{\"67\":1,\"83\":1,\"86\":1,\"121\":1}}],[\"=>\",{\"1\":{\"37\":2,\"86\":2,\"137\":1,\"141\":3,\"162\":3,\"164\":2,\"183\":1,\"186\":4,\"199\":1,\"204\":1,\"215\":1,\"216\":1,\"237\":4,\"238\":2,\"239\":2,\"240\":4,\"243\":3,\"244\":7,\"251\":10,\"252\":1,\"253\":2,\"309\":3,\"328\":1,\"330\":2,\"331\":1}}],[\"=\",{\"1\":{\"18\":1,\"36\":2,\"37\":6,\"42\":1,\"48\":10,\"51\":3,\"55\":3,\"58\":4,\"61\":5,\"64\":6,\"67\":5,\"70\":4,\"73\":7,\"77\":2,\"80\":2,\"83\":8,\"86\":5,\"89\":5,\"92\":4,\"95\":8,\"98\":6,\"101\":3,\"104\":3,\"107\":8,\"110\":7,\"118\":6,\"121\":6,\"124\":3,\"126\":3,\"130\":1,\"132\":4,\"134\":1,\"137\":1,\"139\":1,\"141\":13,\"146\":1,\"148\":1,\"150\":1,\"153\":4,\"158\":1,\"162\":3,\"186\":35,\"191\":8,\"192\":4,\"197\":1,\"199\":1,\"203\":9,\"204\":16,\"205\":3,\"206\":2,\"207\":20,\"208\":6,\"213\":6,\"215\":8,\"216\":6,\"217\":9,\"218\":10,\"219\":4,\"220\":3,\"221\":8,\"222\":8,\"223\":4,\"226\":6,\"227\":2,\"228\":10,\"229\":1,\"230\":15,\"231\":2,\"233\":3,\"236\":3,\"237\":10,\"238\":8,\"239\":8,\"240\":12,\"241\":7,\"242\":5,\"243\":2,\"244\":12,\"245\":2,\"246\":5,\"247\":6,\"248\":4,\"249\":3,\"250\":2,\"251\":13,\"252\":2,\"253\":2,\"255\":2,\"256\":2,\"257\":2,\"258\":2,\"283\":2,\"309\":2,\"328\":4,\"329\":1,\"330\":3,\"331\":8,\"335\":1}}],[\"t7\",{\"1\":{\"238\":1}}],[\"t6\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"251\":1}}],[\"t5\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"244\":1,\"251\":1}}],[\"t4\",{\"1\":{\"238\":1,\"239\":1,\"241\":1,\"244\":1,\"251\":1}}],[\"t3\",{\"1\":{\"230\":1,\"237\":1,\"238\":1,\"239\":1,\"241\":1,\"242\":1,\"244\":1,\"246\":1,\"251\":1}}],[\"t2\",{\"1\":{\"230\":1,\"237\":4,\"238\":1,\"239\":1,\"240\":2,\"241\":1,\"242\":1,\"244\":3,\"246\":1,\"251\":4}}],[\"tuple\",{\"1\":{\"230\":4}}],[\"turnofflightcommand\",{\"1\":{\"95\":2}}],[\"turnoff\",{\"1\":{\"95\":5}}],[\"turnonlightcommand\",{\"1\":{\"95\":2}}],[\"turnon\",{\"1\":{\"95\":5}}],[\"t是最底层数组成员的类型\",{\"1\":{\"229\":1}}],[\"t1\",{\"1\":{\"222\":1,\"230\":1,\"237\":4,\"238\":1,\"239\":1,\"240\":2,\"241\":1,\"242\":1,\"244\":3,\"246\":1,\"251\":4}}],[\"t0\",{\"1\":{\"222\":1}}],[\"twice\",{\"1\":{\"199\":2}}],[\"t>\",{\"1\":{\"186\":4,\"244\":1,\"246\":1,\"248\":1,\"251\":1}}],[\"ts和\",{\"1\":{\"296\":1}}],[\"ts代码嵌入编译后的\",{\"1\":{\"287\":1}}],[\"ts类型声明文件的同时\",{\"1\":{\"274\":1}}],[\"ts文件\",{\"1\":{\"280\":1,\"301\":1}}],[\"ts文件所在的目录\",{\"1\":{\"273\":1}}],[\"ts文件里面\",{\"1\":{\"254\":1}}],[\"tsconfig名称空间下面有很多模块\",{\"1\":{\"262\":1}}],[\"tsconfig\",{\"0\":{\"260\":1},\"1\":{\"217\":1,\"261\":2,\"262\":4,\"269\":1,\"302\":1,\"303\":1}}],[\"tsc\",{\"1\":{\"203\":1,\"217\":1,\"261\":1,\"262\":1}}],[\"ts简介\",{\"0\":{\"188\":1}}],[\"tsx和\",{\"1\":{\"301\":1}}],[\"tsx文件\",{\"1\":{\"289\":1}}],[\"tsx\",{\"1\":{\"186\":1}}],[\"ts\",{\"0\":{\"180\":1,\"199\":1},\"1\":{\"186\":3,\"189\":1,\"199\":14,\"203\":1,\"217\":1,\"269\":1,\"270\":1,\"272\":1,\"296\":2,\"301\":1,\"304\":2}}],[\"takerecords\",{\"1\":{\"131\":1,\"136\":1}}],[\"targetcontext\",{\"1\":{\"186\":1}}],[\"targetnode\",{\"1\":{\"132\":2}}],[\"target\",{\"1\":{\"53\":1,\"55\":5,\"118\":3,\"124\":1,\"186\":1}}],[\"t\",{\"1\":{\"89\":5,\"186\":18,\"222\":1,\"223\":4,\"231\":2,\"237\":2,\"238\":2,\"239\":3,\"240\":4,\"241\":2,\"242\":2,\"243\":4,\"244\":2,\"245\":3,\"246\":2,\"247\":7,\"248\":4,\"249\":5,\"250\":1,\"251\":3,\"252\":2}}],[\"trim\",{\"1\":{\"204\":1}}],[\"traditional\",{\"1\":{\"132\":1}}],[\"true\",{\"1\":{\"73\":1,\"110\":2,\"132\":3,\"192\":1,\"203\":1,\"204\":1,\"215\":1,\"216\":1,\"217\":1,\"219\":1,\"222\":1,\"223\":1,\"230\":1,\"264\":1,\"267\":1,\"268\":1,\"273\":1,\"274\":2,\"291\":1,\"292\":1,\"293\":1,\"335\":1}}],[\"treenode\",{\"1\":{\"186\":1}}],[\"tree\",{\"1\":{\"186\":3}}],[\"tree3\",{\"1\":{\"73\":4}}],[\"tree2\",{\"1\":{\"73\":2}}],[\"tree1\",{\"1\":{\"73\":4}}],[\"treetypes\",{\"1\":{\"73\":4}}],[\"treetypefactory\",{\"1\":{\"73\":2}}],[\"treetype\",{\"1\":{\"73\":4}}],[\"to=\",{\"1\":{\"310\":1,\"312\":1}}],[\"tohex>\",{\"1\":{\"243\":1,\"252\":1}}],[\"tohex\",{\"1\":{\"243\":1,\"252\":1}}],[\"tofixed\",{\"1\":{\"203\":1}}],[\"top\",{\"1\":{\"203\":1}}],[\"tostring\",{\"1\":{\"196\":1,\"197\":1,\"217\":1,\"243\":1,\"252\":1}}],[\"to\",{\"1\":{\"70\":1,\"98\":2}}],[\"toc\",{\"1\":{\"6\":1}}],[\"teleport>\",{\"1\":{\"310\":1,\"311\":1,\"312\":1}}],[\"teleport\",{\"0\":{\"310\":1,\"311\":1,\"312\":1},\"1\":{\"312\":2}}],[\"template>\",{\"1\":{\"309\":2}}],[\"terminate\",{\"1\":{\"151\":2}}],[\"terminalexpression\",{\"1\":{\"108\":1,\"110\":3}}],[\"tests\",{\"1\":{\"301\":1}}],[\"test\",{\"1\":{\"61\":1,\"174\":1,\"335\":1}}],[\"textbox\",{\"1\":{\"45\":8}}],[\"tex\",{\"0\":{\"18\":1}}],[\"type>的实现如下\",{\"1\":{\"248\":1}}],[\"type>的第一个参数a\",{\"1\":{\"248\":1}}],[\"type>返回一个对象类型\",{\"1\":{\"248\":1}}],[\"types\",{\"1\":{\"219\":1,\"220\":1,\"273\":1}}],[\"typescript数组有一个根本特征\",{\"1\":{\"226\":1}}],[\"typescript实际上会关闭这个变量的类型检查\",{\"1\":{\"203\":1}}],[\"typescript\",{\"0\":{\"198\":1},\"1\":{\"189\":4,\"190\":3,\"191\":5,\"192\":7,\"193\":4,\"196\":2,\"197\":5,\"198\":2,\"199\":9,\"203\":13,\"204\":2,\"205\":4,\"206\":1,\"207\":2,\"208\":1,\"211\":3,\"213\":1,\"214\":1,\"217\":2,\"218\":3,\"220\":1,\"222\":4,\"223\":1,\"226\":1,\"227\":2,\"228\":1,\"229\":1,\"230\":1,\"232\":1,\"233\":3,\"240\":1,\"241\":1,\"253\":2,\"254\":2,\"261\":2,\"264\":1,\"269\":2,\"271\":1,\"282\":1,\"285\":1,\"288\":1,\"290\":1,\"295\":2,\"296\":1,\"298\":1,\"299\":1},\"2\":{\"187\":1,\"194\":1,\"200\":1,\"209\":1,\"224\":1,\"234\":1,\"259\":1,\"305\":1}}],[\"type=\",{\"1\":{\"141\":2}}],[\"typeof命令的参数不能是类型\",{\"1\":{\"222\":1}}],[\"typeof运算符只可能返回八种结果\",{\"1\":{\"222\":1}}],[\"typeof运算符和instanceof运算符这几种\",{\"1\":{\"204\":1}}],[\"typeof\",{\"0\":{\"222\":1},\"1\":{\"121\":1,\"204\":2,\"205\":2,\"207\":1,\"222\":16}}],[\"type\",{\"0\":{\"221\":1,\"345\":1},\"1\":{\"42\":3,\"73\":11,\"132\":2,\"147\":1,\"149\":1,\"186\":25,\"190\":1,\"203\":1,\"205\":1,\"220\":2,\"221\":7,\"222\":5,\"223\":2,\"226\":4,\"230\":8,\"231\":2,\"236\":3,\"237\":9,\"238\":8,\"239\":8,\"240\":10,\"241\":7,\"242\":5,\"243\":2,\"244\":12,\"245\":2,\"246\":5,\"247\":4,\"248\":4,\"249\":3,\"251\":13,\"252\":2,\"255\":2,\"256\":2,\"257\":2,\"258\":2}}],[\"typedarray\",{\"1\":{\"35\":1}}],[\"timeouthandle\",{\"1\":{\"186\":1}}],[\"timeout\",{\"1\":{\"126\":4,\"309\":1}}],[\"timeoutid\",{\"1\":{\"37\":6}}],[\"timer存储在内存中就要涉及到内存的泄露和闭包\",{\"1\":{\"124\":1}}],[\"timer\",{\"1\":{\"124\":3}}],[\"title\",{\"1\":{\"26\":3}}],[\"than\",{\"1\":{\"141\":1}}],[\"thistype<type>的实现就是一个空接口\",{\"1\":{\"253\":1}}],[\"thistype<type>不返回类型\",{\"1\":{\"253\":1}}],[\"thistype<\",{\"1\":{\"253\":1}}],[\"thistype<helperthisvalue>\",{\"1\":{\"253\":1}}],[\"thisparametertype<type>的实现如下\",{\"1\":{\"252\":1}}],[\"thisparametertype<type>提取函数类型中this参数的类型\",{\"1\":{\"252\":1}}],[\"thisparametertype<typeof\",{\"1\":{\"252\":1}}],[\"thisparametertype<t>\",{\"1\":{\"243\":1,\"252\":1}}],[\"this\",{\"1\":{\"37\":3,\"48\":15,\"51\":3,\"55\":2,\"58\":5,\"61\":9,\"64\":4,\"67\":4,\"70\":8,\"73\":5,\"77\":2,\"80\":3,\"83\":9,\"86\":9,\"89\":10,\"92\":3,\"95\":11,\"98\":8,\"101\":4,\"104\":4,\"107\":11,\"110\":8,\"243\":4,\"252\":3,\"253\":4}}],[\"thread\",{\"1\":{\"148\":1,\"149\":1}}],[\"thresholds\",{\"1\":{\"135\":1}}],[\"three\",{\"1\":{\"36\":1}}],[\"thro\",{\"1\":{\"126\":2}}],[\"throw\",{\"1\":{\"42\":1,\"205\":1,\"328\":1}}],[\"throttle\",{\"1\":{\"37\":1}}],[\"then\",{\"1\":{\"36\":4,\"164\":1}}],[\"the\",{\"1\":{\"26\":1,\"70\":1,\"73\":1,\"95\":2,\"132\":1}}],[\"导致每一个原始类型的值都有包装对象和字面量两种情况\",{\"1\":{\"213\":1}}],[\"导致报错\",{\"1\":{\"207\":1}}],[\"导致其他变量出错\",{\"1\":{\"203\":1}}],[\"导致用户在使用时遇到错误\",{\"1\":{\"190\":1}}],[\"导入文件\",{\"0\":{\"17\":1}}],[\"导航栏\",{\"1\":{\"3\":1,\"6\":1}}],[\"13\",{\"1\":{\"313\":1}}],[\"1337\",{\"1\":{\"222\":1}}],[\"16\",{\"1\":{\"243\":1,\"252\":1}}],[\"127n\",{\"1\":{\"222\":1}}],[\"123\",{\"1\":{\"197\":1,\"203\":2,\"204\":2,\"215\":1,\"216\":1,\"219\":1,\"227\":2}}],[\"123和456这两个值\",{\"1\":{\"190\":1}}],[\"1的类型\",{\"1\":{\"218\":1}}],[\"11\",{\"1\":{\"132\":1}}],[\"1000\",{\"1\":{\"124\":1,\"309\":1}}],[\"100\",{\"1\":{\"77\":1,\"203\":1}}],[\"1024\",{\"1\":{\"70\":1}}],[\"10\",{\"1\":{\"64\":1,\"137\":1,\"204\":1}}],[\"19th\",{\"1\":{\"21\":1}}],[\"1\",{\"1\":{\"16\":1,\"18\":1,\"19\":1,\"27\":2,\"29\":2,\"36\":1,\"58\":1,\"67\":2,\"83\":3,\"89\":1,\"98\":2,\"118\":1,\"121\":1,\"141\":4,\"162\":1,\"190\":1,\"191\":4,\"203\":4,\"204\":5,\"212\":1,\"215\":3,\"216\":3,\"218\":3,\"222\":1,\"226\":2,\"228\":7,\"229\":1,\"230\":4,\"233\":4,\"250\":2,\"295\":1}}],[\"插件\",{\"1\":{\"14\":1,\"336\":1}}],[\"插件来实现\",{\"1\":{\"12\":1}}],[\"对五种原始类型分别提供了大写和小写两种类型\",{\"1\":{\"213\":1}}],[\"对象类型a不存在键名z\",{\"1\":{\"246\":1}}],[\"对象类型a中不存在属性z\",{\"1\":{\"242\":1}}],[\"对象有什么属性\",{\"1\":{\"191\":1}}],[\"对象\",{\"1\":{\"147\":1}}],[\"对象数组\",{\"1\":{\"136\":1}}],[\"对象停止监听目标\",{\"1\":{\"136\":1}}],[\"对象结构\",{\"1\":{\"102\":1,\"104\":1}}],[\"对于语句import\",{\"1\":{\"296\":1}}],[\"对于开发者没有指定类型\",{\"1\":{\"203\":1}}],[\"对于这些存储方式\",{\"1\":{\"35\":1}}],[\"对于本地话存储\",{\"1\":{\"35\":1}}],[\"对于\",{\"1\":{\"28\":1}}],[\"对\",{\"1\":{\"13\":1,\"189\":1}}],[\"为能够交互的客户端应用\",{\"1\":{\"317\":1}}],[\"为32kb\",{\"1\":{\"313\":1}}],[\"为起点\",{\"1\":{\"269\":1}}],[\"为什么never类型可以赋值给任意其他类型呢\",{\"1\":{\"205\":1}}],[\"为了避免这种情况\",{\"1\":{\"217\":1}}],[\"为了区分这两种情况\",{\"1\":{\"213\":1}}],[\"为了解决这个问题\",{\"1\":{\"207\":1}}],[\"为了解决any类型\",{\"1\":{\"204\":1}}],[\"为了保持与集合论的对应关系\",{\"1\":{\"205\":1}}],[\"为了适配以前老的\",{\"1\":{\"203\":1}}],[\"为了丰富文档写作\",{\"1\":{\"13\":1}}],[\"为编译器和开发工具提供更多的验证和帮助\",{\"1\":{\"190\":1}}],[\"为\",{\"1\":{\"137\":1}}],[\"为每个\",{\"1\":{\"11\":1}}],[\"扩展运算符与成员数量\",{\"0\":{\"233\":1}}],[\"扩展运算符\",{\"1\":{\"230\":1,\"233\":1}}],[\"扩展现有类型\",{\"0\":{\"184\":1}}],[\"扩展性\",{\"1\":{\"94\":1}}],[\"扩展了抽象的功能\",{\"1\":{\"62\":1}}],[\"扩展抽象类\",{\"1\":{\"62\":1,\"64\":1}}],[\"扩展\",{\"0\":{\"12\":1,\"13\":1},\"1\":{\"13\":1}}],[\"了解详情\",{\"1\":{\"11\":1}}],[\"请看下面的\",{\"1\":{\"191\":1}}],[\"请求的发送者与接收者之间没有直接的依赖关系\",{\"1\":{\"94\":1}}],[\"请求的发送者与具体处理者之间没有直接依赖关系\",{\"1\":{\"91\":1}}],[\"请求的发起者\",{\"1\":{\"93\":1}}],[\"请使用绝对链接\",{\"1\":{\"28\":1}}],[\"请阅读\",{\"1\":{\"11\":1,\"13\":1}}],[\"请先阅读\",{\"1\":{\"10\":1}}],[\"中渲染一个完整的应用要比仅仅托管静态文件更加占用cpu资源\",{\"1\":{\"325\":1}}],[\"中运行\",{\"1\":{\"156\":1}}],[\"中\",{\"1\":{\"131\":1,\"287\":1,\"308\":1}}],[\"中介者接口\",{\"1\":{\"105\":1,\"107\":1}}],[\"中介者模式是一种行为型设计模式\",{\"1\":{\"105\":1}}],[\"中介者模式\",{\"0\":{\"105\":1}}],[\"中使用\",{\"1\":{\"29\":1}}],[\"中设置页面信息\",{\"1\":{\"27\":1}}],[\"中设置页面标题\",{\"1\":{\"26\":1}}],[\"中的第一个\",{\"1\":{\"26\":1}}],[\"中的\",{\"1\":{\"13\":1}}],[\"中很重要的一个概念\",{\"1\":{\"11\":1}}],[\"中自定义它们\",{\"1\":{\"6\":1}}],[\"是否会因为缺少其他脚本的类型信息而报错\",{\"1\":{\"288\":1}}],[\"是object类型的简写形式\",{\"1\":{\"215\":1}}],[\"是es2015\",{\"1\":{\"206\":1}}],[\"是不会报错的\",{\"1\":{\"203\":1}}],[\"是不会互相影响的\",{\"1\":{\"118\":1}}],[\"是在开发阶段报错\",{\"1\":{\"190\":1}}],[\"是微软公司开发的一种基于\",{\"1\":{\"189\":1}}],[\"是函数在特定的时间内不被再调用后执行\",{\"1\":{\"127\":2}}],[\"是确保函数特定的时间内至多执行一次\",{\"1\":{\"127\":2}}],[\"是会互相影响的\",{\"1\":{\"118\":1}}],[\"是一个非官方的\",{\"1\":{\"199\":1}}],[\"是一个后台运行的脚本\",{\"1\":{\"160\":1}}],[\"是一个基于javascript的面向对象数据库\",{\"1\":{\"35\":1}}],[\"是一种特殊类型的\",{\"1\":{\"155\":1}}],[\"是一种运行在主线程之外的\",{\"1\":{\"144\":1}}],[\"是一种底层的api\",{\"1\":{\"35\":1}}],[\"是\",{\"1\":{\"11\":1,\"230\":1}}],[\"配置\",{\"0\":{\"11\":1},\"1\":{\"131\":1}}],[\"演示一下类型系统的作用\",{\"1\":{\"190\":1}}],[\"演示\",{\"1\":{\"10\":1}}],[\"和file\",{\"1\":{\"337\":1}}],[\"和权限判断函数\",{\"1\":{\"328\":1}}],[\"和never\",{\"1\":{\"237\":1,\"244\":1}}],[\"和bigint\",{\"1\":{\"212\":1,\"213\":1}}],[\"和自动补全功能\",{\"1\":{\"192\":1}}],[\"和\",{\"0\":{\"217\":1},\"1\":{\"10\":1,\"27\":1,\"213\":5,\"282\":1,\"307\":1}}],[\"介绍\",{\"0\":{\"10\":1},\"1\":{\"10\":1,\"11\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}],[\"你也可以使用别人预先写好的\",{\"1\":{\"262\":1}}],[\"你也可以创建并引入你自己的组件\",{\"1\":{\"29\":1}}],[\"你使用了一个他人提供的对象\",{\"1\":{\"114\":1}}],[\"你需要创建并编写\",{\"1\":{\"9\":1}}],[\"你可以使用相同的语言以及相同的声明式\",{\"1\":{\"320\":1}}],[\"你可以使用它轻松生成文档或博客站点\",{\"1\":{\"9\":1}}],[\"你可以存储非字符串类型\",{\"1\":{\"36\":1}}],[\"你可以将图片和\",{\"1\":{\"28\":1}}],[\"你可以自由在这里书写你的\",{\"1\":{\"28\":1}}],[\"你可以在这个环境中输入\",{\"1\":{\"199\":1}}],[\"你可以在\",{\"1\":{\"26\":1,\"27\":1}}],[\"你可以在主题选项和页面的\",{\"1\":{\"6\":1}}],[\"你可以通过设置页面的\",{\"1\":{\"3\":1}}],[\"文档修改\",{\"1\":{\"174\":1}}],[\"文件位置相对于当前配置文件而定\",{\"1\":{\"301\":1}}],[\"文件的位置\",{\"1\":{\"293\":1}}],[\"文件中\",{\"1\":{\"286\":1}}],[\"文件写入编译后的\",{\"1\":{\"286\":1}}],[\"文件同样进行类型检查\",{\"1\":{\"270\":1}}],[\"文件\",{\"1\":{\"262\":1,\"264\":1,\"274\":1}}],[\"文件使用即可获得类型提示\",{\"1\":{\"186\":1}}],[\"文件一样也是全局类型声明\",{\"1\":{\"186\":1}}],[\"文件状态\",{\"0\":{\"170\":1}}],[\"文件预览\",{\"0\":{\"166\":1}}],[\"文件上传和下载\",{\"1\":{\"154\":1}}],[\"文件必须与主线程在同源下运行\",{\"1\":{\"146\":1}}],[\"文件解析等\",{\"1\":{\"144\":1}}],[\"文件夹的图片\",{\"1\":{\"28\":1}}],[\"文件放置在一起使用相对路径进行引用\",{\"1\":{\"28\":1}}],[\"文件生成页面\",{\"1\":{\"9\":1}}],[\"文章标题列表\",{\"1\":{\"6\":1}}],[\"夜间模式按钮\",{\"1\":{\"6\":1}}],[\"主机和端口\",{\"1\":{\"156\":1}}],[\"主线程发送\",{\"1\":{\"153\":1}}],[\"主线程\",{\"1\":{\"153\":1}}],[\"主线程可以使用\",{\"1\":{\"151\":1}}],[\"主线程可以通过\",{\"1\":{\"150\":1}}],[\"主线程使用postmessage\",{\"1\":{\"147\":1}}],[\"主题\",{\"1\":{\"81\":1}}],[\"主题接口\",{\"1\":{\"59\":1,\"61\":1,\"81\":1,\"83\":1}}],[\"主题扩展了更多\",{\"1\":{\"14\":1}}],[\"主题扩展\",{\"0\":{\"14\":1}}],[\"主题也带有以下元素\",{\"1\":{\"6\":1}}],[\"主要便于非官方的编译工具\",{\"1\":{\"288\":1}}],[\"主要是在一些类型运算之中\",{\"1\":{\"205\":1}}],[\"主要有以下几个限制\",{\"1\":{\"204\":1}}],[\"主要目的是在软件开发过程中\",{\"1\":{\"190\":1}}],[\"主要用于声明全局类型和模块\",{\"1\":{\"180\":1}}],[\"主要从\",{\"1\":{\"9\":1}}],[\"主要功能与配置演示\",{\"0\":{\"1\":1}}],[\"布局包括\",{\"1\":{\"6\":1}}],[\"布局\",{\"0\":{\"6\":1},\"2\":{\"8\":1}}],[\"布局与功能禁用\",{\"0\":{\"3\":1}}],[\"禁用javascript工程体积大小的限制\",{\"1\":{\"276\":1}}],[\"禁用\",{\"0\":{\"311\":1},\"2\":{\"5\":1}}],[\"禁用了如下功能\",{\"1\":{\"3\":1}}],[\"页面都会被转换为一个\",{\"1\":{\"29\":1}}],[\"页面内容\",{\"0\":{\"28\":1}}],[\"页面标题\",{\"0\":{\"26\":1},\"1\":{\"26\":1}}],[\"页面配置\",{\"0\":{\"25\":1},\"1\":{\"27\":1},\"2\":{\"31\":1}}],[\"页面引入配置\",{\"1\":{\"11\":1}}],[\"页面信息\",{\"0\":{\"27\":1},\"1\":{\"3\":1}}],[\"页脚\",{\"1\":{\"3\":1,\"6\":1}}],[\"评论\",{\"1\":{\"3\":1,\"6\":1}}],[\"链接\",{\"1\":{\"3\":1}}],[\"贡献者\",{\"1\":{\"3\":1,\"6\":1}}],[\"路径导航\",{\"1\":{\"3\":1,\"6\":1}}],[\"侧边栏\",{\"1\":{\"3\":1,\"6\":1}}]],\"version\":2}}")).map(([e,t])=>[e,jn(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:n,options:s,id:r}})=>{const o=An[n];e==="suggest"?self.postMessage([e,r,Et(t,o,s)]):e==="search"?self.postMessage([e,r,vt(t,o,s,"max")]):self.postMessage({suggestions:[e,r,Et(t,o,s)],results:[e,r,vt(t,o,s,__SLIMSEARCH_SORT_STRATEGY__)]})};
//# sourceMappingURL=index.js.map
